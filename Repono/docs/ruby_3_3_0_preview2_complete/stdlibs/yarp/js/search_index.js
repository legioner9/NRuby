var search_data = {"index":{"searchIndex":["object","yarp","aliasglobalvariablenode","aliasmethodnode","alternationpatternnode","andnode","argumentsnode","arraynode","arraypatternnode","assocnode","assocsplatnode","backreferencereadnode","basicvisitor","beginnode","blockargumentnode","blocklocalvariablenode","blocknode","blockparameternode","blockparametersnode","breaknode","callandwritenode","callnode","callnodeflags","calloperatorwritenode","callorwritenode","capturepatternnode","casenode","classnode","classvariableandwritenode","classvariableoperatorwritenode","classvariableorwritenode","classvariablereadnode","classvariabletargetnode","classvariablewritenode","comment","constantandwritenode","constantoperatorwritenode","constantorwritenode","constantpathandwritenode","constantpathnode","constantpathoperatorwritenode","constantpathorwritenode","constantpathtargetnode","constantpathwritenode","constantreadnode","constanttargetnode","constantwritenode","dsl","debug","iseq","defnode","definednode","desugarvisitor","elsenode","embeddedstatementsnode","embeddedvariablenode","ensurenode","falsenode","findpatternnode","flipflopnode","floatnode","fornode","forwardingargumentsnode","forwardingparameternode","forwardingsupernode","globalvariableandwritenode","globalvariableoperatorwritenode","globalvariableorwritenode","globalvariablereadnode","globalvariabletargetnode","globalvariablewritenode","hashnode","hashpatternnode","ifnode","imaginarynode","innode","instancevariableandwritenode","instancevariableoperatorwritenode","instancevariableorwritenode","instancevariablereadnode","instancevariabletargetnode","instancevariablewritenode","integerbaseflags","integernode","interpolatedmatchlastlinenode","interpolatedregularexpressionnode","interpolatedstringnode","interpolatedsymbolnode","interpolatedxstringnode","keywordhashnode","keywordparameternode","keywordrestparameternode","lambdanode","languageserver","lexcompat","endcontenttoken","heredoc","dashheredoc","dedentingheredoc","plainheredoc","identtoken","ignorestatetoken","ignorednewlinetoken","paramtoken","token","librubyparser","ypbuffer","ypstring","localvariableandwritenode","localvariableoperatorwritenode","localvariableorwritenode","localvariablereadnode","localvariabletargetnode","localvariablewritenode","location","loopflags","matchlastlinenode","matchpredicatenode","matchrequirednode","missingnode","modulenode","multitargetnode","multiwritenode","mutationvisitor","nextnode","nilnode","nokeywordsparameternode","node","nodeinspector","numberedreferencereadnode","optionalparameternode","ornode","pack","directive","format","parametersnode","parenthesesnode","parseerror","parseresult","comments","locationtarget","nodetarget","newlines","parsewarning","pattern","compilationerror","pinnedexpressionnode","pinnedvariablenode","postexecutionnode","preexecutionnode","programnode","rangeflags","rangenode","rationalnode","redonode","regularexpressionflags","regularexpressionnode","requireddestructuredparameternode","requiredparameternode","rescuemodifiernode","rescuenode","restparameternode","retrynode","returnnode","rippercompat","sexpbuilder","sexpbuilderpp","selfnode","serialize","loader","singletonclassnode","source","sourceencodingnode","sourcefilenode","sourcelinenode","splatnode","statementsnode","stringconcatnode","stringnode","supernode","symbolnode","token","truenode","undefnode","unlessnode","untilnode","visitor","whennode","whilenode","xstringnode","yieldnode","<<()","<<()","<<()","<<()","<<()","<<()","==()","==()","==()","==()","==()","==()","==()","aliasglobalvariablenode()","aliasmethodnode()","alternationpatternnode()","andnode()","argumentsnode()","arraynode()","arraypatternnode()","assocnode()","assocsplatnode()","backreferencereadnode()","beginnode()","blockargumentnode()","blocklocalvariablenode()","blocknode()","blockparameternode()","blockparametersnode()","breaknode()","callandwritenode()","callnode()","calloperatorwritenode()","callorwritenode()","capturepatternnode()","casenode()","classnode()","classvariableandwritenode()","classvariableoperatorwritenode()","classvariableorwritenode()","classvariablereadnode()","classvariabletargetnode()","classvariablewritenode()","constantandwritenode()","constantoperatorwritenode()","constantorwritenode()","constantpathandwritenode()","constantpathnode()","constantpathoperatorwritenode()","constantpathorwritenode()","constantpathtargetnode()","constantpathwritenode()","constantreadnode()","constanttargetnode()","constantwritenode()","defnode()","definednode()","elsenode()","embeddedstatementsnode()","embeddedvariablenode()","ensurenode()","falsenode()","findpatternnode()","flipflopnode()","floatnode()","fornode()","forwardingargumentsnode()","forwardingparameternode()","forwardingsupernode()","globalvariableandwritenode()","globalvariableoperatorwritenode()","globalvariableorwritenode()","globalvariablereadnode()","globalvariabletargetnode()","globalvariablewritenode()","hashnode()","hashpatternnode()","ifnode()","imaginarynode()","innode()","instancevariableandwritenode()","instancevariableoperatorwritenode()","instancevariableorwritenode()","instancevariablereadnode()","instancevariabletargetnode()","instancevariablewritenode()","integernode()","interpolatedmatchlastlinenode()","interpolatedregularexpressionnode()","interpolatedstringnode()","interpolatedsymbolnode()","interpolatedxstringnode()","keywordhashnode()","keywordparameternode()","keywordrestparameternode()","lambdanode()","localvariableandwritenode()","localvariableoperatorwritenode()","localvariableorwritenode()","localvariablereadnode()","localvariabletargetnode()","localvariablewritenode()","location()","matchlastlinenode()","matchpredicatenode()","matchrequirednode()","missingnode()","modulenode()","multitargetnode()","multiwritenode()","nextnode()","nilnode()","nokeywordsparameternode()","numberedreferencereadnode()","optionalparameternode()","ornode()","parametersnode()","parenthesesnode()","pinnedexpressionnode()","pinnedvariablenode()","postexecutionnode()","preexecutionnode()","programnode()","rangenode()","rationalnode()","redonode()","regularexpressionnode()","requireddestructuredparameternode()","requiredparameternode()","rescuemodifiernode()","rescuenode()","restparameternode()","retrynode()","returnnode()","selfnode()","singletonclassnode()","sourceencodingnode()","sourcefilenode()","sourcelinenode()","splatnode()","statementsnode()","stringconcatnode()","stringnode()","supernode()","symbolnode()","truenode()","undefnode()","unlessnode()","untilnode()","whennode()","whilenode()","xstringnode()","yieldnode()","_dispatch0()","_dispatch1()","_dispatch2()","_dispatch3()","_dispatch4()","_dispatch5()","_dispatch7()","_dispatch_event_new()","_dispatch_event_push()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","ascii_8bit?()","ascii_8bit?()","ascii_8bit?()","ascii_8bit?()","attach!()","attach_comments!()","begin_keyword()","begin_modifier?()","begin_modifier?()","binary?()","bounds()","build()","call_operator()","call_operator()","call_operator()","call_operator()","capabilities()","case_keyword()","child_inspector()","child_node()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","class_keyword()","class_keyword()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","closing()","code_actions()","column()","combine_and()","combine_or()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","comment_targets()","compile()","compile_alternation_pattern_node()","compile_array_pattern_node()","compile_constant_path_node()","compile_constant_read_node()","compile_error()","compile_hash_pattern_node()","compile_nil_node()","compile_node()","compile_regular_expression_node()","compile_string_node()","compile_symbol_node()","compute_offsets()","content()","content()","content()","content()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","copy()","cruby_locals()","decimal?()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","def_keyword()","delimiter()","delimiter()","describe()","describe()","desugar_and_write_node()","desugar_operator_write_node()","desugar_or_write_defined_node()","desugar_or_write_node()","diagnostics()","do_keyword()","dump()","dump_file()","dump_internal()","each_child()","else_keyword()","encloses?()","encloses?()","end_column()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_keyword()","end_line()","end_offset()","end_offset()","end_offset()","ensure_keyword()","equal()","error?()","euc_jp?()","euc_jp?()","euc_jp?()","euc_jp?()","event()","exclude_end?()","exclude_end?()","extended?()","extended?()","extended?()","extended?()","failure?()","for_keyword()","header()","hexadecimal?()","if_keyword()","ignore_case?()","ignore_case?()","ignore_case?()","ignore_case?()","in()","in_keyword()","inheritance_operator()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instructions()","join()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword()","length()","length()","lex()","lex_compat()","lex_file()","lex_ripper()","line()","line_offset()","list()","load()","load()","load_constant()","load_embedded_string()","load_encoding()","load_exported_functions_from()","load_location()","load_metadata()","load_node()","load_nodes()","load_optional_constant()","load_optional_location()","load_optional_node()","load_required_constant()","load_result()","load_serialized_length()","load_string()","load_tokens()","load_tokens()","load_tokens_result()","load_varint()","local_table()","location()","location()","lparen()","lparen()","lparen()","lparen()","lparen()","lparen()","lparen()","mark_newlines!()","message()","message()","message()","message()","module_keyword()","multi_line?()","multi_line?()","multi_line?()","multi_line?()","nearest_targets()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","newline?()","newlines()","null()","octal?()","once?()","once?()","once?()","once?()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","opening()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","operator()","options()","options()","parse()","parse()","parse_file()","parse_lex()","parse_lex_file()","parse_serialize_file()","pretty_print()","pretty_print()","pretty_print()","read()","read()","resolve_type()","result()","result()","rparen()","rparen()","rparen()","rparen()","rparen()","rparen()","rparen()","run()","safe_navigation?()","safe_navigation?()","safe_navigation?()","safe_navigation?()","scan()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","set_newline_flag()","sexp()","sexp_raw()","slice()","slice()","slice()","source()","start_column()","start_line()","start_line_slice()","start_offset()","start_offset()","state()","success?()","then()","to_a()","to_a()","to_a()","to_str()","trailing?()","type()","unpack1()","utf_8?()","utf_8?()","utf_8?()","utf_8?()","value()","value()","value()","value()","value()","value()","value()","variable_call?()","variable_call?()","variable_call?()","variable_call?()","visit()","visit()","visit_alias_global_variable_node()","visit_alias_method_node()","visit_all()","visit_alternation_pattern_node()","visit_and_node()","visit_arguments_node()","visit_array_node()","visit_array_pattern_node()","visit_assoc_node()","visit_assoc_splat_node()","visit_back_reference_read_node()","visit_begin_node()","visit_block_argument_node()","visit_block_local_variable_node()","visit_block_node()","visit_block_node()","visit_block_parameter_node()","visit_block_parameters_node()","visit_break_node()","visit_call_and_write_node()","visit_call_node()","visit_call_node()","visit_call_operator_write_node()","visit_call_or_write_node()","visit_capture_pattern_node()","visit_case_node()","visit_child_nodes()","visit_class_node()","visit_class_variable_and_write_node()","visit_class_variable_and_write_node()","visit_class_variable_operator_write_node()","visit_class_variable_operator_write_node()","visit_class_variable_or_write_node()","visit_class_variable_or_write_node()","visit_class_variable_read_node()","visit_class_variable_target_node()","visit_class_variable_write_node()","visit_constant_and_write_node()","visit_constant_and_write_node()","visit_constant_operator_write_node()","visit_constant_operator_write_node()","visit_constant_or_write_node()","visit_constant_or_write_node()","visit_constant_path_and_write_node()","visit_constant_path_node()","visit_constant_path_operator_write_node()","visit_constant_path_or_write_node()","visit_constant_path_target_node()","visit_constant_path_write_node()","visit_constant_read_node()","visit_constant_target_node()","visit_constant_write_node()","visit_def_node()","visit_defined_node()","visit_else_node()","visit_embedded_statements_node()","visit_embedded_variable_node()","visit_ensure_node()","visit_false_node()","visit_find_pattern_node()","visit_flip_flop_node()","visit_float_node()","visit_for_node()","visit_forwarding_arguments_node()","visit_forwarding_parameter_node()","visit_forwarding_super_node()","visit_global_variable_and_write_node()","visit_global_variable_and_write_node()","visit_global_variable_operator_write_node()","visit_global_variable_operator_write_node()","visit_global_variable_or_write_node()","visit_global_variable_or_write_node()","visit_global_variable_read_node()","visit_global_variable_target_node()","visit_global_variable_write_node()","visit_hash_node()","visit_hash_pattern_node()","visit_if_node()","visit_if_node()","visit_imaginary_node()","visit_in_node()","visit_instance_variable_and_write_node()","visit_instance_variable_and_write_node()","visit_instance_variable_operator_write_node()","visit_instance_variable_operator_write_node()","visit_instance_variable_or_write_node()","visit_instance_variable_or_write_node()","visit_instance_variable_read_node()","visit_instance_variable_target_node()","visit_instance_variable_write_node()","visit_integer_node()","visit_integer_node()","visit_interpolated_match_last_line_node()","visit_interpolated_regular_expression_node()","visit_interpolated_string_node()","visit_interpolated_symbol_node()","visit_interpolated_x_string_node()","visit_keyword_hash_node()","visit_keyword_parameter_node()","visit_keyword_rest_parameter_node()","visit_lambda_node()","visit_lambda_node()","visit_local_variable_and_write_node()","visit_local_variable_and_write_node()","visit_local_variable_operator_write_node()","visit_local_variable_operator_write_node()","visit_local_variable_or_write_node()","visit_local_variable_or_write_node()","visit_local_variable_read_node()","visit_local_variable_target_node()","visit_local_variable_write_node()","visit_match_last_line_node()","visit_match_predicate_node()","visit_match_required_node()","visit_missing_node()","visit_module_node()","visit_multi_target_node()","visit_multi_write_node()","visit_next_node()","visit_nil_node()","visit_no_keywords_parameter_node()","visit_numbered_reference_read_node()","visit_optional_parameter_node()","visit_or_node()","visit_parameters_node()","visit_parentheses_node()","visit_pinned_expression_node()","visit_pinned_variable_node()","visit_post_execution_node()","visit_pre_execution_node()","visit_program_node()","visit_program_node()","visit_range_node()","visit_rational_node()","visit_redo_node()","visit_regular_expression_node()","visit_required_destructured_parameter_node()","visit_required_parameter_node()","visit_rescue_modifier_node()","visit_rescue_node()","visit_rest_parameter_node()","visit_retry_node()","visit_return_node()","visit_self_node()","visit_singleton_class_node()","visit_source_encoding_node()","visit_source_file_node()","visit_source_line_node()","visit_splat_node()","visit_statements_node()","visit_statements_node()","visit_statements_node()","visit_string_concat_node()","visit_string_node()","visit_super_node()","visit_symbol_node()","visit_token()","visit_true_node()","visit_undef_node()","visit_unless_node()","visit_unless_node()","visit_until_node()","visit_when_node()","visit_while_node()","visit_x_string_node()","visit_yield_node()","windows_31j?()","windows_31j?()","windows_31j?()","windows_31j?()","with()","with()","write()","yarp_locals()"],"longSearchIndex":["object","yarp","yarp::aliasglobalvariablenode","yarp::aliasmethodnode","yarp::alternationpatternnode","yarp::andnode","yarp::argumentsnode","yarp::arraynode","yarp::arraypatternnode","yarp::assocnode","yarp::assocsplatnode","yarp::backreferencereadnode","yarp::basicvisitor","yarp::beginnode","yarp::blockargumentnode","yarp::blocklocalvariablenode","yarp::blocknode","yarp::blockparameternode","yarp::blockparametersnode","yarp::breaknode","yarp::callandwritenode","yarp::callnode","yarp::callnodeflags","yarp::calloperatorwritenode","yarp::callorwritenode","yarp::capturepatternnode","yarp::casenode","yarp::classnode","yarp::classvariableandwritenode","yarp::classvariableoperatorwritenode","yarp::classvariableorwritenode","yarp::classvariablereadnode","yarp::classvariabletargetnode","yarp::classvariablewritenode","yarp::comment","yarp::constantandwritenode","yarp::constantoperatorwritenode","yarp::constantorwritenode","yarp::constantpathandwritenode","yarp::constantpathnode","yarp::constantpathoperatorwritenode","yarp::constantpathorwritenode","yarp::constantpathtargetnode","yarp::constantpathwritenode","yarp::constantreadnode","yarp::constanttargetnode","yarp::constantwritenode","yarp::dsl","yarp::debug","yarp::debug::iseq","yarp::defnode","yarp::definednode","yarp::desugarvisitor","yarp::elsenode","yarp::embeddedstatementsnode","yarp::embeddedvariablenode","yarp::ensurenode","yarp::falsenode","yarp::findpatternnode","yarp::flipflopnode","yarp::floatnode","yarp::fornode","yarp::forwardingargumentsnode","yarp::forwardingparameternode","yarp::forwardingsupernode","yarp::globalvariableandwritenode","yarp::globalvariableoperatorwritenode","yarp::globalvariableorwritenode","yarp::globalvariablereadnode","yarp::globalvariabletargetnode","yarp::globalvariablewritenode","yarp::hashnode","yarp::hashpatternnode","yarp::ifnode","yarp::imaginarynode","yarp::innode","yarp::instancevariableandwritenode","yarp::instancevariableoperatorwritenode","yarp::instancevariableorwritenode","yarp::instancevariablereadnode","yarp::instancevariabletargetnode","yarp::instancevariablewritenode","yarp::integerbaseflags","yarp::integernode","yarp::interpolatedmatchlastlinenode","yarp::interpolatedregularexpressionnode","yarp::interpolatedstringnode","yarp::interpolatedsymbolnode","yarp::interpolatedxstringnode","yarp::keywordhashnode","yarp::keywordparameternode","yarp::keywordrestparameternode","yarp::lambdanode","yarp::languageserver","yarp::lexcompat","yarp::lexcompat::endcontenttoken","yarp::lexcompat::heredoc","yarp::lexcompat::heredoc::dashheredoc","yarp::lexcompat::heredoc::dedentingheredoc","yarp::lexcompat::heredoc::plainheredoc","yarp::lexcompat::identtoken","yarp::lexcompat::ignorestatetoken","yarp::lexcompat::ignorednewlinetoken","yarp::lexcompat::paramtoken","yarp::lexcompat::token","yarp::librubyparser","yarp::librubyparser::ypbuffer","yarp::librubyparser::ypstring","yarp::localvariableandwritenode","yarp::localvariableoperatorwritenode","yarp::localvariableorwritenode","yarp::localvariablereadnode","yarp::localvariabletargetnode","yarp::localvariablewritenode","yarp::location","yarp::loopflags","yarp::matchlastlinenode","yarp::matchpredicatenode","yarp::matchrequirednode","yarp::missingnode","yarp::modulenode","yarp::multitargetnode","yarp::multiwritenode","yarp::mutationvisitor","yarp::nextnode","yarp::nilnode","yarp::nokeywordsparameternode","yarp::node","yarp::nodeinspector","yarp::numberedreferencereadnode","yarp::optionalparameternode","yarp::ornode","yarp::pack","yarp::pack::directive","yarp::pack::format","yarp::parametersnode","yarp::parenthesesnode","yarp::parseerror","yarp::parseresult","yarp::parseresult::comments","yarp::parseresult::comments::locationtarget","yarp::parseresult::comments::nodetarget","yarp::parseresult::newlines","yarp::parsewarning","yarp::pattern","yarp::pattern::compilationerror","yarp::pinnedexpressionnode","yarp::pinnedvariablenode","yarp::postexecutionnode","yarp::preexecutionnode","yarp::programnode","yarp::rangeflags","yarp::rangenode","yarp::rationalnode","yarp::redonode","yarp::regularexpressionflags","yarp::regularexpressionnode","yarp::requireddestructuredparameternode","yarp::requiredparameternode","yarp::rescuemodifiernode","yarp::rescuenode","yarp::restparameternode","yarp::retrynode","yarp::returnnode","yarp::rippercompat","yarp::rippercompat::sexpbuilder","yarp::rippercompat::sexpbuilderpp","yarp::selfnode","yarp::serialize","yarp::serialize::loader","yarp::singletonclassnode","yarp::source","yarp::sourceencodingnode","yarp::sourcefilenode","yarp::sourcelinenode","yarp::splatnode","yarp::statementsnode","yarp::stringconcatnode","yarp::stringnode","yarp::supernode","yarp::symbolnode","yarp::token","yarp::truenode","yarp::undefnode","yarp::unlessnode","yarp::untilnode","yarp::visitor","yarp::whennode","yarp::whilenode","yarp::xstringnode","yarp::yieldnode","yarp::lexcompat::heredoc::dashheredoc#<<()","yarp::lexcompat::heredoc::dedentingheredoc#<<()","yarp::lexcompat::heredoc::plainheredoc#<<()","yarp::nodeinspector#<<()","yarp::parseresult::comments::locationtarget#<<()","yarp::parseresult::comments::nodetarget#<<()","yarp::lexcompat::endcontenttoken#==()","yarp::lexcompat::identtoken#==()","yarp::lexcompat::ignorestatetoken#==()","yarp::lexcompat::ignorednewlinetoken#==()","yarp::lexcompat::paramtoken#==()","yarp::location#==()","yarp::token#==()","yarp::dsl#aliasglobalvariablenode()","yarp::dsl#aliasmethodnode()","yarp::dsl#alternationpatternnode()","yarp::dsl#andnode()","yarp::dsl#argumentsnode()","yarp::dsl#arraynode()","yarp::dsl#arraypatternnode()","yarp::dsl#assocnode()","yarp::dsl#assocsplatnode()","yarp::dsl#backreferencereadnode()","yarp::dsl#beginnode()","yarp::dsl#blockargumentnode()","yarp::dsl#blocklocalvariablenode()","yarp::dsl#blocknode()","yarp::dsl#blockparameternode()","yarp::dsl#blockparametersnode()","yarp::dsl#breaknode()","yarp::dsl#callandwritenode()","yarp::dsl#callnode()","yarp::dsl#calloperatorwritenode()","yarp::dsl#callorwritenode()","yarp::dsl#capturepatternnode()","yarp::dsl#casenode()","yarp::dsl#classnode()","yarp::dsl#classvariableandwritenode()","yarp::dsl#classvariableoperatorwritenode()","yarp::dsl#classvariableorwritenode()","yarp::dsl#classvariablereadnode()","yarp::dsl#classvariabletargetnode()","yarp::dsl#classvariablewritenode()","yarp::dsl#constantandwritenode()","yarp::dsl#constantoperatorwritenode()","yarp::dsl#constantorwritenode()","yarp::dsl#constantpathandwritenode()","yarp::dsl#constantpathnode()","yarp::dsl#constantpathoperatorwritenode()","yarp::dsl#constantpathorwritenode()","yarp::dsl#constantpathtargetnode()","yarp::dsl#constantpathwritenode()","yarp::dsl#constantreadnode()","yarp::dsl#constanttargetnode()","yarp::dsl#constantwritenode()","yarp::dsl#defnode()","yarp::dsl#definednode()","yarp::dsl#elsenode()","yarp::dsl#embeddedstatementsnode()","yarp::dsl#embeddedvariablenode()","yarp::dsl#ensurenode()","yarp::dsl#falsenode()","yarp::dsl#findpatternnode()","yarp::dsl#flipflopnode()","yarp::dsl#floatnode()","yarp::dsl#fornode()","yarp::dsl#forwardingargumentsnode()","yarp::dsl#forwardingparameternode()","yarp::dsl#forwardingsupernode()","yarp::dsl#globalvariableandwritenode()","yarp::dsl#globalvariableoperatorwritenode()","yarp::dsl#globalvariableorwritenode()","yarp::dsl#globalvariablereadnode()","yarp::dsl#globalvariabletargetnode()","yarp::dsl#globalvariablewritenode()","yarp::dsl#hashnode()","yarp::dsl#hashpatternnode()","yarp::dsl#ifnode()","yarp::dsl#imaginarynode()","yarp::dsl#innode()","yarp::dsl#instancevariableandwritenode()","yarp::dsl#instancevariableoperatorwritenode()","yarp::dsl#instancevariableorwritenode()","yarp::dsl#instancevariablereadnode()","yarp::dsl#instancevariabletargetnode()","yarp::dsl#instancevariablewritenode()","yarp::dsl#integernode()","yarp::dsl#interpolatedmatchlastlinenode()","yarp::dsl#interpolatedregularexpressionnode()","yarp::dsl#interpolatedstringnode()","yarp::dsl#interpolatedsymbolnode()","yarp::dsl#interpolatedxstringnode()","yarp::dsl#keywordhashnode()","yarp::dsl#keywordparameternode()","yarp::dsl#keywordrestparameternode()","yarp::dsl#lambdanode()","yarp::dsl#localvariableandwritenode()","yarp::dsl#localvariableoperatorwritenode()","yarp::dsl#localvariableorwritenode()","yarp::dsl#localvariablereadnode()","yarp::dsl#localvariabletargetnode()","yarp::dsl#localvariablewritenode()","yarp::dsl#location()","yarp::dsl#matchlastlinenode()","yarp::dsl#matchpredicatenode()","yarp::dsl#matchrequirednode()","yarp::dsl#missingnode()","yarp::dsl#modulenode()","yarp::dsl#multitargetnode()","yarp::dsl#multiwritenode()","yarp::dsl#nextnode()","yarp::dsl#nilnode()","yarp::dsl#nokeywordsparameternode()","yarp::dsl#numberedreferencereadnode()","yarp::dsl#optionalparameternode()","yarp::dsl#ornode()","yarp::dsl#parametersnode()","yarp::dsl#parenthesesnode()","yarp::dsl#pinnedexpressionnode()","yarp::dsl#pinnedvariablenode()","yarp::dsl#postexecutionnode()","yarp::dsl#preexecutionnode()","yarp::dsl#programnode()","yarp::dsl#rangenode()","yarp::dsl#rationalnode()","yarp::dsl#redonode()","yarp::dsl#regularexpressionnode()","yarp::dsl#requireddestructuredparameternode()","yarp::dsl#requiredparameternode()","yarp::dsl#rescuemodifiernode()","yarp::dsl#rescuenode()","yarp::dsl#restparameternode()","yarp::dsl#retrynode()","yarp::dsl#returnnode()","yarp::dsl#selfnode()","yarp::dsl#singletonclassnode()","yarp::dsl#sourceencodingnode()","yarp::dsl#sourcefilenode()","yarp::dsl#sourcelinenode()","yarp::dsl#splatnode()","yarp::dsl#statementsnode()","yarp::dsl#stringconcatnode()","yarp::dsl#stringnode()","yarp::dsl#supernode()","yarp::dsl#symbolnode()","yarp::dsl#truenode()","yarp::dsl#undefnode()","yarp::dsl#unlessnode()","yarp::dsl#untilnode()","yarp::dsl#whennode()","yarp::dsl#whilenode()","yarp::dsl#xstringnode()","yarp::dsl#yieldnode()","yarp::rippercompat#_dispatch0()","yarp::rippercompat#_dispatch1()","yarp::rippercompat#_dispatch2()","yarp::rippercompat#_dispatch3()","yarp::rippercompat#_dispatch4()","yarp::rippercompat#_dispatch5()","yarp::rippercompat#_dispatch7()","yarp::rippercompat::sexpbuilderpp#_dispatch_event_new()","yarp::rippercompat::sexpbuilderpp#_dispatch_event_push()","yarp::aliasglobalvariablenode#accept()","yarp::aliasmethodnode#accept()","yarp::alternationpatternnode#accept()","yarp::andnode#accept()","yarp::argumentsnode#accept()","yarp::arraynode#accept()","yarp::arraypatternnode#accept()","yarp::assocnode#accept()","yarp::assocsplatnode#accept()","yarp::backreferencereadnode#accept()","yarp::beginnode#accept()","yarp::blockargumentnode#accept()","yarp::blocklocalvariablenode#accept()","yarp::blocknode#accept()","yarp::blockparameternode#accept()","yarp::blockparametersnode#accept()","yarp::breaknode#accept()","yarp::callandwritenode#accept()","yarp::callnode#accept()","yarp::calloperatorwritenode#accept()","yarp::callorwritenode#accept()","yarp::capturepatternnode#accept()","yarp::casenode#accept()","yarp::classnode#accept()","yarp::classvariableandwritenode#accept()","yarp::classvariableoperatorwritenode#accept()","yarp::classvariableorwritenode#accept()","yarp::classvariablereadnode#accept()","yarp::classvariabletargetnode#accept()","yarp::classvariablewritenode#accept()","yarp::constantandwritenode#accept()","yarp::constantoperatorwritenode#accept()","yarp::constantorwritenode#accept()","yarp::constantpathandwritenode#accept()","yarp::constantpathnode#accept()","yarp::constantpathoperatorwritenode#accept()","yarp::constantpathorwritenode#accept()","yarp::constantpathtargetnode#accept()","yarp::constantpathwritenode#accept()","yarp::constantreadnode#accept()","yarp::constanttargetnode#accept()","yarp::constantwritenode#accept()","yarp::defnode#accept()","yarp::definednode#accept()","yarp::elsenode#accept()","yarp::embeddedstatementsnode#accept()","yarp::embeddedvariablenode#accept()","yarp::ensurenode#accept()","yarp::falsenode#accept()","yarp::findpatternnode#accept()","yarp::flipflopnode#accept()","yarp::floatnode#accept()","yarp::fornode#accept()","yarp::forwardingargumentsnode#accept()","yarp::forwardingparameternode#accept()","yarp::forwardingsupernode#accept()","yarp::globalvariableandwritenode#accept()","yarp::globalvariableoperatorwritenode#accept()","yarp::globalvariableorwritenode#accept()","yarp::globalvariablereadnode#accept()","yarp::globalvariabletargetnode#accept()","yarp::globalvariablewritenode#accept()","yarp::hashnode#accept()","yarp::hashpatternnode#accept()","yarp::ifnode#accept()","yarp::imaginarynode#accept()","yarp::innode#accept()","yarp::instancevariableandwritenode#accept()","yarp::instancevariableoperatorwritenode#accept()","yarp::instancevariableorwritenode#accept()","yarp::instancevariablereadnode#accept()","yarp::instancevariabletargetnode#accept()","yarp::instancevariablewritenode#accept()","yarp::integernode#accept()","yarp::interpolatedmatchlastlinenode#accept()","yarp::interpolatedregularexpressionnode#accept()","yarp::interpolatedstringnode#accept()","yarp::interpolatedsymbolnode#accept()","yarp::interpolatedxstringnode#accept()","yarp::keywordhashnode#accept()","yarp::keywordparameternode#accept()","yarp::keywordrestparameternode#accept()","yarp::lambdanode#accept()","yarp::localvariableandwritenode#accept()","yarp::localvariableoperatorwritenode#accept()","yarp::localvariableorwritenode#accept()","yarp::localvariablereadnode#accept()","yarp::localvariabletargetnode#accept()","yarp::localvariablewritenode#accept()","yarp::matchlastlinenode#accept()","yarp::matchpredicatenode#accept()","yarp::matchrequirednode#accept()","yarp::missingnode#accept()","yarp::modulenode#accept()","yarp::multitargetnode#accept()","yarp::multiwritenode#accept()","yarp::nextnode#accept()","yarp::nilnode#accept()","yarp::nokeywordsparameternode#accept()","yarp::numberedreferencereadnode#accept()","yarp::optionalparameternode#accept()","yarp::ornode#accept()","yarp::parametersnode#accept()","yarp::parenthesesnode#accept()","yarp::pinnedexpressionnode#accept()","yarp::pinnedvariablenode#accept()","yarp::postexecutionnode#accept()","yarp::preexecutionnode#accept()","yarp::programnode#accept()","yarp::rangenode#accept()","yarp::rationalnode#accept()","yarp::redonode#accept()","yarp::regularexpressionnode#accept()","yarp::requireddestructuredparameternode#accept()","yarp::requiredparameternode#accept()","yarp::rescuemodifiernode#accept()","yarp::rescuenode#accept()","yarp::restparameternode#accept()","yarp::retrynode#accept()","yarp::returnnode#accept()","yarp::selfnode#accept()","yarp::singletonclassnode#accept()","yarp::sourceencodingnode#accept()","yarp::sourcefilenode#accept()","yarp::sourcelinenode#accept()","yarp::splatnode#accept()","yarp::statementsnode#accept()","yarp::stringconcatnode#accept()","yarp::stringnode#accept()","yarp::supernode#accept()","yarp::symbolnode#accept()","yarp::truenode#accept()","yarp::undefnode#accept()","yarp::unlessnode#accept()","yarp::untilnode#accept()","yarp::whennode#accept()","yarp::whilenode#accept()","yarp::xstringnode#accept()","yarp::yieldnode#accept()","yarp::interpolatedmatchlastlinenode#ascii_8bit?()","yarp::interpolatedregularexpressionnode#ascii_8bit?()","yarp::matchlastlinenode#ascii_8bit?()","yarp::regularexpressionnode#ascii_8bit?()","yarp::parseresult::comments#attach!()","yarp::parseresult#attach_comments!()","yarp::beginnode#begin_keyword()","yarp::untilnode#begin_modifier?()","yarp::whilenode#begin_modifier?()","yarp::integernode#binary?()","yarp::rippercompat#bounds()","yarp::lexcompat::heredoc::build()","yarp::callandwritenode#call_operator()","yarp::callnode#call_operator()","yarp::calloperatorwritenode#call_operator()","yarp::callorwritenode#call_operator()","yarp::languageserver#capabilities()","yarp::casenode#case_keyword()","yarp::nodeinspector#child_inspector()","yarp::nodeinspector#child_node()","yarp::aliasglobalvariablenode#child_nodes()","yarp::aliasmethodnode#child_nodes()","yarp::alternationpatternnode#child_nodes()","yarp::andnode#child_nodes()","yarp::argumentsnode#child_nodes()","yarp::arraynode#child_nodes()","yarp::arraypatternnode#child_nodes()","yarp::assocnode#child_nodes()","yarp::assocsplatnode#child_nodes()","yarp::backreferencereadnode#child_nodes()","yarp::beginnode#child_nodes()","yarp::blockargumentnode#child_nodes()","yarp::blocklocalvariablenode#child_nodes()","yarp::blocknode#child_nodes()","yarp::blockparameternode#child_nodes()","yarp::blockparametersnode#child_nodes()","yarp::breaknode#child_nodes()","yarp::callandwritenode#child_nodes()","yarp::callnode#child_nodes()","yarp::calloperatorwritenode#child_nodes()","yarp::callorwritenode#child_nodes()","yarp::capturepatternnode#child_nodes()","yarp::casenode#child_nodes()","yarp::classnode#child_nodes()","yarp::classvariableandwritenode#child_nodes()","yarp::classvariableoperatorwritenode#child_nodes()","yarp::classvariableorwritenode#child_nodes()","yarp::classvariablereadnode#child_nodes()","yarp::classvariabletargetnode#child_nodes()","yarp::classvariablewritenode#child_nodes()","yarp::constantandwritenode#child_nodes()","yarp::constantoperatorwritenode#child_nodes()","yarp::constantorwritenode#child_nodes()","yarp::constantpathandwritenode#child_nodes()","yarp::constantpathnode#child_nodes()","yarp::constantpathoperatorwritenode#child_nodes()","yarp::constantpathorwritenode#child_nodes()","yarp::constantpathtargetnode#child_nodes()","yarp::constantpathwritenode#child_nodes()","yarp::constantreadnode#child_nodes()","yarp::constanttargetnode#child_nodes()","yarp::constantwritenode#child_nodes()","yarp::defnode#child_nodes()","yarp::definednode#child_nodes()","yarp::elsenode#child_nodes()","yarp::embeddedstatementsnode#child_nodes()","yarp::embeddedvariablenode#child_nodes()","yarp::ensurenode#child_nodes()","yarp::falsenode#child_nodes()","yarp::findpatternnode#child_nodes()","yarp::flipflopnode#child_nodes()","yarp::floatnode#child_nodes()","yarp::fornode#child_nodes()","yarp::forwardingargumentsnode#child_nodes()","yarp::forwardingparameternode#child_nodes()","yarp::forwardingsupernode#child_nodes()","yarp::globalvariableandwritenode#child_nodes()","yarp::globalvariableoperatorwritenode#child_nodes()","yarp::globalvariableorwritenode#child_nodes()","yarp::globalvariablereadnode#child_nodes()","yarp::globalvariabletargetnode#child_nodes()","yarp::globalvariablewritenode#child_nodes()","yarp::hashnode#child_nodes()","yarp::hashpatternnode#child_nodes()","yarp::ifnode#child_nodes()","yarp::imaginarynode#child_nodes()","yarp::innode#child_nodes()","yarp::instancevariableandwritenode#child_nodes()","yarp::instancevariableoperatorwritenode#child_nodes()","yarp::instancevariableorwritenode#child_nodes()","yarp::instancevariablereadnode#child_nodes()","yarp::instancevariabletargetnode#child_nodes()","yarp::instancevariablewritenode#child_nodes()","yarp::integernode#child_nodes()","yarp::interpolatedmatchlastlinenode#child_nodes()","yarp::interpolatedregularexpressionnode#child_nodes()","yarp::interpolatedstringnode#child_nodes()","yarp::interpolatedsymbolnode#child_nodes()","yarp::interpolatedxstringnode#child_nodes()","yarp::keywordhashnode#child_nodes()","yarp::keywordparameternode#child_nodes()","yarp::keywordrestparameternode#child_nodes()","yarp::lambdanode#child_nodes()","yarp::localvariableandwritenode#child_nodes()","yarp::localvariableoperatorwritenode#child_nodes()","yarp::localvariableorwritenode#child_nodes()","yarp::localvariablereadnode#child_nodes()","yarp::localvariabletargetnode#child_nodes()","yarp::localvariablewritenode#child_nodes()","yarp::matchlastlinenode#child_nodes()","yarp::matchpredicatenode#child_nodes()","yarp::matchrequirednode#child_nodes()","yarp::missingnode#child_nodes()","yarp::modulenode#child_nodes()","yarp::multitargetnode#child_nodes()","yarp::multiwritenode#child_nodes()","yarp::nextnode#child_nodes()","yarp::nilnode#child_nodes()","yarp::nokeywordsparameternode#child_nodes()","yarp::numberedreferencereadnode#child_nodes()","yarp::optionalparameternode#child_nodes()","yarp::ornode#child_nodes()","yarp::parametersnode#child_nodes()","yarp::parenthesesnode#child_nodes()","yarp::pinnedexpressionnode#child_nodes()","yarp::pinnedvariablenode#child_nodes()","yarp::postexecutionnode#child_nodes()","yarp::preexecutionnode#child_nodes()","yarp::programnode#child_nodes()","yarp::rangenode#child_nodes()","yarp::rationalnode#child_nodes()","yarp::redonode#child_nodes()","yarp::regularexpressionnode#child_nodes()","yarp::requireddestructuredparameternode#child_nodes()","yarp::requiredparameternode#child_nodes()","yarp::rescuemodifiernode#child_nodes()","yarp::rescuenode#child_nodes()","yarp::restparameternode#child_nodes()","yarp::retrynode#child_nodes()","yarp::returnnode#child_nodes()","yarp::selfnode#child_nodes()","yarp::singletonclassnode#child_nodes()","yarp::sourceencodingnode#child_nodes()","yarp::sourcefilenode#child_nodes()","yarp::sourcelinenode#child_nodes()","yarp::splatnode#child_nodes()","yarp::statementsnode#child_nodes()","yarp::stringconcatnode#child_nodes()","yarp::stringnode#child_nodes()","yarp::supernode#child_nodes()","yarp::symbolnode#child_nodes()","yarp::truenode#child_nodes()","yarp::undefnode#child_nodes()","yarp::unlessnode#child_nodes()","yarp::untilnode#child_nodes()","yarp::whennode#child_nodes()","yarp::whilenode#child_nodes()","yarp::xstringnode#child_nodes()","yarp::yieldnode#child_nodes()","yarp::classnode#class_keyword()","yarp::singletonclassnode#class_keyword()","yarp::arraynode#closing()","yarp::arraypatternnode#closing()","yarp::blocknode#closing()","yarp::blockparametersnode#closing()","yarp::callandwritenode#closing()","yarp::callnode#closing()","yarp::calloperatorwritenode#closing()","yarp::callorwritenode#closing()","yarp::embeddedstatementsnode#closing()","yarp::findpatternnode#closing()","yarp::hashnode#closing()","yarp::hashpatternnode#closing()","yarp::interpolatedmatchlastlinenode#closing()","yarp::interpolatedregularexpressionnode#closing()","yarp::interpolatedstringnode#closing()","yarp::interpolatedsymbolnode#closing()","yarp::interpolatedxstringnode#closing()","yarp::lambdanode#closing()","yarp::matchlastlinenode#closing()","yarp::parenthesesnode#closing()","yarp::postexecutionnode#closing()","yarp::preexecutionnode#closing()","yarp::regularexpressionnode#closing()","yarp::requireddestructuredparameternode#closing()","yarp::stringnode#closing()","yarp::symbolnode#closing()","yarp::untilnode#closing()","yarp::whilenode#closing()","yarp::xstringnode#closing()","yarp::languageserver#code_actions()","yarp::source#column()","yarp::pattern#combine_and()","yarp::pattern#combine_or()","yarp::aliasglobalvariablenode#comment_targets()","yarp::aliasmethodnode#comment_targets()","yarp::alternationpatternnode#comment_targets()","yarp::andnode#comment_targets()","yarp::argumentsnode#comment_targets()","yarp::arraynode#comment_targets()","yarp::arraypatternnode#comment_targets()","yarp::assocnode#comment_targets()","yarp::assocsplatnode#comment_targets()","yarp::backreferencereadnode#comment_targets()","yarp::beginnode#comment_targets()","yarp::blockargumentnode#comment_targets()","yarp::blocklocalvariablenode#comment_targets()","yarp::blocknode#comment_targets()","yarp::blockparameternode#comment_targets()","yarp::blockparametersnode#comment_targets()","yarp::breaknode#comment_targets()","yarp::callandwritenode#comment_targets()","yarp::callnode#comment_targets()","yarp::calloperatorwritenode#comment_targets()","yarp::callorwritenode#comment_targets()","yarp::capturepatternnode#comment_targets()","yarp::casenode#comment_targets()","yarp::classnode#comment_targets()","yarp::classvariableandwritenode#comment_targets()","yarp::classvariableoperatorwritenode#comment_targets()","yarp::classvariableorwritenode#comment_targets()","yarp::classvariablereadnode#comment_targets()","yarp::classvariabletargetnode#comment_targets()","yarp::classvariablewritenode#comment_targets()","yarp::constantandwritenode#comment_targets()","yarp::constantoperatorwritenode#comment_targets()","yarp::constantorwritenode#comment_targets()","yarp::constantpathandwritenode#comment_targets()","yarp::constantpathnode#comment_targets()","yarp::constantpathoperatorwritenode#comment_targets()","yarp::constantpathorwritenode#comment_targets()","yarp::constantpathtargetnode#comment_targets()","yarp::constantpathwritenode#comment_targets()","yarp::constantreadnode#comment_targets()","yarp::constanttargetnode#comment_targets()","yarp::constantwritenode#comment_targets()","yarp::defnode#comment_targets()","yarp::definednode#comment_targets()","yarp::elsenode#comment_targets()","yarp::embeddedstatementsnode#comment_targets()","yarp::embeddedvariablenode#comment_targets()","yarp::ensurenode#comment_targets()","yarp::falsenode#comment_targets()","yarp::findpatternnode#comment_targets()","yarp::flipflopnode#comment_targets()","yarp::floatnode#comment_targets()","yarp::fornode#comment_targets()","yarp::forwardingargumentsnode#comment_targets()","yarp::forwardingparameternode#comment_targets()","yarp::forwardingsupernode#comment_targets()","yarp::globalvariableandwritenode#comment_targets()","yarp::globalvariableoperatorwritenode#comment_targets()","yarp::globalvariableorwritenode#comment_targets()","yarp::globalvariablereadnode#comment_targets()","yarp::globalvariabletargetnode#comment_targets()","yarp::globalvariablewritenode#comment_targets()","yarp::hashnode#comment_targets()","yarp::hashpatternnode#comment_targets()","yarp::ifnode#comment_targets()","yarp::imaginarynode#comment_targets()","yarp::innode#comment_targets()","yarp::instancevariableandwritenode#comment_targets()","yarp::instancevariableoperatorwritenode#comment_targets()","yarp::instancevariableorwritenode#comment_targets()","yarp::instancevariablereadnode#comment_targets()","yarp::instancevariabletargetnode#comment_targets()","yarp::instancevariablewritenode#comment_targets()","yarp::integernode#comment_targets()","yarp::interpolatedmatchlastlinenode#comment_targets()","yarp::interpolatedregularexpressionnode#comment_targets()","yarp::interpolatedstringnode#comment_targets()","yarp::interpolatedsymbolnode#comment_targets()","yarp::interpolatedxstringnode#comment_targets()","yarp::keywordhashnode#comment_targets()","yarp::keywordparameternode#comment_targets()","yarp::keywordrestparameternode#comment_targets()","yarp::lambdanode#comment_targets()","yarp::localvariableandwritenode#comment_targets()","yarp::localvariableoperatorwritenode#comment_targets()","yarp::localvariableorwritenode#comment_targets()","yarp::localvariablereadnode#comment_targets()","yarp::localvariabletargetnode#comment_targets()","yarp::localvariablewritenode#comment_targets()","yarp::matchlastlinenode#comment_targets()","yarp::matchpredicatenode#comment_targets()","yarp::matchrequirednode#comment_targets()","yarp::missingnode#comment_targets()","yarp::modulenode#comment_targets()","yarp::multitargetnode#comment_targets()","yarp::multiwritenode#comment_targets()","yarp::nextnode#comment_targets()","yarp::nilnode#comment_targets()","yarp::nokeywordsparameternode#comment_targets()","yarp::numberedreferencereadnode#comment_targets()","yarp::optionalparameternode#comment_targets()","yarp::ornode#comment_targets()","yarp::parametersnode#comment_targets()","yarp::parenthesesnode#comment_targets()","yarp::pinnedexpressionnode#comment_targets()","yarp::pinnedvariablenode#comment_targets()","yarp::postexecutionnode#comment_targets()","yarp::preexecutionnode#comment_targets()","yarp::programnode#comment_targets()","yarp::rangenode#comment_targets()","yarp::rationalnode#comment_targets()","yarp::redonode#comment_targets()","yarp::regularexpressionnode#comment_targets()","yarp::requireddestructuredparameternode#comment_targets()","yarp::requiredparameternode#comment_targets()","yarp::rescuemodifiernode#comment_targets()","yarp::rescuenode#comment_targets()","yarp::restparameternode#comment_targets()","yarp::retrynode#comment_targets()","yarp::returnnode#comment_targets()","yarp::selfnode#comment_targets()","yarp::singletonclassnode#comment_targets()","yarp::sourceencodingnode#comment_targets()","yarp::sourcefilenode#comment_targets()","yarp::sourcelinenode#comment_targets()","yarp::splatnode#comment_targets()","yarp::statementsnode#comment_targets()","yarp::stringconcatnode#comment_targets()","yarp::stringnode#comment_targets()","yarp::supernode#comment_targets()","yarp::symbolnode#comment_targets()","yarp::truenode#comment_targets()","yarp::undefnode#comment_targets()","yarp::unlessnode#comment_targets()","yarp::untilnode#comment_targets()","yarp::whennode#comment_targets()","yarp::whilenode#comment_targets()","yarp::xstringnode#comment_targets()","yarp::yieldnode#comment_targets()","yarp::pattern#compile()","yarp::pattern#compile_alternation_pattern_node()","yarp::pattern#compile_array_pattern_node()","yarp::pattern#compile_constant_path_node()","yarp::pattern#compile_constant_read_node()","yarp::pattern#compile_error()","yarp::pattern#compile_hash_pattern_node()","yarp::pattern#compile_nil_node()","yarp::pattern#compile_node()","yarp::pattern#compile_regular_expression_node()","yarp::pattern#compile_string_node()","yarp::pattern#compile_symbol_node()","yarp::source#compute_offsets()","yarp::matchlastlinenode#content()","yarp::regularexpressionnode#content()","yarp::stringnode#content()","yarp::xstringnode#content()","yarp::aliasglobalvariablenode#copy()","yarp::aliasmethodnode#copy()","yarp::alternationpatternnode#copy()","yarp::andnode#copy()","yarp::argumentsnode#copy()","yarp::arraynode#copy()","yarp::arraypatternnode#copy()","yarp::assocnode#copy()","yarp::assocsplatnode#copy()","yarp::backreferencereadnode#copy()","yarp::beginnode#copy()","yarp::blockargumentnode#copy()","yarp::blocklocalvariablenode#copy()","yarp::blocknode#copy()","yarp::blockparameternode#copy()","yarp::blockparametersnode#copy()","yarp::breaknode#copy()","yarp::callandwritenode#copy()","yarp::callnode#copy()","yarp::calloperatorwritenode#copy()","yarp::callorwritenode#copy()","yarp::capturepatternnode#copy()","yarp::casenode#copy()","yarp::classnode#copy()","yarp::classvariableandwritenode#copy()","yarp::classvariableoperatorwritenode#copy()","yarp::classvariableorwritenode#copy()","yarp::classvariablereadnode#copy()","yarp::classvariabletargetnode#copy()","yarp::classvariablewritenode#copy()","yarp::constantandwritenode#copy()","yarp::constantoperatorwritenode#copy()","yarp::constantorwritenode#copy()","yarp::constantpathandwritenode#copy()","yarp::constantpathnode#copy()","yarp::constantpathoperatorwritenode#copy()","yarp::constantpathorwritenode#copy()","yarp::constantpathtargetnode#copy()","yarp::constantpathwritenode#copy()","yarp::constantreadnode#copy()","yarp::constanttargetnode#copy()","yarp::constantwritenode#copy()","yarp::defnode#copy()","yarp::definednode#copy()","yarp::elsenode#copy()","yarp::embeddedstatementsnode#copy()","yarp::embeddedvariablenode#copy()","yarp::ensurenode#copy()","yarp::falsenode#copy()","yarp::findpatternnode#copy()","yarp::flipflopnode#copy()","yarp::floatnode#copy()","yarp::fornode#copy()","yarp::forwardingargumentsnode#copy()","yarp::forwardingparameternode#copy()","yarp::forwardingsupernode#copy()","yarp::globalvariableandwritenode#copy()","yarp::globalvariableoperatorwritenode#copy()","yarp::globalvariableorwritenode#copy()","yarp::globalvariablereadnode#copy()","yarp::globalvariabletargetnode#copy()","yarp::globalvariablewritenode#copy()","yarp::hashnode#copy()","yarp::hashpatternnode#copy()","yarp::ifnode#copy()","yarp::imaginarynode#copy()","yarp::innode#copy()","yarp::instancevariableandwritenode#copy()","yarp::instancevariableoperatorwritenode#copy()","yarp::instancevariableorwritenode#copy()","yarp::instancevariablereadnode#copy()","yarp::instancevariabletargetnode#copy()","yarp::instancevariablewritenode#copy()","yarp::integernode#copy()","yarp::interpolatedmatchlastlinenode#copy()","yarp::interpolatedregularexpressionnode#copy()","yarp::interpolatedstringnode#copy()","yarp::interpolatedsymbolnode#copy()","yarp::interpolatedxstringnode#copy()","yarp::keywordhashnode#copy()","yarp::keywordparameternode#copy()","yarp::keywordrestparameternode#copy()","yarp::lambdanode#copy()","yarp::localvariableandwritenode#copy()","yarp::localvariableoperatorwritenode#copy()","yarp::localvariableorwritenode#copy()","yarp::localvariablereadnode#copy()","yarp::localvariabletargetnode#copy()","yarp::localvariablewritenode#copy()","yarp::location#copy()","yarp::matchlastlinenode#copy()","yarp::matchpredicatenode#copy()","yarp::matchrequirednode#copy()","yarp::missingnode#copy()","yarp::modulenode#copy()","yarp::multitargetnode#copy()","yarp::multiwritenode#copy()","yarp::nextnode#copy()","yarp::nilnode#copy()","yarp::nokeywordsparameternode#copy()","yarp::numberedreferencereadnode#copy()","yarp::optionalparameternode#copy()","yarp::ornode#copy()","yarp::parametersnode#copy()","yarp::parenthesesnode#copy()","yarp::pinnedexpressionnode#copy()","yarp::pinnedvariablenode#copy()","yarp::postexecutionnode#copy()","yarp::preexecutionnode#copy()","yarp::programnode#copy()","yarp::rangenode#copy()","yarp::rationalnode#copy()","yarp::redonode#copy()","yarp::regularexpressionnode#copy()","yarp::requireddestructuredparameternode#copy()","yarp::requiredparameternode#copy()","yarp::rescuemodifiernode#copy()","yarp::rescuenode#copy()","yarp::restparameternode#copy()","yarp::retrynode#copy()","yarp::returnnode#copy()","yarp::selfnode#copy()","yarp::singletonclassnode#copy()","yarp::sourceencodingnode#copy()","yarp::sourcefilenode#copy()","yarp::sourcelinenode#copy()","yarp::splatnode#copy()","yarp::statementsnode#copy()","yarp::stringconcatnode#copy()","yarp::stringnode#copy()","yarp::supernode#copy()","yarp::symbolnode#copy()","yarp::truenode#copy()","yarp::undefnode#copy()","yarp::unlessnode#copy()","yarp::untilnode#copy()","yarp::whennode#copy()","yarp::whilenode#copy()","yarp::xstringnode#copy()","yarp::yieldnode#copy()","yarp::debug::cruby_locals()","yarp::integernode#decimal?()","yarp::aliasglobalvariablenode#deconstruct()","yarp::aliasmethodnode#deconstruct()","yarp::alternationpatternnode#deconstruct()","yarp::andnode#deconstruct()","yarp::argumentsnode#deconstruct()","yarp::arraynode#deconstruct()","yarp::arraypatternnode#deconstruct()","yarp::assocnode#deconstruct()","yarp::assocsplatnode#deconstruct()","yarp::backreferencereadnode#deconstruct()","yarp::beginnode#deconstruct()","yarp::blockargumentnode#deconstruct()","yarp::blocklocalvariablenode#deconstruct()","yarp::blocknode#deconstruct()","yarp::blockparameternode#deconstruct()","yarp::blockparametersnode#deconstruct()","yarp::breaknode#deconstruct()","yarp::callandwritenode#deconstruct()","yarp::callnode#deconstruct()","yarp::calloperatorwritenode#deconstruct()","yarp::callorwritenode#deconstruct()","yarp::capturepatternnode#deconstruct()","yarp::casenode#deconstruct()","yarp::classnode#deconstruct()","yarp::classvariableandwritenode#deconstruct()","yarp::classvariableoperatorwritenode#deconstruct()","yarp::classvariableorwritenode#deconstruct()","yarp::classvariablereadnode#deconstruct()","yarp::classvariabletargetnode#deconstruct()","yarp::classvariablewritenode#deconstruct()","yarp::constantandwritenode#deconstruct()","yarp::constantoperatorwritenode#deconstruct()","yarp::constantorwritenode#deconstruct()","yarp::constantpathandwritenode#deconstruct()","yarp::constantpathnode#deconstruct()","yarp::constantpathoperatorwritenode#deconstruct()","yarp::constantpathorwritenode#deconstruct()","yarp::constantpathtargetnode#deconstruct()","yarp::constantpathwritenode#deconstruct()","yarp::constantreadnode#deconstruct()","yarp::constanttargetnode#deconstruct()","yarp::constantwritenode#deconstruct()","yarp::defnode#deconstruct()","yarp::definednode#deconstruct()","yarp::elsenode#deconstruct()","yarp::embeddedstatementsnode#deconstruct()","yarp::embeddedvariablenode#deconstruct()","yarp::ensurenode#deconstruct()","yarp::falsenode#deconstruct()","yarp::findpatternnode#deconstruct()","yarp::flipflopnode#deconstruct()","yarp::floatnode#deconstruct()","yarp::fornode#deconstruct()","yarp::forwardingargumentsnode#deconstruct()","yarp::forwardingparameternode#deconstruct()","yarp::forwardingsupernode#deconstruct()","yarp::globalvariableandwritenode#deconstruct()","yarp::globalvariableoperatorwritenode#deconstruct()","yarp::globalvariableorwritenode#deconstruct()","yarp::globalvariablereadnode#deconstruct()","yarp::globalvariabletargetnode#deconstruct()","yarp::globalvariablewritenode#deconstruct()","yarp::hashnode#deconstruct()","yarp::hashpatternnode#deconstruct()","yarp::ifnode#deconstruct()","yarp::imaginarynode#deconstruct()","yarp::innode#deconstruct()","yarp::instancevariableandwritenode#deconstruct()","yarp::instancevariableoperatorwritenode#deconstruct()","yarp::instancevariableorwritenode#deconstruct()","yarp::instancevariablereadnode#deconstruct()","yarp::instancevariabletargetnode#deconstruct()","yarp::instancevariablewritenode#deconstruct()","yarp::integernode#deconstruct()","yarp::interpolatedmatchlastlinenode#deconstruct()","yarp::interpolatedregularexpressionnode#deconstruct()","yarp::interpolatedstringnode#deconstruct()","yarp::interpolatedsymbolnode#deconstruct()","yarp::interpolatedxstringnode#deconstruct()","yarp::keywordhashnode#deconstruct()","yarp::keywordparameternode#deconstruct()","yarp::keywordrestparameternode#deconstruct()","yarp::lambdanode#deconstruct()","yarp::localvariableandwritenode#deconstruct()","yarp::localvariableoperatorwritenode#deconstruct()","yarp::localvariableorwritenode#deconstruct()","yarp::localvariablereadnode#deconstruct()","yarp::localvariabletargetnode#deconstruct()","yarp::localvariablewritenode#deconstruct()","yarp::matchlastlinenode#deconstruct()","yarp::matchpredicatenode#deconstruct()","yarp::matchrequirednode#deconstruct()","yarp::missingnode#deconstruct()","yarp::modulenode#deconstruct()","yarp::multitargetnode#deconstruct()","yarp::multiwritenode#deconstruct()","yarp::nextnode#deconstruct()","yarp::nilnode#deconstruct()","yarp::nokeywordsparameternode#deconstruct()","yarp::numberedreferencereadnode#deconstruct()","yarp::optionalparameternode#deconstruct()","yarp::ornode#deconstruct()","yarp::parametersnode#deconstruct()","yarp::parenthesesnode#deconstruct()","yarp::pinnedexpressionnode#deconstruct()","yarp::pinnedvariablenode#deconstruct()","yarp::postexecutionnode#deconstruct()","yarp::preexecutionnode#deconstruct()","yarp::programnode#deconstruct()","yarp::rangenode#deconstruct()","yarp::rationalnode#deconstruct()","yarp::redonode#deconstruct()","yarp::regularexpressionnode#deconstruct()","yarp::requireddestructuredparameternode#deconstruct()","yarp::requiredparameternode#deconstruct()","yarp::rescuemodifiernode#deconstruct()","yarp::rescuenode#deconstruct()","yarp::restparameternode#deconstruct()","yarp::retrynode#deconstruct()","yarp::returnnode#deconstruct()","yarp::selfnode#deconstruct()","yarp::singletonclassnode#deconstruct()","yarp::sourceencodingnode#deconstruct()","yarp::sourcefilenode#deconstruct()","yarp::sourcelinenode#deconstruct()","yarp::splatnode#deconstruct()","yarp::statementsnode#deconstruct()","yarp::stringconcatnode#deconstruct()","yarp::stringnode#deconstruct()","yarp::supernode#deconstruct()","yarp::symbolnode#deconstruct()","yarp::truenode#deconstruct()","yarp::undefnode#deconstruct()","yarp::unlessnode#deconstruct()","yarp::untilnode#deconstruct()","yarp::whennode#deconstruct()","yarp::whilenode#deconstruct()","yarp::xstringnode#deconstruct()","yarp::yieldnode#deconstruct()","yarp::aliasglobalvariablenode#deconstruct_keys()","yarp::aliasmethodnode#deconstruct_keys()","yarp::alternationpatternnode#deconstruct_keys()","yarp::andnode#deconstruct_keys()","yarp::argumentsnode#deconstruct_keys()","yarp::arraynode#deconstruct_keys()","yarp::arraypatternnode#deconstruct_keys()","yarp::assocnode#deconstruct_keys()","yarp::assocsplatnode#deconstruct_keys()","yarp::backreferencereadnode#deconstruct_keys()","yarp::beginnode#deconstruct_keys()","yarp::blockargumentnode#deconstruct_keys()","yarp::blocklocalvariablenode#deconstruct_keys()","yarp::blocknode#deconstruct_keys()","yarp::blockparameternode#deconstruct_keys()","yarp::blockparametersnode#deconstruct_keys()","yarp::breaknode#deconstruct_keys()","yarp::callandwritenode#deconstruct_keys()","yarp::callnode#deconstruct_keys()","yarp::calloperatorwritenode#deconstruct_keys()","yarp::callorwritenode#deconstruct_keys()","yarp::capturepatternnode#deconstruct_keys()","yarp::casenode#deconstruct_keys()","yarp::classnode#deconstruct_keys()","yarp::classvariableandwritenode#deconstruct_keys()","yarp::classvariableoperatorwritenode#deconstruct_keys()","yarp::classvariableorwritenode#deconstruct_keys()","yarp::classvariablereadnode#deconstruct_keys()","yarp::classvariabletargetnode#deconstruct_keys()","yarp::classvariablewritenode#deconstruct_keys()","yarp::comment#deconstruct_keys()","yarp::constantandwritenode#deconstruct_keys()","yarp::constantoperatorwritenode#deconstruct_keys()","yarp::constantorwritenode#deconstruct_keys()","yarp::constantpathandwritenode#deconstruct_keys()","yarp::constantpathnode#deconstruct_keys()","yarp::constantpathoperatorwritenode#deconstruct_keys()","yarp::constantpathorwritenode#deconstruct_keys()","yarp::constantpathtargetnode#deconstruct_keys()","yarp::constantpathwritenode#deconstruct_keys()","yarp::constantreadnode#deconstruct_keys()","yarp::constanttargetnode#deconstruct_keys()","yarp::constantwritenode#deconstruct_keys()","yarp::defnode#deconstruct_keys()","yarp::definednode#deconstruct_keys()","yarp::elsenode#deconstruct_keys()","yarp::embeddedstatementsnode#deconstruct_keys()","yarp::embeddedvariablenode#deconstruct_keys()","yarp::ensurenode#deconstruct_keys()","yarp::falsenode#deconstruct_keys()","yarp::findpatternnode#deconstruct_keys()","yarp::flipflopnode#deconstruct_keys()","yarp::floatnode#deconstruct_keys()","yarp::fornode#deconstruct_keys()","yarp::forwardingargumentsnode#deconstruct_keys()","yarp::forwardingparameternode#deconstruct_keys()","yarp::forwardingsupernode#deconstruct_keys()","yarp::globalvariableandwritenode#deconstruct_keys()","yarp::globalvariableoperatorwritenode#deconstruct_keys()","yarp::globalvariableorwritenode#deconstruct_keys()","yarp::globalvariablereadnode#deconstruct_keys()","yarp::globalvariabletargetnode#deconstruct_keys()","yarp::globalvariablewritenode#deconstruct_keys()","yarp::hashnode#deconstruct_keys()","yarp::hashpatternnode#deconstruct_keys()","yarp::ifnode#deconstruct_keys()","yarp::imaginarynode#deconstruct_keys()","yarp::innode#deconstruct_keys()","yarp::instancevariableandwritenode#deconstruct_keys()","yarp::instancevariableoperatorwritenode#deconstruct_keys()","yarp::instancevariableorwritenode#deconstruct_keys()","yarp::instancevariablereadnode#deconstruct_keys()","yarp::instancevariabletargetnode#deconstruct_keys()","yarp::instancevariablewritenode#deconstruct_keys()","yarp::integernode#deconstruct_keys()","yarp::interpolatedmatchlastlinenode#deconstruct_keys()","yarp::interpolatedregularexpressionnode#deconstruct_keys()","yarp::interpolatedstringnode#deconstruct_keys()","yarp::interpolatedsymbolnode#deconstruct_keys()","yarp::interpolatedxstringnode#deconstruct_keys()","yarp::keywordhashnode#deconstruct_keys()","yarp::keywordparameternode#deconstruct_keys()","yarp::keywordrestparameternode#deconstruct_keys()","yarp::lambdanode#deconstruct_keys()","yarp::localvariableandwritenode#deconstruct_keys()","yarp::localvariableoperatorwritenode#deconstruct_keys()","yarp::localvariableorwritenode#deconstruct_keys()","yarp::localvariablereadnode#deconstruct_keys()","yarp::localvariabletargetnode#deconstruct_keys()","yarp::localvariablewritenode#deconstruct_keys()","yarp::location#deconstruct_keys()","yarp::matchlastlinenode#deconstruct_keys()","yarp::matchpredicatenode#deconstruct_keys()","yarp::matchrequirednode#deconstruct_keys()","yarp::missingnode#deconstruct_keys()","yarp::modulenode#deconstruct_keys()","yarp::multitargetnode#deconstruct_keys()","yarp::multiwritenode#deconstruct_keys()","yarp::nextnode#deconstruct_keys()","yarp::nilnode#deconstruct_keys()","yarp::nokeywordsparameternode#deconstruct_keys()","yarp::numberedreferencereadnode#deconstruct_keys()","yarp::optionalparameternode#deconstruct_keys()","yarp::ornode#deconstruct_keys()","yarp::parametersnode#deconstruct_keys()","yarp::parenthesesnode#deconstruct_keys()","yarp::parseerror#deconstruct_keys()","yarp::parseresult#deconstruct_keys()","yarp::parsewarning#deconstruct_keys()","yarp::pinnedexpressionnode#deconstruct_keys()","yarp::pinnedvariablenode#deconstruct_keys()","yarp::postexecutionnode#deconstruct_keys()","yarp::preexecutionnode#deconstruct_keys()","yarp::programnode#deconstruct_keys()","yarp::rangenode#deconstruct_keys()","yarp::rationalnode#deconstruct_keys()","yarp::redonode#deconstruct_keys()","yarp::regularexpressionnode#deconstruct_keys()","yarp::requireddestructuredparameternode#deconstruct_keys()","yarp::requiredparameternode#deconstruct_keys()","yarp::rescuemodifiernode#deconstruct_keys()","yarp::rescuenode#deconstruct_keys()","yarp::restparameternode#deconstruct_keys()","yarp::retrynode#deconstruct_keys()","yarp::returnnode#deconstruct_keys()","yarp::selfnode#deconstruct_keys()","yarp::singletonclassnode#deconstruct_keys()","yarp::sourceencodingnode#deconstruct_keys()","yarp::sourcefilenode#deconstruct_keys()","yarp::sourcelinenode#deconstruct_keys()","yarp::splatnode#deconstruct_keys()","yarp::statementsnode#deconstruct_keys()","yarp::stringconcatnode#deconstruct_keys()","yarp::stringnode#deconstruct_keys()","yarp::supernode#deconstruct_keys()","yarp::symbolnode#deconstruct_keys()","yarp::token#deconstruct_keys()","yarp::truenode#deconstruct_keys()","yarp::undefnode#deconstruct_keys()","yarp::unlessnode#deconstruct_keys()","yarp::untilnode#deconstruct_keys()","yarp::whennode#deconstruct_keys()","yarp::whilenode#deconstruct_keys()","yarp::xstringnode#deconstruct_keys()","yarp::yieldnode#deconstruct_keys()","yarp::defnode#def_keyword()","yarp::constantpathnode#delimiter()","yarp::constantpathtargetnode#delimiter()","yarp::pack::directive#describe()","yarp::pack::format#describe()","yarp::desugarvisitor#desugar_and_write_node()","yarp::desugarvisitor#desugar_operator_write_node()","yarp::desugarvisitor#desugar_or_write_defined_node()","yarp::desugarvisitor#desugar_or_write_node()","yarp::languageserver#diagnostics()","yarp::fornode#do_keyword()","yarp::dump()","yarp::dump_file()","yarp::dump_internal()","yarp::debug::iseq#each_child()","yarp::elsenode#else_keyword()","yarp::parseresult::comments::locationtarget#encloses?()","yarp::parseresult::comments::nodetarget#encloses?()","yarp::location#end_column()","yarp::beginnode#end_keyword()","yarp::casenode#end_keyword()","yarp::classnode#end_keyword()","yarp::defnode#end_keyword()","yarp::elsenode#end_keyword()","yarp::ensurenode#end_keyword()","yarp::fornode#end_keyword()","yarp::ifnode#end_keyword()","yarp::modulenode#end_keyword()","yarp::singletonclassnode#end_keyword()","yarp::unlessnode#end_keyword()","yarp::location#end_line()","yarp::location#end_offset()","yarp::parseresult::comments::locationtarget#end_offset()","yarp::parseresult::comments::nodetarget#end_offset()","yarp::ensurenode#ensure_keyword()","yarp::defnode#equal()","yarp::rippercompat#error?()","yarp::interpolatedmatchlastlinenode#euc_jp?()","yarp::interpolatedregularexpressionnode#euc_jp?()","yarp::matchlastlinenode#euc_jp?()","yarp::regularexpressionnode#euc_jp?()","yarp::lexcompat::token#event()","yarp::flipflopnode#exclude_end?()","yarp::rangenode#exclude_end?()","yarp::interpolatedmatchlastlinenode#extended?()","yarp::interpolatedregularexpressionnode#extended?()","yarp::matchlastlinenode#extended?()","yarp::regularexpressionnode#extended?()","yarp::parseresult#failure?()","yarp::fornode#for_keyword()","yarp::nodeinspector#header()","yarp::integernode#hexadecimal?()","yarp::ifnode#if_keyword()","yarp::interpolatedmatchlastlinenode#ignore_case?()","yarp::interpolatedregularexpressionnode#ignore_case?()","yarp::matchlastlinenode#ignore_case?()","yarp::regularexpressionnode#ignore_case?()","yarp::innode#in()","yarp::fornode#in_keyword()","yarp::classnode#inheritance_operator()","yarp::aliasglobalvariablenode#inspect()","yarp::aliasmethodnode#inspect()","yarp::alternationpatternnode#inspect()","yarp::andnode#inspect()","yarp::argumentsnode#inspect()","yarp::arraynode#inspect()","yarp::arraypatternnode#inspect()","yarp::assocnode#inspect()","yarp::assocsplatnode#inspect()","yarp::backreferencereadnode#inspect()","yarp::beginnode#inspect()","yarp::blockargumentnode#inspect()","yarp::blocklocalvariablenode#inspect()","yarp::blocknode#inspect()","yarp::blockparameternode#inspect()","yarp::blockparametersnode#inspect()","yarp::breaknode#inspect()","yarp::callandwritenode#inspect()","yarp::callnode#inspect()","yarp::calloperatorwritenode#inspect()","yarp::callorwritenode#inspect()","yarp::capturepatternnode#inspect()","yarp::casenode#inspect()","yarp::classnode#inspect()","yarp::classvariableandwritenode#inspect()","yarp::classvariableoperatorwritenode#inspect()","yarp::classvariableorwritenode#inspect()","yarp::classvariablereadnode#inspect()","yarp::classvariabletargetnode#inspect()","yarp::classvariablewritenode#inspect()","yarp::comment#inspect()","yarp::constantandwritenode#inspect()","yarp::constantoperatorwritenode#inspect()","yarp::constantorwritenode#inspect()","yarp::constantpathandwritenode#inspect()","yarp::constantpathnode#inspect()","yarp::constantpathoperatorwritenode#inspect()","yarp::constantpathorwritenode#inspect()","yarp::constantpathtargetnode#inspect()","yarp::constantpathwritenode#inspect()","yarp::constantreadnode#inspect()","yarp::constanttargetnode#inspect()","yarp::constantwritenode#inspect()","yarp::defnode#inspect()","yarp::definednode#inspect()","yarp::elsenode#inspect()","yarp::embeddedstatementsnode#inspect()","yarp::embeddedvariablenode#inspect()","yarp::ensurenode#inspect()","yarp::falsenode#inspect()","yarp::findpatternnode#inspect()","yarp::flipflopnode#inspect()","yarp::floatnode#inspect()","yarp::fornode#inspect()","yarp::forwardingargumentsnode#inspect()","yarp::forwardingparameternode#inspect()","yarp::forwardingsupernode#inspect()","yarp::globalvariableandwritenode#inspect()","yarp::globalvariableoperatorwritenode#inspect()","yarp::globalvariableorwritenode#inspect()","yarp::globalvariablereadnode#inspect()","yarp::globalvariabletargetnode#inspect()","yarp::globalvariablewritenode#inspect()","yarp::hashnode#inspect()","yarp::hashpatternnode#inspect()","yarp::ifnode#inspect()","yarp::imaginarynode#inspect()","yarp::innode#inspect()","yarp::instancevariableandwritenode#inspect()","yarp::instancevariableoperatorwritenode#inspect()","yarp::instancevariableorwritenode#inspect()","yarp::instancevariablereadnode#inspect()","yarp::instancevariabletargetnode#inspect()","yarp::instancevariablewritenode#inspect()","yarp::integernode#inspect()","yarp::interpolatedmatchlastlinenode#inspect()","yarp::interpolatedregularexpressionnode#inspect()","yarp::interpolatedstringnode#inspect()","yarp::interpolatedsymbolnode#inspect()","yarp::interpolatedxstringnode#inspect()","yarp::keywordhashnode#inspect()","yarp::keywordparameternode#inspect()","yarp::keywordrestparameternode#inspect()","yarp::lambdanode#inspect()","yarp::localvariableandwritenode#inspect()","yarp::localvariableoperatorwritenode#inspect()","yarp::localvariableorwritenode#inspect()","yarp::localvariablereadnode#inspect()","yarp::localvariabletargetnode#inspect()","yarp::localvariablewritenode#inspect()","yarp::location#inspect()","yarp::matchlastlinenode#inspect()","yarp::matchpredicatenode#inspect()","yarp::matchrequirednode#inspect()","yarp::missingnode#inspect()","yarp::modulenode#inspect()","yarp::multitargetnode#inspect()","yarp::multiwritenode#inspect()","yarp::nextnode#inspect()","yarp::nilnode#inspect()","yarp::nokeywordsparameternode#inspect()","yarp::numberedreferencereadnode#inspect()","yarp::optionalparameternode#inspect()","yarp::ornode#inspect()","yarp::parametersnode#inspect()","yarp::parenthesesnode#inspect()","yarp::parseerror#inspect()","yarp::parsewarning#inspect()","yarp::pinnedexpressionnode#inspect()","yarp::pinnedvariablenode#inspect()","yarp::postexecutionnode#inspect()","yarp::preexecutionnode#inspect()","yarp::programnode#inspect()","yarp::rangenode#inspect()","yarp::rationalnode#inspect()","yarp::redonode#inspect()","yarp::regularexpressionnode#inspect()","yarp::requireddestructuredparameternode#inspect()","yarp::requiredparameternode#inspect()","yarp::rescuemodifiernode#inspect()","yarp::rescuenode#inspect()","yarp::restparameternode#inspect()","yarp::retrynode#inspect()","yarp::returnnode#inspect()","yarp::selfnode#inspect()","yarp::singletonclassnode#inspect()","yarp::sourceencodingnode#inspect()","yarp::sourcefilenode#inspect()","yarp::sourcelinenode#inspect()","yarp::splatnode#inspect()","yarp::statementsnode#inspect()","yarp::stringconcatnode#inspect()","yarp::stringnode#inspect()","yarp::supernode#inspect()","yarp::symbolnode#inspect()","yarp::truenode#inspect()","yarp::undefnode#inspect()","yarp::unlessnode#inspect()","yarp::untilnode#inspect()","yarp::whennode#inspect()","yarp::whilenode#inspect()","yarp::xstringnode#inspect()","yarp::yieldnode#inspect()","yarp::debug::iseq#instructions()","yarp::location#join()","yarp::aliasglobalvariablenode#keyword()","yarp::aliasmethodnode#keyword()","yarp::breaknode#keyword()","yarp::definednode#keyword()","yarp::nextnode#keyword()","yarp::nokeywordsparameternode#keyword()","yarp::postexecutionnode#keyword()","yarp::preexecutionnode#keyword()","yarp::rescuemodifiernode#keyword()","yarp::rescuenode#keyword()","yarp::returnnode#keyword()","yarp::supernode#keyword()","yarp::undefnode#keyword()","yarp::unlessnode#keyword()","yarp::untilnode#keyword()","yarp::whennode#keyword()","yarp::whilenode#keyword()","yarp::yieldnode#keyword()","yarp::librubyparser::ypbuffer#length()","yarp::librubyparser::ypstring#length()","yarp::lex()","yarp::lex_compat()","yarp::lex_file()","yarp::lex_ripper()","yarp::source#line()","yarp::source#line_offset()","yarp::nodeinspector#list()","yarp::load()","yarp::serialize::load()","yarp::serialize::loader#load_constant()","yarp::serialize::loader#load_embedded_string()","yarp::serialize::loader#load_encoding()","yarp::librubyparser::load_exported_functions_from()","yarp::serialize::loader#load_location()","yarp::serialize::loader#load_metadata()","yarp::serialize::loader#load_node()","yarp::serialize::loader#load_nodes()","yarp::serialize::loader#load_optional_constant()","yarp::serialize::loader#load_optional_location()","yarp::serialize::loader#load_optional_node()","yarp::serialize::loader#load_required_constant()","yarp::serialize::loader#load_result()","yarp::serialize::loader#load_serialized_length()","yarp::serialize::loader#load_string()","yarp::serialize::load_tokens()","yarp::serialize::loader#load_tokens()","yarp::serialize::loader#load_tokens_result()","yarp::serialize::loader#load_varint()","yarp::debug::iseq#local_table()","yarp::lexcompat::token#location()","yarp::nodeinspector#location()","yarp::defnode#lparen()","yarp::definednode#lparen()","yarp::multitargetnode#lparen()","yarp::multiwritenode#lparen()","yarp::pinnedexpressionnode#lparen()","yarp::supernode#lparen()","yarp::yieldnode#lparen()","yarp::parseresult#mark_newlines!()","yarp::callandwritenode#message()","yarp::callnode#message()","yarp::calloperatorwritenode#message()","yarp::callorwritenode#message()","yarp::modulenode#module_keyword()","yarp::interpolatedmatchlastlinenode#multi_line?()","yarp::interpolatedregularexpressionnode#multi_line?()","yarp::matchlastlinenode#multi_line?()","yarp::regularexpressionnode#multi_line?()","yarp::parseresult::comments#nearest_targets()","yarp::aliasglobalvariablenode::new()","yarp::aliasmethodnode::new()","yarp::alternationpatternnode::new()","yarp::andnode::new()","yarp::argumentsnode::new()","yarp::arraynode::new()","yarp::arraypatternnode::new()","yarp::assocnode::new()","yarp::assocsplatnode::new()","yarp::backreferencereadnode::new()","yarp::beginnode::new()","yarp::blockargumentnode::new()","yarp::blocklocalvariablenode::new()","yarp::blocknode::new()","yarp::blockparameternode::new()","yarp::blockparametersnode::new()","yarp::breaknode::new()","yarp::callandwritenode::new()","yarp::callnode::new()","yarp::calloperatorwritenode::new()","yarp::callorwritenode::new()","yarp::capturepatternnode::new()","yarp::casenode::new()","yarp::classnode::new()","yarp::classvariableandwritenode::new()","yarp::classvariableoperatorwritenode::new()","yarp::classvariableorwritenode::new()","yarp::classvariablereadnode::new()","yarp::classvariabletargetnode::new()","yarp::classvariablewritenode::new()","yarp::comment::new()","yarp::constantandwritenode::new()","yarp::constantoperatorwritenode::new()","yarp::constantorwritenode::new()","yarp::constantpathandwritenode::new()","yarp::constantpathnode::new()","yarp::constantpathoperatorwritenode::new()","yarp::constantpathorwritenode::new()","yarp::constantpathtargetnode::new()","yarp::constantpathwritenode::new()","yarp::constantreadnode::new()","yarp::constanttargetnode::new()","yarp::constantwritenode::new()","yarp::debug::iseq::new()","yarp::defnode::new()","yarp::definednode::new()","yarp::elsenode::new()","yarp::embeddedstatementsnode::new()","yarp::embeddedvariablenode::new()","yarp::ensurenode::new()","yarp::falsenode::new()","yarp::findpatternnode::new()","yarp::flipflopnode::new()","yarp::floatnode::new()","yarp::fornode::new()","yarp::forwardingargumentsnode::new()","yarp::forwardingparameternode::new()","yarp::forwardingsupernode::new()","yarp::globalvariableandwritenode::new()","yarp::globalvariableoperatorwritenode::new()","yarp::globalvariableorwritenode::new()","yarp::globalvariablereadnode::new()","yarp::globalvariabletargetnode::new()","yarp::globalvariablewritenode::new()","yarp::hashnode::new()","yarp::hashpatternnode::new()","yarp::ifnode::new()","yarp::imaginarynode::new()","yarp::innode::new()","yarp::instancevariableandwritenode::new()","yarp::instancevariableoperatorwritenode::new()","yarp::instancevariableorwritenode::new()","yarp::instancevariablereadnode::new()","yarp::instancevariabletargetnode::new()","yarp::instancevariablewritenode::new()","yarp::integernode::new()","yarp::interpolatedmatchlastlinenode::new()","yarp::interpolatedregularexpressionnode::new()","yarp::interpolatedstringnode::new()","yarp::interpolatedsymbolnode::new()","yarp::interpolatedxstringnode::new()","yarp::keywordhashnode::new()","yarp::keywordparameternode::new()","yarp::keywordrestparameternode::new()","yarp::lambdanode::new()","yarp::languageserver::new()","yarp::lexcompat::new()","yarp::lexcompat::heredoc::dashheredoc::new()","yarp::lexcompat::heredoc::dedentingheredoc::new()","yarp::lexcompat::heredoc::plainheredoc::new()","yarp::librubyparser::ypbuffer::new()","yarp::librubyparser::ypstring::new()","yarp::localvariableandwritenode::new()","yarp::localvariableoperatorwritenode::new()","yarp::localvariableorwritenode::new()","yarp::localvariablereadnode::new()","yarp::localvariabletargetnode::new()","yarp::localvariablewritenode::new()","yarp::location::new()","yarp::matchlastlinenode::new()","yarp::matchpredicatenode::new()","yarp::matchrequirednode::new()","yarp::missingnode::new()","yarp::modulenode::new()","yarp::multitargetnode::new()","yarp::multiwritenode::new()","yarp::nextnode::new()","yarp::nilnode::new()","yarp::nokeywordsparameternode::new()","yarp::nodeinspector::new()","yarp::numberedreferencereadnode::new()","yarp::optionalparameternode::new()","yarp::ornode::new()","yarp::pack::directive::new()","yarp::pack::format::new()","yarp::parametersnode::new()","yarp::parenthesesnode::new()","yarp::parseerror::new()","yarp::parseresult::new()","yarp::parseresult::comments::new()","yarp::parseresult::comments::locationtarget::new()","yarp::parseresult::comments::nodetarget::new()","yarp::parseresult::newlines::new()","yarp::parsewarning::new()","yarp::pattern::new()","yarp::pattern::compilationerror::new()","yarp::pinnedexpressionnode::new()","yarp::pinnedvariablenode::new()","yarp::postexecutionnode::new()","yarp::preexecutionnode::new()","yarp::programnode::new()","yarp::rangenode::new()","yarp::rationalnode::new()","yarp::redonode::new()","yarp::regularexpressionnode::new()","yarp::requireddestructuredparameternode::new()","yarp::requiredparameternode::new()","yarp::rescuemodifiernode::new()","yarp::rescuenode::new()","yarp::restparameternode::new()","yarp::retrynode::new()","yarp::returnnode::new()","yarp::rippercompat::new()","yarp::selfnode::new()","yarp::serialize::loader::new()","yarp::singletonclassnode::new()","yarp::source::new()","yarp::sourceencodingnode::new()","yarp::sourcefilenode::new()","yarp::sourcelinenode::new()","yarp::splatnode::new()","yarp::statementsnode::new()","yarp::stringconcatnode::new()","yarp::stringnode::new()","yarp::supernode::new()","yarp::symbolnode::new()","yarp::token::new()","yarp::truenode::new()","yarp::undefnode::new()","yarp::unlessnode::new()","yarp::untilnode::new()","yarp::whennode::new()","yarp::whilenode::new()","yarp::xstringnode::new()","yarp::yieldnode::new()","yarp::node#newline?()","yarp::debug::newlines()","yarp::location::null()","yarp::integernode#octal?()","yarp::interpolatedmatchlastlinenode#once?()","yarp::interpolatedregularexpressionnode#once?()","yarp::matchlastlinenode#once?()","yarp::regularexpressionnode#once?()","yarp::arraynode#opening()","yarp::arraypatternnode#opening()","yarp::blocknode#opening()","yarp::blockparametersnode#opening()","yarp::callandwritenode#opening()","yarp::callnode#opening()","yarp::calloperatorwritenode#opening()","yarp::callorwritenode#opening()","yarp::embeddedstatementsnode#opening()","yarp::findpatternnode#opening()","yarp::hashnode#opening()","yarp::hashpatternnode#opening()","yarp::interpolatedmatchlastlinenode#opening()","yarp::interpolatedregularexpressionnode#opening()","yarp::interpolatedstringnode#opening()","yarp::interpolatedsymbolnode#opening()","yarp::interpolatedxstringnode#opening()","yarp::lambdanode#opening()","yarp::matchlastlinenode#opening()","yarp::parenthesesnode#opening()","yarp::postexecutionnode#opening()","yarp::preexecutionnode#opening()","yarp::regularexpressionnode#opening()","yarp::requireddestructuredparameternode#opening()","yarp::stringnode#opening()","yarp::symbolnode#opening()","yarp::xstringnode#opening()","yarp::alternationpatternnode#operator()","yarp::andnode#operator()","yarp::assocnode#operator()","yarp::assocsplatnode#operator()","yarp::blockargumentnode#operator()","yarp::blockparameternode#operator()","yarp::callandwritenode#operator()","yarp::callorwritenode#operator()","yarp::capturepatternnode#operator()","yarp::classvariableandwritenode#operator()","yarp::classvariableorwritenode#operator()","yarp::classvariablewritenode#operator()","yarp::constantandwritenode#operator()","yarp::constantorwritenode#operator()","yarp::constantpathandwritenode#operator()","yarp::constantpathorwritenode#operator()","yarp::constantpathwritenode#operator()","yarp::constantwritenode#operator()","yarp::defnode#operator()","yarp::embeddedvariablenode#operator()","yarp::flipflopnode#operator()","yarp::globalvariableandwritenode#operator()","yarp::globalvariableorwritenode#operator()","yarp::globalvariablewritenode#operator()","yarp::instancevariableandwritenode#operator()","yarp::instancevariableorwritenode#operator()","yarp::instancevariablewritenode#operator()","yarp::keywordrestparameternode#operator()","yarp::lambdanode#operator()","yarp::localvariableandwritenode#operator()","yarp::localvariableorwritenode#operator()","yarp::localvariablewritenode#operator()","yarp::matchpredicatenode#operator()","yarp::matchrequirednode#operator()","yarp::multiwritenode#operator()","yarp::nokeywordsparameternode#operator()","yarp::optionalparameternode#operator()","yarp::ornode#operator()","yarp::pinnedexpressionnode#operator()","yarp::pinnedvariablenode#operator()","yarp::rangenode#operator()","yarp::rescuenode#operator()","yarp::restparameternode#operator()","yarp::singletonclassnode#operator()","yarp::splatnode#operator()","yarp::interpolatedregularexpressionnode#options()","yarp::regularexpressionnode#options()","yarp::parse()","yarp::rippercompat#parse()","yarp::parse_file()","yarp::parse_lex()","yarp::parse_lex_file()","yarp::debug::parse_serialize_file()","yarp::location#pretty_print()","yarp::node#pretty_print()","yarp::token#pretty_print()","yarp::librubyparser::ypbuffer#read()","yarp::librubyparser::ypstring#read()","yarp::librubyparser::resolve_type()","yarp::lexcompat#result()","yarp::rippercompat#result()","yarp::defnode#rparen()","yarp::definednode#rparen()","yarp::multitargetnode#rparen()","yarp::multiwritenode#rparen()","yarp::pinnedexpressionnode#rparen()","yarp::supernode#rparen()","yarp::yieldnode#rparen()","yarp::languageserver#run()","yarp::callandwritenode#safe_navigation?()","yarp::callnode#safe_navigation?()","yarp::calloperatorwritenode#safe_navigation?()","yarp::callorwritenode#safe_navigation?()","yarp::pattern#scan()","yarp::beginnode#set_newline_flag()","yarp::ifnode#set_newline_flag()","yarp::interpolatedmatchlastlinenode#set_newline_flag()","yarp::interpolatedregularexpressionnode#set_newline_flag()","yarp::interpolatedstringnode#set_newline_flag()","yarp::interpolatedsymbolnode#set_newline_flag()","yarp::interpolatedxstringnode#set_newline_flag()","yarp::node#set_newline_flag()","yarp::parenthesesnode#set_newline_flag()","yarp::rescuemodifiernode#set_newline_flag()","yarp::unlessnode#set_newline_flag()","yarp::untilnode#set_newline_flag()","yarp::whilenode#set_newline_flag()","yarp::rippercompat::sexp()","yarp::rippercompat::sexp_raw()","yarp::location#slice()","yarp::node#slice()","yarp::source#slice()","yarp::librubyparser::ypstring#source()","yarp::location#start_column()","yarp::location#start_line()","yarp::location#start_line_slice()","yarp::parseresult::comments::locationtarget#start_offset()","yarp::parseresult::comments::nodetarget#start_offset()","yarp::lexcompat::token#state()","yarp::parseresult#success?()","yarp::innode#then()","yarp::lexcompat::heredoc::dashheredoc#to_a()","yarp::lexcompat::heredoc::dedentingheredoc#to_a()","yarp::lexcompat::heredoc::plainheredoc#to_a()","yarp::nodeinspector#to_str()","yarp::comment#trailing?()","yarp::debug::iseq#type()","object#unpack1()","yarp::interpolatedmatchlastlinenode#utf_8?()","yarp::interpolatedregularexpressionnode#utf_8?()","yarp::matchlastlinenode#utf_8?()","yarp::regularexpressionnode#utf_8?()","yarp::floatnode#value()","yarp::imaginarynode#value()","yarp::integernode#value()","yarp::lexcompat::token#value()","yarp::librubyparser::ypbuffer#value()","yarp::rationalnode#value()","yarp::symbolnode#value()","yarp::callandwritenode#variable_call?()","yarp::callnode#variable_call?()","yarp::calloperatorwritenode#variable_call?()","yarp::callorwritenode#variable_call?()","yarp::basicvisitor#visit()","yarp::rippercompat#visit()","yarp::mutationvisitor#visit_alias_global_variable_node()","yarp::mutationvisitor#visit_alias_method_node()","yarp::basicvisitor#visit_all()","yarp::mutationvisitor#visit_alternation_pattern_node()","yarp::mutationvisitor#visit_and_node()","yarp::mutationvisitor#visit_arguments_node()","yarp::mutationvisitor#visit_array_node()","yarp::mutationvisitor#visit_array_pattern_node()","yarp::mutationvisitor#visit_assoc_node()","yarp::mutationvisitor#visit_assoc_splat_node()","yarp::mutationvisitor#visit_back_reference_read_node()","yarp::mutationvisitor#visit_begin_node()","yarp::mutationvisitor#visit_block_argument_node()","yarp::mutationvisitor#visit_block_local_variable_node()","yarp::mutationvisitor#visit_block_node()","yarp::parseresult::newlines#visit_block_node()","yarp::mutationvisitor#visit_block_parameter_node()","yarp::mutationvisitor#visit_block_parameters_node()","yarp::mutationvisitor#visit_break_node()","yarp::mutationvisitor#visit_call_and_write_node()","yarp::mutationvisitor#visit_call_node()","yarp::rippercompat#visit_call_node()","yarp::mutationvisitor#visit_call_operator_write_node()","yarp::mutationvisitor#visit_call_or_write_node()","yarp::mutationvisitor#visit_capture_pattern_node()","yarp::mutationvisitor#visit_case_node()","yarp::basicvisitor#visit_child_nodes()","yarp::mutationvisitor#visit_class_node()","yarp::desugarvisitor#visit_class_variable_and_write_node()","yarp::mutationvisitor#visit_class_variable_and_write_node()","yarp::desugarvisitor#visit_class_variable_operator_write_node()","yarp::mutationvisitor#visit_class_variable_operator_write_node()","yarp::desugarvisitor#visit_class_variable_or_write_node()","yarp::mutationvisitor#visit_class_variable_or_write_node()","yarp::mutationvisitor#visit_class_variable_read_node()","yarp::mutationvisitor#visit_class_variable_target_node()","yarp::mutationvisitor#visit_class_variable_write_node()","yarp::desugarvisitor#visit_constant_and_write_node()","yarp::mutationvisitor#visit_constant_and_write_node()","yarp::desugarvisitor#visit_constant_operator_write_node()","yarp::mutationvisitor#visit_constant_operator_write_node()","yarp::desugarvisitor#visit_constant_or_write_node()","yarp::mutationvisitor#visit_constant_or_write_node()","yarp::mutationvisitor#visit_constant_path_and_write_node()","yarp::mutationvisitor#visit_constant_path_node()","yarp::mutationvisitor#visit_constant_path_operator_write_node()","yarp::mutationvisitor#visit_constant_path_or_write_node()","yarp::mutationvisitor#visit_constant_path_target_node()","yarp::mutationvisitor#visit_constant_path_write_node()","yarp::mutationvisitor#visit_constant_read_node()","yarp::mutationvisitor#visit_constant_target_node()","yarp::mutationvisitor#visit_constant_write_node()","yarp::mutationvisitor#visit_def_node()","yarp::mutationvisitor#visit_defined_node()","yarp::mutationvisitor#visit_else_node()","yarp::mutationvisitor#visit_embedded_statements_node()","yarp::mutationvisitor#visit_embedded_variable_node()","yarp::mutationvisitor#visit_ensure_node()","yarp::mutationvisitor#visit_false_node()","yarp::mutationvisitor#visit_find_pattern_node()","yarp::mutationvisitor#visit_flip_flop_node()","yarp::mutationvisitor#visit_float_node()","yarp::mutationvisitor#visit_for_node()","yarp::mutationvisitor#visit_forwarding_arguments_node()","yarp::mutationvisitor#visit_forwarding_parameter_node()","yarp::mutationvisitor#visit_forwarding_super_node()","yarp::desugarvisitor#visit_global_variable_and_write_node()","yarp::mutationvisitor#visit_global_variable_and_write_node()","yarp::desugarvisitor#visit_global_variable_operator_write_node()","yarp::mutationvisitor#visit_global_variable_operator_write_node()","yarp::desugarvisitor#visit_global_variable_or_write_node()","yarp::mutationvisitor#visit_global_variable_or_write_node()","yarp::mutationvisitor#visit_global_variable_read_node()","yarp::mutationvisitor#visit_global_variable_target_node()","yarp::mutationvisitor#visit_global_variable_write_node()","yarp::mutationvisitor#visit_hash_node()","yarp::mutationvisitor#visit_hash_pattern_node()","yarp::mutationvisitor#visit_if_node()","yarp::parseresult::newlines#visit_if_node()","yarp::mutationvisitor#visit_imaginary_node()","yarp::mutationvisitor#visit_in_node()","yarp::desugarvisitor#visit_instance_variable_and_write_node()","yarp::mutationvisitor#visit_instance_variable_and_write_node()","yarp::desugarvisitor#visit_instance_variable_operator_write_node()","yarp::mutationvisitor#visit_instance_variable_operator_write_node()","yarp::desugarvisitor#visit_instance_variable_or_write_node()","yarp::mutationvisitor#visit_instance_variable_or_write_node()","yarp::mutationvisitor#visit_instance_variable_read_node()","yarp::mutationvisitor#visit_instance_variable_target_node()","yarp::mutationvisitor#visit_instance_variable_write_node()","yarp::mutationvisitor#visit_integer_node()","yarp::rippercompat#visit_integer_node()","yarp::mutationvisitor#visit_interpolated_match_last_line_node()","yarp::mutationvisitor#visit_interpolated_regular_expression_node()","yarp::mutationvisitor#visit_interpolated_string_node()","yarp::mutationvisitor#visit_interpolated_symbol_node()","yarp::mutationvisitor#visit_interpolated_x_string_node()","yarp::mutationvisitor#visit_keyword_hash_node()","yarp::mutationvisitor#visit_keyword_parameter_node()","yarp::mutationvisitor#visit_keyword_rest_parameter_node()","yarp::mutationvisitor#visit_lambda_node()","yarp::parseresult::newlines#visit_lambda_node()","yarp::desugarvisitor#visit_local_variable_and_write_node()","yarp::mutationvisitor#visit_local_variable_and_write_node()","yarp::desugarvisitor#visit_local_variable_operator_write_node()","yarp::mutationvisitor#visit_local_variable_operator_write_node()","yarp::desugarvisitor#visit_local_variable_or_write_node()","yarp::mutationvisitor#visit_local_variable_or_write_node()","yarp::mutationvisitor#visit_local_variable_read_node()","yarp::mutationvisitor#visit_local_variable_target_node()","yarp::mutationvisitor#visit_local_variable_write_node()","yarp::mutationvisitor#visit_match_last_line_node()","yarp::mutationvisitor#visit_match_predicate_node()","yarp::mutationvisitor#visit_match_required_node()","yarp::mutationvisitor#visit_missing_node()","yarp::mutationvisitor#visit_module_node()","yarp::mutationvisitor#visit_multi_target_node()","yarp::mutationvisitor#visit_multi_write_node()","yarp::mutationvisitor#visit_next_node()","yarp::mutationvisitor#visit_nil_node()","yarp::mutationvisitor#visit_no_keywords_parameter_node()","yarp::mutationvisitor#visit_numbered_reference_read_node()","yarp::mutationvisitor#visit_optional_parameter_node()","yarp::mutationvisitor#visit_or_node()","yarp::mutationvisitor#visit_parameters_node()","yarp::mutationvisitor#visit_parentheses_node()","yarp::mutationvisitor#visit_pinned_expression_node()","yarp::mutationvisitor#visit_pinned_variable_node()","yarp::mutationvisitor#visit_post_execution_node()","yarp::mutationvisitor#visit_pre_execution_node()","yarp::mutationvisitor#visit_program_node()","yarp::rippercompat#visit_program_node()","yarp::mutationvisitor#visit_range_node()","yarp::mutationvisitor#visit_rational_node()","yarp::mutationvisitor#visit_redo_node()","yarp::mutationvisitor#visit_regular_expression_node()","yarp::mutationvisitor#visit_required_destructured_parameter_node()","yarp::mutationvisitor#visit_required_parameter_node()","yarp::mutationvisitor#visit_rescue_modifier_node()","yarp::mutationvisitor#visit_rescue_node()","yarp::mutationvisitor#visit_rest_parameter_node()","yarp::mutationvisitor#visit_retry_node()","yarp::mutationvisitor#visit_return_node()","yarp::mutationvisitor#visit_self_node()","yarp::mutationvisitor#visit_singleton_class_node()","yarp::mutationvisitor#visit_source_encoding_node()","yarp::mutationvisitor#visit_source_file_node()","yarp::mutationvisitor#visit_source_line_node()","yarp::mutationvisitor#visit_splat_node()","yarp::mutationvisitor#visit_statements_node()","yarp::parseresult::newlines#visit_statements_node()","yarp::rippercompat#visit_statements_node()","yarp::mutationvisitor#visit_string_concat_node()","yarp::mutationvisitor#visit_string_node()","yarp::mutationvisitor#visit_super_node()","yarp::mutationvisitor#visit_symbol_node()","yarp::rippercompat#visit_token()","yarp::mutationvisitor#visit_true_node()","yarp::mutationvisitor#visit_undef_node()","yarp::mutationvisitor#visit_unless_node()","yarp::parseresult::newlines#visit_unless_node()","yarp::mutationvisitor#visit_until_node()","yarp::mutationvisitor#visit_when_node()","yarp::mutationvisitor#visit_while_node()","yarp::mutationvisitor#visit_x_string_node()","yarp::mutationvisitor#visit_yield_node()","yarp::interpolatedmatchlastlinenode#windows_31j?()","yarp::interpolatedregularexpressionnode#windows_31j?()","yarp::matchlastlinenode#windows_31j?()","yarp::regularexpressionnode#windows_31j?()","yarp::librubyparser::ypbuffer::with()","yarp::librubyparser::ypstring::with()","yarp::languageserver#write()","yarp::debug::yarp_locals()"],"info":[["Object","","Object.html","",""],["YARP","","YARP.html","","<p>Reopening the YARP module after yarp/node is required so that constant reflection APIs will find the …\n"],["YARP::AliasGlobalVariableNode","","YARP/AliasGlobalVariableNode.html","","<p>Represents the use of the ‘alias` keyword to alias a global variable.\n\n<pre>alias $foo $bar\n^^^^^^^^^^^^^^^</pre>\n"],["YARP::AliasMethodNode","","YARP/AliasMethodNode.html","","<p>Represents the use of the ‘alias` keyword to alias a method.\n\n<pre>alias foo bar\n^^^^^^^^^^^^^</pre>\n"],["YARP::AlternationPatternNode","","YARP/AlternationPatternNode.html","","<p>Represents an alternation pattern in pattern matching.\n\n<pre>foo =&gt; bar | baz\n       ^^^^^^^^^</pre>\n"],["YARP::AndNode","","YARP/AndNode.html","","<p>Represents the use of the ‘&amp;&amp;` operator or the `and` keyword.\n\n<pre>left and right\n^^^^^^^^^^^^^^</pre>\n"],["YARP::ArgumentsNode","","YARP/ArgumentsNode.html","","<p>Represents a set of arguments to a method or a keyword.\n\n<pre>return foo, bar, baz\n       ^^^^^^^^^^^^^</pre>\n"],["YARP::ArrayNode","","YARP/ArrayNode.html","","<p>Represents an array literal. This can be a regular array using brackets or a special array using % like …\n"],["YARP::ArrayPatternNode","","YARP/ArrayPatternNode.html","","<p>Represents an array pattern in pattern matching.\n\n<pre>foo in 1, 2\n^^^^^^^^^^^\n\nfoo in [1, 2]\n^^^^^^^^^^^^^ ...</pre>\n"],["YARP::AssocNode","","YARP/AssocNode.html","","<p>Represents a hash key/value pair.\n\n<pre>{ a =&gt; b }\n  ^^^^^^</pre>\n"],["YARP::AssocSplatNode","","YARP/AssocSplatNode.html","","<p>Represents a splat in a hash literal.\n\n<pre>{ **foo }\n  ^^^^^</pre>\n"],["YARP::BackReferenceReadNode","","YARP/BackReferenceReadNode.html","","<p>Represents reading a reference to a field in the previous match.\n\n<pre>$&#39;\n^^</pre>\n"],["YARP::BasicVisitor","","YARP/BasicVisitor.html","","<p>A class that knows how to walk down the tree. None of the individual visit methods are implemented on …\n"],["YARP::BeginNode","","YARP/BeginNode.html","","<p>Represents a begin statement.\n\n<pre>begin\n  foo\nend\n^^^^^</pre>\n"],["YARP::BlockArgumentNode","","YARP/BlockArgumentNode.html","","<p>Represents block method arguments.\n\n<pre>bar(&amp;args)\n^^^^^^^^^^</pre>\n"],["YARP::BlockLocalVariableNode","","YARP/BlockLocalVariableNode.html","","<p>Represents a block local variable.\n\n<pre>a { |; b| }\n       ^</pre>\n"],["YARP::BlockNode","","YARP/BlockNode.html","","<p>Represents a block of ruby code.\n<p>[1, 2, 3].each { |i| puts x }\n\n<pre>^^^^^^^^^^^^^^</pre>\n"],["YARP::BlockParameterNode","","YARP/BlockParameterNode.html","","<p>Represents a block parameter to a method, block, or lambda definition.\n\n<pre>def a(&amp;b)\n      ^^\nend</pre>\n"],["YARP::BlockParametersNode","","YARP/BlockParametersNode.html","","<p>Represents a block’s parameters declaration.\n\n<pre>-&gt; (a, b = 1; local) { }\n   ^^^^^^^^^^^^^^^^^\n\nfoo do ...</pre>\n"],["YARP::BreakNode","","YARP/BreakNode.html","","<p>Represents the use of the ‘break` keyword.\n\n<pre>break foo\n^^^^^^^^^</pre>\n"],["YARP::CallAndWriteNode","","YARP/CallAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator on a call.\n\n<pre>foo.bar &amp;&amp;= value\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::CallNode","","YARP/CallNode.html","","<p>Represents a method call, in all of the various forms that can take.\n\n<pre>foo\n^^^\n\nfoo()\n^^^^^\n\n+foo\n^^^^\n ...</pre>\n"],["YARP::CallNodeFlags","","YARP/CallNodeFlags.html","",""],["YARP::CallOperatorWriteNode","","YARP/CallOperatorWriteNode.html","","<p>Represents the use of an assignment operator on a call.\n\n<pre>foo.bar += baz\n^^^^^^^^^^^^^^</pre>\n"],["YARP::CallOrWriteNode","","YARP/CallOrWriteNode.html","","<p>Represents the use of the ‘||=` operator on a call.\n\n<pre>foo.bar ||= value\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::CapturePatternNode","","YARP/CapturePatternNode.html","","<p>Represents assigning to a local variable in pattern matching.\n\n<pre>foo =&gt; [bar =&gt; baz]\n       ^^^^^^^^^^^^</pre>\n"],["YARP::CaseNode","","YARP/CaseNode.html","","<p>Represents the use of a case statement.\n<p>case true ^^^^^^^^^ when false end\n"],["YARP::ClassNode","","YARP/ClassNode.html","","<p>Represents a class declaration involving the ‘class` keyword.\n\n<pre>class Foo end\n^^^^^^^^^^^^^</pre>\n"],["YARP::ClassVariableAndWriteNode","","YARP/ClassVariableAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator for assignment to a class variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">@@target</span> <span class=\"ruby-operator\">&amp;&amp;=</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::ClassVariableOperatorWriteNode","","YARP/ClassVariableOperatorWriteNode.html","","<p>Represents assigning to a class variable using an operator that isn’t ‘=`.\n\n<pre>@@target += value\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::ClassVariableOrWriteNode","","YARP/ClassVariableOrWriteNode.html","","<p>Represents the use of the ‘||=` operator for assignment to a class variable.\n\n<pre>@@target ||= value\n^^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::ClassVariableReadNode","","YARP/ClassVariableReadNode.html","","<p>Represents referencing a class variable.\n\n<pre>@@foo\n^^^^^</pre>\n"],["YARP::ClassVariableTargetNode","","YARP/ClassVariableTargetNode.html","","<p>Represents writing to a class variable in a context that doesn’t have an explicit value.\n\n<pre>@@foo, @@bar ...</pre>\n"],["YARP::ClassVariableWriteNode","","YARP/ClassVariableWriteNode.html","","<p>Represents writing to a class variable.\n\n<pre>@@foo = 1\n^^^^^^^^^</pre>\n"],["YARP::Comment","","YARP/Comment.html","","<p>This represents a comment that was encountered during parsing.\n"],["YARP::ConstantAndWriteNode","","YARP/ConstantAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator for assignment to a constant.\n\n<pre>Target &amp;&amp;= value\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::ConstantOperatorWriteNode","","YARP/ConstantOperatorWriteNode.html","","<p>Represents assigning to a constant using an operator that isn’t ‘=`.\n\n<pre>Target += value\n^^^^^^^^^^^^^^^</pre>\n"],["YARP::ConstantOrWriteNode","","YARP/ConstantOrWriteNode.html","","<p>Represents the use of the ‘||=` operator for assignment to a constant.\n\n<pre>Target ||= value\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::ConstantPathAndWriteNode","","YARP/ConstantPathAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator for assignment to a constant path.\n\n<pre>Parent::Child &amp;&amp;= ...</pre>\n"],["YARP::ConstantPathNode","","YARP/ConstantPathNode.html","","<p>Represents accessing a constant through a path of ‘::` operators.\n\n<pre>Foo::Bar\n^^^^^^^^</pre>\n"],["YARP::ConstantPathOperatorWriteNode","","YARP/ConstantPathOperatorWriteNode.html","","<p>Represents assigning to a constant path using an operator that isn’t ‘=`.\n\n<pre>Parent::Child += value\n^^^^^^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::ConstantPathOrWriteNode","","YARP/ConstantPathOrWriteNode.html","","<p>Represents the use of the ‘||=` operator for assignment to a constant path.\n\n<pre>Parent::Child ||= value\n^^^^^^^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::ConstantPathTargetNode","","YARP/ConstantPathTargetNode.html","","<p>Represents writing to a constant path in a context that doesn’t have an explicit value.\n\n<pre>Foo::Foo, ...</pre>\n"],["YARP::ConstantPathWriteNode","","YARP/ConstantPathWriteNode.html","","<p>Represents writing to a constant path.\n\n<pre>::Foo = 1\n^^^^^^^^^\n\nFoo::Bar = 1\n^^^^^^^^^^^^\n\n::Foo::Bar = 1 ...</pre>\n"],["YARP::ConstantReadNode","","YARP/ConstantReadNode.html","","<p>Represents referencing a constant.\n\n<pre>Foo\n^^^</pre>\n"],["YARP::ConstantTargetNode","","YARP/ConstantTargetNode.html","","<p>Represents writing to a constant in a context that doesn’t have an explicit value.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Foo</span>, <span class=\"ruby-constant\">Bar</span> = <span class=\"ruby-identifier\">baz</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::ConstantWriteNode","","YARP/ConstantWriteNode.html","","<p>Represents writing to a constant.\n\n<pre>Foo = 1\n^^^^^^^</pre>\n"],["YARP::DSL","","YARP/DSL.html","",""],["YARP::Debug","","YARP/Debug.html","","<p>This module is used for testing and debugging and is not meant to be used by consumers of this library. …\n"],["YARP::Debug::ISeq","","YARP/Debug/ISeq.html","",""],["YARP::DefNode","","YARP/DefNode.html","","<p>Represents a method definition.\n\n<pre>def method\nend\n^^^^^^^^^^</pre>\n"],["YARP::DefinedNode","","YARP/DefinedNode.html","","<p>Represents the use of the ‘defined?` keyword.\n\n<pre>defined?(a)\n^^^^^^^^^^^</pre>\n"],["YARP::DesugarVisitor","","YARP/DesugarVisitor.html","",""],["YARP::ElseNode","","YARP/ElseNode.html","","<p>Represents an ‘else` clause in a `case`, `if`, or `unless` statement.\n\n<pre>if a then b else c end\n         ...</pre>\n"],["YARP::EmbeddedStatementsNode","","YARP/EmbeddedStatementsNode.html","","<p>Represents an interpolated set of statements.\n\n<pre>&quot;foo #{bar}&quot;\n     ^^^^^^</pre>\n"],["YARP::EmbeddedVariableNode","","YARP/EmbeddedVariableNode.html","","<p>Represents an interpolated variable.\n\n<pre>&quot;foo #@bar&quot;\n     ^^^^^</pre>\n"],["YARP::EnsureNode","","YARP/EnsureNode.html","","<p>Represents an ‘ensure` clause in a `begin` statement.\n\n<pre>begin\n  foo\nensure\n^^^^^^\n  bar\nend</pre>\n"],["YARP::FalseNode","","YARP/FalseNode.html","","<p>Represents the use of the literal ‘false` keyword.\n\n<pre>false\n^^^^^</pre>\n"],["YARP::FindPatternNode","","YARP/FindPatternNode.html","","<p>Represents a find pattern in pattern matching.\n\n<pre>foo in *bar, baz, *qux\n^^^^^^^^^^^^^^^^^^^^^^\n\nfoo in [*bar, ...</pre>\n"],["YARP::FlipFlopNode","","YARP/FlipFlopNode.html","","<p>Represents the use of the ‘..` or `…` operators to create flip flops.\n\n<pre>baz if foo .. bar\n       ^^^^^^^^^^</pre>\n"],["YARP::FloatNode","","YARP/FloatNode.html","","<p>Represents a floating point number literal.\n\n<pre>1.0\n^^^</pre>\n"],["YARP::ForNode","","YARP/ForNode.html","","<p>Represents the use of the ‘for` keyword.\n\n<pre>for i in a end\n^^^^^^^^^^^^^^</pre>\n"],["YARP::ForwardingArgumentsNode","","YARP/ForwardingArgumentsNode.html","","<p>Represents forwarding all arguments to this method to another method.\n\n<pre>def foo(...)\n  bar(...)\n  ^^^^^^^^ ...</pre>\n"],["YARP::ForwardingParameterNode","","YARP/ForwardingParameterNode.html","","<p>Represents the use of the forwarding parameter in a method, block, or lambda declaration.\n\n<pre>def foo(...) ...</pre>\n"],["YARP::ForwardingSuperNode","","YARP/ForwardingSuperNode.html","","<p>Represents the use of the ‘super` keyword without parentheses or arguments.\n\n<pre>super\n^^^^^</pre>\n"],["YARP::GlobalVariableAndWriteNode","","YARP/GlobalVariableAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator for assignment to a global variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$target</span> <span class=\"ruby-operator\">&amp;&amp;=</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::GlobalVariableOperatorWriteNode","","YARP/GlobalVariableOperatorWriteNode.html","","<p>Represents assigning to a global variable using an operator that isn’t ‘=`.\n\n<pre>$target += value\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::GlobalVariableOrWriteNode","","YARP/GlobalVariableOrWriteNode.html","","<p>Represents the use of the ‘||=` operator for assignment to a global variable.\n\n<pre>$target ||= value\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::GlobalVariableReadNode","","YARP/GlobalVariableReadNode.html","","<p>Represents referencing a global variable.\n\n<pre>$foo\n^^^^</pre>\n"],["YARP::GlobalVariableTargetNode","","YARP/GlobalVariableTargetNode.html","","<p>Represents writing to a global variable in a context that doesn’t have an explicit value.\n\n<pre>$foo, $bar ...</pre>\n"],["YARP::GlobalVariableWriteNode","","YARP/GlobalVariableWriteNode.html","","<p>Represents writing to a global variable.\n\n<pre>$foo = 1\n^^^^^^^^</pre>\n"],["YARP::HashNode","","YARP/HashNode.html","","<p>Represents a hash literal.\n\n<pre>{ a =&gt; b }\n^^^^^^^^^^</pre>\n"],["YARP::HashPatternNode","","YARP/HashPatternNode.html","","<p>Represents a hash pattern in pattern matching.\n\n<pre>foo =&gt; { a: 1, b: 2 }\n       ^^^^^^^^^^^^^^\n\nfoo =&gt; { a: ...</pre>\n"],["YARP::IfNode","","YARP/IfNode.html","","<p>Represents the use of the ‘if` keyword, either in the block form or the modifier form.\n\n<pre>bar if foo\n^^^^^^^^^^ ...</pre>\n"],["YARP::ImaginaryNode","","YARP/ImaginaryNode.html","","<p>Represents an imaginary number literal.\n\n<pre>1.0i\n^^^^</pre>\n"],["YARP::InNode","","YARP/InNode.html","","<p>Represents the use of the ‘in` keyword in a case statement.\n\n<pre>case a; in b then c end\n        ^^^^^^^^^^^</pre>\n"],["YARP::InstanceVariableAndWriteNode","","YARP/InstanceVariableAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator for assignment to an instance variable.\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@target</span> <span class=\"ruby-operator\">&amp;&amp;=</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::InstanceVariableOperatorWriteNode","","YARP/InstanceVariableOperatorWriteNode.html","","<p>Represents assigning to an instance variable using an operator that isn’t ‘=`.\n\n<pre>@target += value\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::InstanceVariableOrWriteNode","","YARP/InstanceVariableOrWriteNode.html","","<p>Represents the use of the ‘||=` operator for assignment to an instance variable.\n\n<pre>@target ||= value\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::InstanceVariableReadNode","","YARP/InstanceVariableReadNode.html","","<p>Represents referencing an instance variable.\n\n<pre>@foo\n^^^^</pre>\n"],["YARP::InstanceVariableTargetNode","","YARP/InstanceVariableTargetNode.html","","<p>Represents writing to an instance variable in a context that doesn’t have an explicit value.\n\n<pre>@foo, ...</pre>\n"],["YARP::InstanceVariableWriteNode","","YARP/InstanceVariableWriteNode.html","","<p>Represents writing to an instance variable.\n\n<pre>@foo = 1\n^^^^^^^^</pre>\n"],["YARP::IntegerBaseFlags","","YARP/IntegerBaseFlags.html","",""],["YARP::IntegerNode","","YARP/IntegerNode.html","","<p>Represents an integer number literal.\n\n<pre>1\n^</pre>\n"],["YARP::InterpolatedMatchLastLineNode","","YARP/InterpolatedMatchLastLineNode.html","","<p>Represents a regular expression literal that contains interpolation that is being used in the predicate …\n"],["YARP::InterpolatedRegularExpressionNode","","YARP/InterpolatedRegularExpressionNode.html","","<p>Represents a regular expression literal that contains interpolation.\n\n<pre>/foo #{bar} baz/\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::InterpolatedStringNode","","YARP/InterpolatedStringNode.html","","<p>Represents a string literal that contains interpolation.\n\n<pre>&quot;foo #{bar} baz&quot;\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::InterpolatedSymbolNode","","YARP/InterpolatedSymbolNode.html","","<p>Represents a symbol literal that contains interpolation.\n\n<pre>:&quot;foo #{bar} baz&quot;\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::InterpolatedXStringNode","","YARP/InterpolatedXStringNode.html","","<p>Represents an xstring literal that contains interpolation.\n\n<pre>`foo #{bar} baz`\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::KeywordHashNode","","YARP/KeywordHashNode.html","","<p>Represents a hash literal without opening and closing braces.\n\n<pre>foo(a: b)\n    ^^^^</pre>\n"],["YARP::KeywordParameterNode","","YARP/KeywordParameterNode.html","","<p>Represents a keyword parameter to a method, block, or lambda definition.\n\n<pre>def a(b:)\n      ^^\nend\n\ndef a(b: ...</pre>\n"],["YARP::KeywordRestParameterNode","","YARP/KeywordRestParameterNode.html","","<p>Represents a keyword rest parameter to a method, block, or lambda definition.\n\n<pre>def a(**b)\n      ^^^\nend</pre>\n"],["YARP::LambdaNode","","YARP/LambdaNode.html","","<p>Represents using a lambda literal (not the lambda method call).\n\n<pre>-&gt;(value) { value * 2 }\n^^^^^^^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::LanguageServer","","YARP/LanguageServer.html","","<p>YARP additionally ships with a language server conforming to the language server protocol. It can be …\n"],["YARP::LexCompat","","YARP/LexCompat.html","","<p>This class is responsible for lexing the source using YARP and then converting those tokens to be compatible …\n"],["YARP::LexCompat::EndContentToken","","YARP/LexCompat/EndContentToken.html","","<p>Ripper doesn’t include the rest of the token in the event, so we need to trim it down to just the …\n"],["YARP::LexCompat::Heredoc","","YARP/LexCompat/Heredoc.html","","<p>A heredoc in this case is a list of tokens that belong to the body of the heredoc that should be appended …\n"],["YARP::LexCompat::Heredoc::DashHeredoc","","YARP/LexCompat/Heredoc/DashHeredoc.html","","<p>Dash heredocs are a little more complicated. They are a list of tokens that need to be split on “\\n” …\n"],["YARP::LexCompat::Heredoc::DedentingHeredoc","","YARP/LexCompat/Heredoc/DedentingHeredoc.html","","<p>Heredocs that are dedenting heredocs are a little more complicated. Ripper outputs on_ignored_sp tokens …\n"],["YARP::LexCompat::Heredoc::PlainHeredoc","","YARP/LexCompat/Heredoc/PlainHeredoc.html","","<p>Heredocs that are no dash or tilde heredocs are just a list of tokens. We need to keep them around so …\n"],["YARP::LexCompat::IdentToken","","YARP/LexCompat/IdentToken.html","","<p>Ident tokens for the most part are exactly the same, except sometimes we know an ident is a local when …\n"],["YARP::LexCompat::IgnoreStateToken","","YARP/LexCompat/IgnoreStateToken.html","","<p>Tokens where state should be ignored used for :on_comment, :on_heredoc_end, :on_embexpr_end\n"],["YARP::LexCompat::IgnoredNewlineToken","","YARP/LexCompat/IgnoredNewlineToken.html","","<p>Ignored newlines can occasionally have a LABEL state attached to them, so we compare the state differently …\n"],["YARP::LexCompat::ParamToken","","YARP/LexCompat/ParamToken.html","","<p>If we have an identifier that follows a method name like:\n\n<pre>def foo bar</pre>\n<p>then Ripper will mark bar as END|LABEL …\n"],["YARP::LexCompat::Token","","YARP/LexCompat/Token.html","","<p>When we produce tokens, we produce the same arrays that Ripper does. However, we add a couple of convenience …\n"],["YARP::LibRubyParser","","YARP/LibRubyParser.html","",""],["YARP::LibRubyParser::YPBuffer","","YARP/LibRubyParser/YPBuffer.html","","<p>This object represents a yp_buffer_t. We only use it as an opaque pointer, so it doesn’t need to …\n"],["YARP::LibRubyParser::YPString","","YARP/LibRubyParser/YPString.html","","<p>This object represents a yp_string_t. We only use it as an opaque pointer, so it doesn’t have to …\n"],["YARP::LocalVariableAndWriteNode","","YARP/LocalVariableAndWriteNode.html","","<p>Represents the use of the ‘&amp;&amp;=` operator for assignment to a local variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">target</span> <span class=\"ruby-operator\">&amp;&amp;=</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::LocalVariableOperatorWriteNode","","YARP/LocalVariableOperatorWriteNode.html","","<p>Represents assigning to a local variable using an operator that isn’t ‘=`.\n\n<pre>target += value\n^^^^^^^^^^^^^^^</pre>\n"],["YARP::LocalVariableOrWriteNode","","YARP/LocalVariableOrWriteNode.html","","<p>Represents the use of the ‘||=` operator for assignment to a local variable.\n\n<pre>target ||= value\n^^^^^^^^^^^^^^^^</pre>\n"],["YARP::LocalVariableReadNode","","YARP/LocalVariableReadNode.html","","<p>Represents reading a local variable. Note that this requires that a local variable of the same name has …\n"],["YARP::LocalVariableTargetNode","","YARP/LocalVariableTargetNode.html","","<p>Represents writing to a local variable in a context that doesn’t have an explicit value.\n\n<pre>foo, bar ...</pre>\n"],["YARP::LocalVariableWriteNode","","YARP/LocalVariableWriteNode.html","","<p>Represents writing to a local variable.\n\n<pre>foo = 1\n^^^^^^^</pre>\n"],["YARP::Location","","YARP/Location.html","","<p>This represents a location in the source.\n"],["YARP::LoopFlags","","YARP/LoopFlags.html","",""],["YARP::MatchLastLineNode","","YARP/MatchLastLineNode.html","","<p>Represents a regular expression literal used in the predicate of a conditional to implicitly match against …\n"],["YARP::MatchPredicateNode","","YARP/MatchPredicateNode.html","","<p>Represents the use of the modifier ‘in` operator.\n\n<pre>foo in bar\n^^^^^^^^^^</pre>\n"],["YARP::MatchRequiredNode","","YARP/MatchRequiredNode.html","","<p>Represents the use of the ‘=&gt;` operator.\n\n<pre>foo =&gt; bar\n^^^^^^^^^^</pre>\n"],["YARP::MissingNode","","YARP/MissingNode.html","","<p>Represents a node that is missing from the source and results in a syntax error.\n"],["YARP::ModuleNode","","YARP/ModuleNode.html","","<p>Represents a module declaration involving the ‘module` keyword.\n\n<pre>module Foo end\n^^^^^^^^^^^^^^</pre>\n"],["YARP::MultiTargetNode","","YARP/MultiTargetNode.html","","<p>Represents a multi-target expression.\n\n<pre>a, b, c = 1, 2, 3\n^^^^^^^</pre>\n"],["YARP::MultiWriteNode","","YARP/MultiWriteNode.html","","<p>Represents a write to a multi-target expression.\n\n<pre>a, b, c = 1, 2, 3\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::MutationVisitor","","YARP/MutationVisitor.html","","<p>This visitor walks through the tree and copies each node as it is being visited. This is useful for consumers …\n"],["YARP::NextNode","","YARP/NextNode.html","","<p>Represents the use of the ‘next` keyword.\n\n<pre>next 1\n^^^^^^</pre>\n"],["YARP::NilNode","","YARP/NilNode.html","","<p>Represents the use of the ‘nil` keyword.\n\n<pre>nil\n^^^</pre>\n"],["YARP::NoKeywordsParameterNode","","YARP/NoKeywordsParameterNode.html","","<p>Represents the use of ‘**nil` inside method arguments.\n\n<pre>def a(**nil)\n      ^^^^^\nend</pre>\n"],["YARP::Node","","YARP/Node.html","","<p>This represents a node in the tree.\n"],["YARP::NodeInspector","","YARP/NodeInspector.html","","<p>This object is responsible for generating the output for the inspect method implementations of child …\n"],["YARP::NumberedReferenceReadNode","","YARP/NumberedReferenceReadNode.html","","<p>Represents reading a numbered reference to a capture in the previous match.\n\n<pre>$1\n^^</pre>\n"],["YARP::OptionalParameterNode","","YARP/OptionalParameterNode.html","","<p>Represents an optional parameter to a method, block, or lambda definition.\n\n<pre>def a(b = 1)\n      ^^^^^\nend</pre>\n"],["YARP::OrNode","","YARP/OrNode.html","","<p>Represents the use of the ‘||` operator or the `or` keyword.\n\n<pre>left or right\n^^^^^^^^^^^^^</pre>\n"],["YARP::Pack","","YARP/Pack.html","",""],["YARP::Pack::Directive","","YARP/Pack/Directive.html","",""],["YARP::Pack::Format","","YARP/Pack/Format.html","",""],["YARP::ParametersNode","","YARP/ParametersNode.html","","<p>Represents the list of parameters on a method, block, or lambda definition.\n\n<pre>def a(b, c, d)\n      ^^^^^^^ ...</pre>\n"],["YARP::ParenthesesNode","","YARP/ParenthesesNode.html","","<p>Represents a parenthesized expression\n\n<pre>(10 + 34)\n^^^^^^^^^</pre>\n"],["YARP::ParseError","","YARP/ParseError.html","","<p>This represents an error that was encountered during parsing.\n"],["YARP::ParseResult","","YARP/ParseResult.html","","<p>This represents the result of a call to ::parse or ::parse_file. It contains the AST, any comments that …\n"],["YARP::ParseResult::Comments","","YARP/ParseResult/Comments.html","","<p>When we’ve parsed the source, we have both the syntax tree and the list of comments that we found …\n"],["YARP::ParseResult::Comments::LocationTarget","","YARP/ParseResult/Comments/LocationTarget.html","","<p>A target for attaching comments that is based on a location field on a node. For example, the ‘end` token …\n"],["YARP::ParseResult::Comments::NodeTarget","","YARP/ParseResult/Comments/NodeTarget.html","","<p>A target for attaching comments that is based on a specific node’s location.\n"],["YARP::ParseResult::Newlines","","YARP/ParseResult/Newlines.html","","<p>The :line tracepoint event gets fired whenever the Ruby VM encounters an expression on a new line. The …\n"],["YARP::ParseWarning","","YARP/ParseWarning.html","","<p>This represents a warning that was encountered during parsing.\n"],["YARP::Pattern","","YARP/Pattern.html","","<p>A pattern is an object that wraps a Ruby pattern matching expression. The expression would normally be …\n"],["YARP::Pattern::CompilationError","","YARP/Pattern/CompilationError.html","","<p>Raised when the query given to a pattern is either invalid Ruby syntax or is using syntax that we don’t …\n"],["YARP::PinnedExpressionNode","","YARP/PinnedExpressionNode.html","","<p>Represents the use of the ‘^` operator for pinning an expression in a pattern matching expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">foo</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::PinnedVariableNode","","YARP/PinnedVariableNode.html","","<p>Represents the use of the ‘^` operator for pinning a variable in a pattern matching expression.\n\n<pre>foo in ...</pre>\n"],["YARP::PostExecutionNode","","YARP/PostExecutionNode.html","","<p>Represents the use of the ‘END` keyword.\n\n<pre>END { foo }\n^^^^^^^^^^^</pre>\n"],["YARP::PreExecutionNode","","YARP/PreExecutionNode.html","","<p>Represents the use of the ‘BEGIN` keyword.\n\n<pre>BEGIN { foo }\n^^^^^^^^^^^^^</pre>\n"],["YARP::ProgramNode","","YARP/ProgramNode.html","","<p>The top level node of any parse tree.\n"],["YARP::RangeFlags","","YARP/RangeFlags.html","",""],["YARP::RangeNode","","YARP/RangeNode.html","","<p>Represents the use of the ‘..` or `…` operators.\n\n<pre>1..2\n^^^^\n\nc if a =~ /left/ ... b =~ /right/\n     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::RationalNode","","YARP/RationalNode.html","","<p>Represents a rational number literal.\n\n<pre>1.0r\n^^^^</pre>\n"],["YARP::RedoNode","","YARP/RedoNode.html","","<p>Represents the use of the ‘redo` keyword.\n\n<pre>redo\n^^^^</pre>\n"],["YARP::RegularExpressionFlags","","YARP/RegularExpressionFlags.html","",""],["YARP::RegularExpressionNode","","YARP/RegularExpressionNode.html","","<p>Represents a regular expression literal with no interpolation.\n\n<pre>/foo/i\n^^^^^^</pre>\n"],["YARP::RequiredDestructuredParameterNode","","YARP/RequiredDestructuredParameterNode.html","","<p>Represents a destructured required parameter node.\n\n<pre>def foo((bar, baz))\n        ^^^^^^^^^^\nend</pre>\n"],["YARP::RequiredParameterNode","","YARP/RequiredParameterNode.html","","<p>Represents a required parameter to a method, block, or lambda definition.\n\n<pre>def a(b)\n      ^\nend</pre>\n"],["YARP::RescueModifierNode","","YARP/RescueModifierNode.html","","<p>Represents an expression modified with a rescue.\n\n<pre>foo rescue nil\n^^^^^^^^^^^^^^</pre>\n"],["YARP::RescueNode","","YARP/RescueNode.html","","<p>Represents a rescue statement.\n\n<pre>begin\nrescue Foo, *splat, Bar =&gt; ex\n^^^^^^\n  foo\nend</pre>\n<p>‘Foo, *splat, Bar` …\n"],["YARP::RestParameterNode","","YARP/RestParameterNode.html","","<p>Represents a rest parameter to a method, block, or lambda definition.\n\n<pre>def a(*b)\n      ^^\nend</pre>\n"],["YARP::RetryNode","","YARP/RetryNode.html","","<p>Represents the use of the ‘retry` keyword.\n\n<pre>retry\n^^^^^</pre>\n"],["YARP::ReturnNode","","YARP/ReturnNode.html","","<p>Represents the use of the ‘return` keyword.\n\n<pre>return 1\n^^^^^^^^</pre>\n"],["YARP::RipperCompat","","YARP/RipperCompat.html","","<p>This class is meant to provide a compatibility layer between YARP and Ripper. It functions by parsing …\n"],["YARP::RipperCompat::SexpBuilder","","YARP/RipperCompat/SexpBuilder.html","","<p>This class mirrors the ::Ripper::SexpBuilder subclass of ::Ripper that returns the arrays of [type, *children]. …\n"],["YARP::RipperCompat::SexpBuilderPP","","YARP/RipperCompat/SexpBuilderPP.html","","<p>This class mirrors the ::Ripper::SexpBuilderPP subclass of ::Ripper that returns the same values as  …\n"],["YARP::SelfNode","","YARP/SelfNode.html","","<p>Represents the ‘self` keyword.\n\n<pre>self\n^^^^</pre>\n"],["YARP::Serialize","","YARP/Serialize.html","",""],["YARP::Serialize::Loader","","YARP/Serialize/Loader.html","",""],["YARP::SingletonClassNode","","YARP/SingletonClassNode.html","","<p>Represents a singleton class declaration involving the ‘class` keyword.\n\n<pre>class &lt;&lt; self end\n^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::Source","","YARP/Source.html","","<p>This represents a source of Ruby code that has been parsed. It is used in conjunction with locations …\n"],["YARP::SourceEncodingNode","","YARP/SourceEncodingNode.html","","<p>Represents the use of the ‘__ENCODING__` keyword.\n\n<pre>__ENCODING__\n^^^^^^^^^^^^</pre>\n"],["YARP::SourceFileNode","","YARP/SourceFileNode.html","","<p>Represents the use of the ‘__FILE__` keyword.\n\n<pre>__FILE__\n^^^^^^^^</pre>\n"],["YARP::SourceLineNode","","YARP/SourceLineNode.html","","<p>Represents the use of the ‘__LINE__` keyword.\n\n<pre>__LINE__\n^^^^^^^^</pre>\n"],["YARP::SplatNode","","YARP/SplatNode.html","","<p>Represents the use of the splat operator.\n\n<pre>[*a]\n ^^</pre>\n"],["YARP::StatementsNode","","YARP/StatementsNode.html","","<p>Represents a set of statements contained within some scope.\n\n<pre>foo; bar; baz\n^^^^^^^^^^^^^</pre>\n"],["YARP::StringConcatNode","","YARP/StringConcatNode.html","","<p>Represents the use of compile-time string concatenation.\n\n<pre>&quot;foo&quot; &quot;bar&quot;\n^^^^^^^^^^^</pre>\n"],["YARP::StringNode","","YARP/StringNode.html","","<p>Represents a string literal, a string contained within a ‘%w` list, or plain string content within an …\n"],["YARP::SuperNode","","YARP/SuperNode.html","","<p>Represents the use of the ‘super` keyword with parentheses or arguments.\n\n<pre>super()\n^^^^^^^\n\nsuper foo, bar ...</pre>\n"],["YARP::SymbolNode","","YARP/SymbolNode.html","","<p>Represents a symbol literal or a symbol contained within a ‘%i` list.\n\n<pre>:foo\n^^^^\n\n%i[foo]\n   ^^^</pre>\n"],["YARP::Token","","YARP/Token.html","","<p>This represents a token from the Ruby source.\n"],["YARP::TrueNode","","YARP/TrueNode.html","","<p>Represents the use of the literal ‘true` keyword.\n\n<pre>true\n^^^^</pre>\n"],["YARP::UndefNode","","YARP/UndefNode.html","","<p>Represents the use of the ‘undef` keyword.\n\n<pre>undef :foo, :bar, :baz\n^^^^^^^^^^^^^^^^^^^^^^</pre>\n"],["YARP::UnlessNode","","YARP/UnlessNode.html","","<p>Represents the use of the ‘unless` keyword, either in the block form or the modifier form.\n\n<pre>bar unless ...</pre>\n"],["YARP::UntilNode","","YARP/UntilNode.html","","<p>Represents the use of the ‘until` keyword, either in the block form or the modifier form.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">bar</span> <span class=\"ruby-keyword\">until</span> <span class=\"ruby-identifier\">foo</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::Visitor","","YARP/Visitor.html","",""],["YARP::WhenNode","","YARP/WhenNode.html","","<p>Represents the use of the ‘when` keyword within a case statement.\n\n<pre>case true\nwhen true\n^^^^^^^^^\nend</pre>\n"],["YARP::WhileNode","","YARP/WhileNode.html","","<p>Represents the use of the ‘while` keyword, either in the block form or the modifier form.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">bar</span> <span class=\"ruby-keyword\">while</span> <span class=\"ruby-identifier\">foo</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["YARP::XStringNode","","YARP/XStringNode.html","","<p>Represents an xstring literal with no interpolation.\n\n<pre>`foo`\n^^^^^</pre>\n"],["YARP::YieldNode","","YARP/YieldNode.html","","<p>Represents the use of the ‘yield` keyword.\n\n<pre>yield 1\n^^^^^^^</pre>\n"],["<<","YARP::LexCompat::Heredoc::DashHeredoc","YARP/LexCompat/Heredoc/DashHeredoc.html#method-i-3C-3C","(token)",""],["<<","YARP::LexCompat::Heredoc::DedentingHeredoc","YARP/LexCompat/Heredoc/DedentingHeredoc.html#method-i-3C-3C","(token)","<p>As tokens are coming in, we track the minimum amount of common leading whitespace on plain string content …\n"],["<<","YARP::LexCompat::Heredoc::PlainHeredoc","YARP/LexCompat/Heredoc/PlainHeredoc.html#method-i-3C-3C","(token)",""],["<<","YARP::NodeInspector","YARP/NodeInspector.html#method-i-3C-3C","(line)","<p>Appends a line to the output with the current prefix.\n"],["<<","YARP::ParseResult::Comments::LocationTarget","YARP/ParseResult/Comments/LocationTarget.html#method-i-3C-3C","(comment)",""],["<<","YARP::ParseResult::Comments::NodeTarget","YARP/ParseResult/Comments/NodeTarget.html#method-i-3C-3C","(comment)",""],["==","YARP::LexCompat::EndContentToken","YARP/LexCompat/EndContentToken.html#method-i-3D-3D","(other)",""],["==","YARP::LexCompat::IdentToken","YARP/LexCompat/IdentToken.html#method-i-3D-3D","(other)",""],["==","YARP::LexCompat::IgnoreStateToken","YARP/LexCompat/IgnoreStateToken.html#method-i-3D-3D","(other)",""],["==","YARP::LexCompat::IgnoredNewlineToken","YARP/LexCompat/IgnoredNewlineToken.html#method-i-3D-3D","(other)",""],["==","YARP::LexCompat::ParamToken","YARP/LexCompat/ParamToken.html#method-i-3D-3D","(other)",""],["==","YARP::Location","YARP/Location.html#method-i-3D-3D","(other)",""],["==","YARP::Token","YARP/Token.html#method-i-3D-3D","(other)",""],["AliasGlobalVariableNode","YARP::DSL","YARP/DSL.html#method-i-AliasGlobalVariableNode","(new_name, old_name, keyword_loc, location = Location())","<p>Create a new AliasGlobalVariableNode node\n"],["AliasMethodNode","YARP::DSL","YARP/DSL.html#method-i-AliasMethodNode","(new_name, old_name, keyword_loc, location = Location())","<p>Create a new AliasMethodNode node\n"],["AlternationPatternNode","YARP::DSL","YARP/DSL.html#method-i-AlternationPatternNode","(left, right, operator_loc, location = Location())","<p>Create a new AlternationPatternNode node\n"],["AndNode","YARP::DSL","YARP/DSL.html#method-i-AndNode","(left, right, operator_loc, location = Location())","<p>Create a new AndNode node\n"],["ArgumentsNode","YARP::DSL","YARP/DSL.html#method-i-ArgumentsNode","(arguments, location = Location())","<p>Create a new ArgumentsNode node\n"],["ArrayNode","YARP::DSL","YARP/DSL.html#method-i-ArrayNode","(elements, opening_loc, closing_loc, location = Location())","<p>Create a new ArrayNode node\n"],["ArrayPatternNode","YARP::DSL","YARP/DSL.html#method-i-ArrayPatternNode","(constant, requireds, rest, posts, opening_loc, closing_loc, location = Location())","<p>Create a new ArrayPatternNode node\n"],["AssocNode","YARP::DSL","YARP/DSL.html#method-i-AssocNode","(key, value, operator_loc, location = Location())","<p>Create a new AssocNode node\n"],["AssocSplatNode","YARP::DSL","YARP/DSL.html#method-i-AssocSplatNode","(value, operator_loc, location = Location())","<p>Create a new AssocSplatNode node\n"],["BackReferenceReadNode","YARP::DSL","YARP/DSL.html#method-i-BackReferenceReadNode","(location = Location())","<p>Create a new BackReferenceReadNode node\n"],["BeginNode","YARP::DSL","YARP/DSL.html#method-i-BeginNode","(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location = Location())","<p>Create a new BeginNode node\n"],["BlockArgumentNode","YARP::DSL","YARP/DSL.html#method-i-BlockArgumentNode","(expression, operator_loc, location = Location())","<p>Create a new BlockArgumentNode node\n"],["BlockLocalVariableNode","YARP::DSL","YARP/DSL.html#method-i-BlockLocalVariableNode","(name, location = Location())","<p>Create a new BlockLocalVariableNode node\n"],["BlockNode","YARP::DSL","YARP/DSL.html#method-i-BlockNode","(locals, parameters, body, opening_loc, closing_loc, location = Location())","<p>Create a new BlockNode node\n"],["BlockParameterNode","YARP::DSL","YARP/DSL.html#method-i-BlockParameterNode","(name, name_loc, operator_loc, location = Location())","<p>Create a new BlockParameterNode node\n"],["BlockParametersNode","YARP::DSL","YARP/DSL.html#method-i-BlockParametersNode","(parameters, locals, opening_loc, closing_loc, location = Location())","<p>Create a new BlockParametersNode node\n"],["BreakNode","YARP::DSL","YARP/DSL.html#method-i-BreakNode","(arguments, keyword_loc, location = Location())","<p>Create a new BreakNode node\n"],["CallAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-CallAndWriteNode","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location = Location())","<p>Create a new CallAndWriteNode node\n"],["CallNode","YARP::DSL","YARP/DSL.html#method-i-CallNode","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, block, flags, name, location = Location())","<p>Create a new CallNode node\n"],["CallOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-CallOperatorWriteNode","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator, operator_loc, value, location = Location())","<p>Create a new CallOperatorWriteNode node\n"],["CallOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-CallOrWriteNode","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location = Location())","<p>Create a new CallOrWriteNode node\n"],["CapturePatternNode","YARP::DSL","YARP/DSL.html#method-i-CapturePatternNode","(value, target, operator_loc, location = Location())","<p>Create a new CapturePatternNode node\n"],["CaseNode","YARP::DSL","YARP/DSL.html#method-i-CaseNode","(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location = Location())","<p>Create a new CaseNode node\n"],["ClassNode","YARP::DSL","YARP/DSL.html#method-i-ClassNode","(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location = Location())","<p>Create a new ClassNode node\n"],["ClassVariableAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-ClassVariableAndWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new ClassVariableAndWriteNode node\n"],["ClassVariableOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-ClassVariableOperatorWriteNode","(name, name_loc, operator_loc, value, operator, location = Location())","<p>Create a new ClassVariableOperatorWriteNode node\n"],["ClassVariableOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-ClassVariableOrWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new ClassVariableOrWriteNode node\n"],["ClassVariableReadNode","YARP::DSL","YARP/DSL.html#method-i-ClassVariableReadNode","(name, location = Location())","<p>Create a new ClassVariableReadNode node\n"],["ClassVariableTargetNode","YARP::DSL","YARP/DSL.html#method-i-ClassVariableTargetNode","(name, location = Location())","<p>Create a new ClassVariableTargetNode node\n"],["ClassVariableWriteNode","YARP::DSL","YARP/DSL.html#method-i-ClassVariableWriteNode","(name, name_loc, value, operator_loc, location = Location())","<p>Create a new ClassVariableWriteNode node\n"],["ConstantAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantAndWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new ConstantAndWriteNode node\n"],["ConstantOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantOperatorWriteNode","(name, name_loc, operator_loc, value, operator, location = Location())","<p>Create a new ConstantOperatorWriteNode node\n"],["ConstantOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantOrWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new ConstantOrWriteNode node\n"],["ConstantPathAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantPathAndWriteNode","(target, operator_loc, value, location = Location())","<p>Create a new ConstantPathAndWriteNode node\n"],["ConstantPathNode","YARP::DSL","YARP/DSL.html#method-i-ConstantPathNode","(parent, child, delimiter_loc, location = Location())","<p>Create a new ConstantPathNode node\n"],["ConstantPathOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantPathOperatorWriteNode","(target, operator_loc, value, operator, location = Location())","<p>Create a new ConstantPathOperatorWriteNode node\n"],["ConstantPathOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantPathOrWriteNode","(target, operator_loc, value, location = Location())","<p>Create a new ConstantPathOrWriteNode node\n"],["ConstantPathTargetNode","YARP::DSL","YARP/DSL.html#method-i-ConstantPathTargetNode","(parent, child, delimiter_loc, location = Location())","<p>Create a new ConstantPathTargetNode node\n"],["ConstantPathWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantPathWriteNode","(target, operator_loc, value, location = Location())","<p>Create a new ConstantPathWriteNode node\n"],["ConstantReadNode","YARP::DSL","YARP/DSL.html#method-i-ConstantReadNode","(name, location = Location())","<p>Create a new ConstantReadNode node\n"],["ConstantTargetNode","YARP::DSL","YARP/DSL.html#method-i-ConstantTargetNode","(name, location = Location())","<p>Create a new ConstantTargetNode node\n"],["ConstantWriteNode","YARP::DSL","YARP/DSL.html#method-i-ConstantWriteNode","(name, name_loc, value, operator_loc, location = Location())","<p>Create a new ConstantWriteNode node\n"],["DefNode","YARP::DSL","YARP/DSL.html#method-i-DefNode","(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location = Location())","<p>Create a new DefNode node\n"],["DefinedNode","YARP::DSL","YARP/DSL.html#method-i-DefinedNode","(lparen_loc, value, rparen_loc, keyword_loc, location = Location())","<p>Create a new DefinedNode node\n"],["ElseNode","YARP::DSL","YARP/DSL.html#method-i-ElseNode","(else_keyword_loc, statements, end_keyword_loc, location = Location())","<p>Create a new ElseNode node\n"],["EmbeddedStatementsNode","YARP::DSL","YARP/DSL.html#method-i-EmbeddedStatementsNode","(opening_loc, statements, closing_loc, location = Location())","<p>Create a new EmbeddedStatementsNode node\n"],["EmbeddedVariableNode","YARP::DSL","YARP/DSL.html#method-i-EmbeddedVariableNode","(operator_loc, variable, location = Location())","<p>Create a new EmbeddedVariableNode node\n"],["EnsureNode","YARP::DSL","YARP/DSL.html#method-i-EnsureNode","(ensure_keyword_loc, statements, end_keyword_loc, location = Location())","<p>Create a new EnsureNode node\n"],["FalseNode","YARP::DSL","YARP/DSL.html#method-i-FalseNode","(location = Location())","<p>Create a new FalseNode node\n"],["FindPatternNode","YARP::DSL","YARP/DSL.html#method-i-FindPatternNode","(constant, left, requireds, right, opening_loc, closing_loc, location = Location())","<p>Create a new FindPatternNode node\n"],["FlipFlopNode","YARP::DSL","YARP/DSL.html#method-i-FlipFlopNode","(left, right, operator_loc, flags, location = Location())","<p>Create a new FlipFlopNode node\n"],["FloatNode","YARP::DSL","YARP/DSL.html#method-i-FloatNode","(location = Location())","<p>Create a new FloatNode node\n"],["ForNode","YARP::DSL","YARP/DSL.html#method-i-ForNode","(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location = Location())","<p>Create a new ForNode node\n"],["ForwardingArgumentsNode","YARP::DSL","YARP/DSL.html#method-i-ForwardingArgumentsNode","(location = Location())","<p>Create a new ForwardingArgumentsNode node\n"],["ForwardingParameterNode","YARP::DSL","YARP/DSL.html#method-i-ForwardingParameterNode","(location = Location())","<p>Create a new ForwardingParameterNode node\n"],["ForwardingSuperNode","YARP::DSL","YARP/DSL.html#method-i-ForwardingSuperNode","(block, location = Location())","<p>Create a new ForwardingSuperNode node\n"],["GlobalVariableAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-GlobalVariableAndWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new GlobalVariableAndWriteNode node\n"],["GlobalVariableOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-GlobalVariableOperatorWriteNode","(name, name_loc, operator_loc, value, operator, location = Location())","<p>Create a new GlobalVariableOperatorWriteNode node\n"],["GlobalVariableOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-GlobalVariableOrWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new GlobalVariableOrWriteNode node\n"],["GlobalVariableReadNode","YARP::DSL","YARP/DSL.html#method-i-GlobalVariableReadNode","(name, location = Location())","<p>Create a new GlobalVariableReadNode node\n"],["GlobalVariableTargetNode","YARP::DSL","YARP/DSL.html#method-i-GlobalVariableTargetNode","(name, location = Location())","<p>Create a new GlobalVariableTargetNode node\n"],["GlobalVariableWriteNode","YARP::DSL","YARP/DSL.html#method-i-GlobalVariableWriteNode","(name, name_loc, value, operator_loc, location = Location())","<p>Create a new GlobalVariableWriteNode node\n"],["HashNode","YARP::DSL","YARP/DSL.html#method-i-HashNode","(opening_loc, elements, closing_loc, location = Location())","<p>Create a new HashNode node\n"],["HashPatternNode","YARP::DSL","YARP/DSL.html#method-i-HashPatternNode","(constant, assocs, kwrest, opening_loc, closing_loc, location = Location())","<p>Create a new HashPatternNode node\n"],["IfNode","YARP::DSL","YARP/DSL.html#method-i-IfNode","(if_keyword_loc, predicate, statements, consequent, end_keyword_loc, location = Location())","<p>Create a new IfNode node\n"],["ImaginaryNode","YARP::DSL","YARP/DSL.html#method-i-ImaginaryNode","(numeric, location = Location())","<p>Create a new ImaginaryNode node\n"],["InNode","YARP::DSL","YARP/DSL.html#method-i-InNode","(pattern, statements, in_loc, then_loc, location = Location())","<p>Create a new InNode node\n"],["InstanceVariableAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-InstanceVariableAndWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new InstanceVariableAndWriteNode node\n"],["InstanceVariableOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-InstanceVariableOperatorWriteNode","(name, name_loc, operator_loc, value, operator, location = Location())","<p>Create a new InstanceVariableOperatorWriteNode node\n"],["InstanceVariableOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-InstanceVariableOrWriteNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new InstanceVariableOrWriteNode node\n"],["InstanceVariableReadNode","YARP::DSL","YARP/DSL.html#method-i-InstanceVariableReadNode","(name, location = Location())","<p>Create a new InstanceVariableReadNode node\n"],["InstanceVariableTargetNode","YARP::DSL","YARP/DSL.html#method-i-InstanceVariableTargetNode","(name, location = Location())","<p>Create a new InstanceVariableTargetNode node\n"],["InstanceVariableWriteNode","YARP::DSL","YARP/DSL.html#method-i-InstanceVariableWriteNode","(name, name_loc, value, operator_loc, location = Location())","<p>Create a new InstanceVariableWriteNode node\n"],["IntegerNode","YARP::DSL","YARP/DSL.html#method-i-IntegerNode","(flags, location = Location())","<p>Create a new IntegerNode node\n"],["InterpolatedMatchLastLineNode","YARP::DSL","YARP/DSL.html#method-i-InterpolatedMatchLastLineNode","(opening_loc, parts, closing_loc, flags, location = Location())","<p>Create a new InterpolatedMatchLastLineNode node\n"],["InterpolatedRegularExpressionNode","YARP::DSL","YARP/DSL.html#method-i-InterpolatedRegularExpressionNode","(opening_loc, parts, closing_loc, flags, location = Location())","<p>Create a new InterpolatedRegularExpressionNode node\n"],["InterpolatedStringNode","YARP::DSL","YARP/DSL.html#method-i-InterpolatedStringNode","(opening_loc, parts, closing_loc, location = Location())","<p>Create a new InterpolatedStringNode node\n"],["InterpolatedSymbolNode","YARP::DSL","YARP/DSL.html#method-i-InterpolatedSymbolNode","(opening_loc, parts, closing_loc, location = Location())","<p>Create a new InterpolatedSymbolNode node\n"],["InterpolatedXStringNode","YARP::DSL","YARP/DSL.html#method-i-InterpolatedXStringNode","(opening_loc, parts, closing_loc, location = Location())","<p>Create a new InterpolatedXStringNode node\n"],["KeywordHashNode","YARP::DSL","YARP/DSL.html#method-i-KeywordHashNode","(elements, location = Location())","<p>Create a new KeywordHashNode node\n"],["KeywordParameterNode","YARP::DSL","YARP/DSL.html#method-i-KeywordParameterNode","(name, name_loc, value, location = Location())","<p>Create a new KeywordParameterNode node\n"],["KeywordRestParameterNode","YARP::DSL","YARP/DSL.html#method-i-KeywordRestParameterNode","(name, name_loc, operator_loc, location = Location())","<p>Create a new KeywordRestParameterNode node\n"],["LambdaNode","YARP::DSL","YARP/DSL.html#method-i-LambdaNode","(locals, operator_loc, opening_loc, closing_loc, parameters, body, location = Location())","<p>Create a new LambdaNode node\n"],["LocalVariableAndWriteNode","YARP::DSL","YARP/DSL.html#method-i-LocalVariableAndWriteNode","(name_loc, operator_loc, value, name, depth, location = Location())","<p>Create a new LocalVariableAndWriteNode node\n"],["LocalVariableOperatorWriteNode","YARP::DSL","YARP/DSL.html#method-i-LocalVariableOperatorWriteNode","(name_loc, operator_loc, value, name, operator, depth, location = Location())","<p>Create a new LocalVariableOperatorWriteNode node\n"],["LocalVariableOrWriteNode","YARP::DSL","YARP/DSL.html#method-i-LocalVariableOrWriteNode","(name_loc, operator_loc, value, name, depth, location = Location())","<p>Create a new LocalVariableOrWriteNode node\n"],["LocalVariableReadNode","YARP::DSL","YARP/DSL.html#method-i-LocalVariableReadNode","(name, depth, location = Location())","<p>Create a new LocalVariableReadNode node\n"],["LocalVariableTargetNode","YARP::DSL","YARP/DSL.html#method-i-LocalVariableTargetNode","(name, depth, location = Location())","<p>Create a new LocalVariableTargetNode node\n"],["LocalVariableWriteNode","YARP::DSL","YARP/DSL.html#method-i-LocalVariableWriteNode","(name, depth, name_loc, value, operator_loc, location = Location())","<p>Create a new LocalVariableWriteNode node\n"],["Location","YARP::DSL","YARP/DSL.html#method-i-Location","(source = nil, start_offset = 0, length = 0)","<p>Create a new Location object\n"],["MatchLastLineNode","YARP::DSL","YARP/DSL.html#method-i-MatchLastLineNode","(opening_loc, content_loc, closing_loc, unescaped, flags, location = Location())","<p>Create a new MatchLastLineNode node\n"],["MatchPredicateNode","YARP::DSL","YARP/DSL.html#method-i-MatchPredicateNode","(value, pattern, operator_loc, location = Location())","<p>Create a new MatchPredicateNode node\n"],["MatchRequiredNode","YARP::DSL","YARP/DSL.html#method-i-MatchRequiredNode","(value, pattern, operator_loc, location = Location())","<p>Create a new MatchRequiredNode node\n"],["MissingNode","YARP::DSL","YARP/DSL.html#method-i-MissingNode","(location = Location())","<p>Create a new MissingNode node\n"],["ModuleNode","YARP::DSL","YARP/DSL.html#method-i-ModuleNode","(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location = Location())","<p>Create a new ModuleNode node\n"],["MultiTargetNode","YARP::DSL","YARP/DSL.html#method-i-MultiTargetNode","(targets, lparen_loc, rparen_loc, location = Location())","<p>Create a new MultiTargetNode node\n"],["MultiWriteNode","YARP::DSL","YARP/DSL.html#method-i-MultiWriteNode","(targets, lparen_loc, rparen_loc, operator_loc, value, location = Location())","<p>Create a new MultiWriteNode node\n"],["NextNode","YARP::DSL","YARP/DSL.html#method-i-NextNode","(arguments, keyword_loc, location = Location())","<p>Create a new NextNode node\n"],["NilNode","YARP::DSL","YARP/DSL.html#method-i-NilNode","(location = Location())","<p>Create a new NilNode node\n"],["NoKeywordsParameterNode","YARP::DSL","YARP/DSL.html#method-i-NoKeywordsParameterNode","(operator_loc, keyword_loc, location = Location())","<p>Create a new NoKeywordsParameterNode node\n"],["NumberedReferenceReadNode","YARP::DSL","YARP/DSL.html#method-i-NumberedReferenceReadNode","(number, location = Location())","<p>Create a new NumberedReferenceReadNode node\n"],["OptionalParameterNode","YARP::DSL","YARP/DSL.html#method-i-OptionalParameterNode","(name, name_loc, operator_loc, value, location = Location())","<p>Create a new OptionalParameterNode node\n"],["OrNode","YARP::DSL","YARP/DSL.html#method-i-OrNode","(left, right, operator_loc, location = Location())","<p>Create a new OrNode node\n"],["ParametersNode","YARP::DSL","YARP/DSL.html#method-i-ParametersNode","(requireds, optionals, rest, posts, keywords, keyword_rest, block, location = Location())","<p>Create a new ParametersNode node\n"],["ParenthesesNode","YARP::DSL","YARP/DSL.html#method-i-ParenthesesNode","(body, opening_loc, closing_loc, location = Location())","<p>Create a new ParenthesesNode node\n"],["PinnedExpressionNode","YARP::DSL","YARP/DSL.html#method-i-PinnedExpressionNode","(expression, operator_loc, lparen_loc, rparen_loc, location = Location())","<p>Create a new PinnedExpressionNode node\n"],["PinnedVariableNode","YARP::DSL","YARP/DSL.html#method-i-PinnedVariableNode","(variable, operator_loc, location = Location())","<p>Create a new PinnedVariableNode node\n"],["PostExecutionNode","YARP::DSL","YARP/DSL.html#method-i-PostExecutionNode","(statements, keyword_loc, opening_loc, closing_loc, location = Location())","<p>Create a new PostExecutionNode node\n"],["PreExecutionNode","YARP::DSL","YARP/DSL.html#method-i-PreExecutionNode","(statements, keyword_loc, opening_loc, closing_loc, location = Location())","<p>Create a new PreExecutionNode node\n"],["ProgramNode","YARP::DSL","YARP/DSL.html#method-i-ProgramNode","(locals, statements, location = Location())","<p>Create a new ProgramNode node\n"],["RangeNode","YARP::DSL","YARP/DSL.html#method-i-RangeNode","(left, right, operator_loc, flags, location = Location())","<p>Create a new RangeNode node\n"],["RationalNode","YARP::DSL","YARP/DSL.html#method-i-RationalNode","(numeric, location = Location())","<p>Create a new RationalNode node\n"],["RedoNode","YARP::DSL","YARP/DSL.html#method-i-RedoNode","(location = Location())","<p>Create a new RedoNode node\n"],["RegularExpressionNode","YARP::DSL","YARP/DSL.html#method-i-RegularExpressionNode","(opening_loc, content_loc, closing_loc, unescaped, flags, location = Location())","<p>Create a new RegularExpressionNode node\n"],["RequiredDestructuredParameterNode","YARP::DSL","YARP/DSL.html#method-i-RequiredDestructuredParameterNode","(parameters, opening_loc, closing_loc, location = Location())","<p>Create a new RequiredDestructuredParameterNode node\n"],["RequiredParameterNode","YARP::DSL","YARP/DSL.html#method-i-RequiredParameterNode","(name, location = Location())","<p>Create a new RequiredParameterNode node\n"],["RescueModifierNode","YARP::DSL","YARP/DSL.html#method-i-RescueModifierNode","(expression, keyword_loc, rescue_expression, location = Location())","<p>Create a new RescueModifierNode node\n"],["RescueNode","YARP::DSL","YARP/DSL.html#method-i-RescueNode","(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location = Location())","<p>Create a new RescueNode node\n"],["RestParameterNode","YARP::DSL","YARP/DSL.html#method-i-RestParameterNode","(name, name_loc, operator_loc, location = Location())","<p>Create a new RestParameterNode node\n"],["RetryNode","YARP::DSL","YARP/DSL.html#method-i-RetryNode","(location = Location())","<p>Create a new RetryNode node\n"],["ReturnNode","YARP::DSL","YARP/DSL.html#method-i-ReturnNode","(keyword_loc, arguments, location = Location())","<p>Create a new ReturnNode node\n"],["SelfNode","YARP::DSL","YARP/DSL.html#method-i-SelfNode","(location = Location())","<p>Create a new SelfNode node\n"],["SingletonClassNode","YARP::DSL","YARP/DSL.html#method-i-SingletonClassNode","(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location = Location())","<p>Create a new SingletonClassNode node\n"],["SourceEncodingNode","YARP::DSL","YARP/DSL.html#method-i-SourceEncodingNode","(location = Location())","<p>Create a new SourceEncodingNode node\n"],["SourceFileNode","YARP::DSL","YARP/DSL.html#method-i-SourceFileNode","(filepath, location = Location())","<p>Create a new SourceFileNode node\n"],["SourceLineNode","YARP::DSL","YARP/DSL.html#method-i-SourceLineNode","(location = Location())","<p>Create a new SourceLineNode node\n"],["SplatNode","YARP::DSL","YARP/DSL.html#method-i-SplatNode","(operator_loc, expression, location = Location())","<p>Create a new SplatNode node\n"],["StatementsNode","YARP::DSL","YARP/DSL.html#method-i-StatementsNode","(body, location = Location())","<p>Create a new StatementsNode node\n"],["StringConcatNode","YARP::DSL","YARP/DSL.html#method-i-StringConcatNode","(left, right, location = Location())","<p>Create a new StringConcatNode node\n"],["StringNode","YARP::DSL","YARP/DSL.html#method-i-StringNode","(opening_loc, content_loc, closing_loc, unescaped, location = Location())","<p>Create a new StringNode node\n"],["SuperNode","YARP::DSL","YARP/DSL.html#method-i-SuperNode","(keyword_loc, lparen_loc, arguments, rparen_loc, block, location = Location())","<p>Create a new SuperNode node\n"],["SymbolNode","YARP::DSL","YARP/DSL.html#method-i-SymbolNode","(opening_loc, value_loc, closing_loc, unescaped, location = Location())","<p>Create a new SymbolNode node\n"],["TrueNode","YARP::DSL","YARP/DSL.html#method-i-TrueNode","(location = Location())","<p>Create a new TrueNode node\n"],["UndefNode","YARP::DSL","YARP/DSL.html#method-i-UndefNode","(names, keyword_loc, location = Location())","<p>Create a new UndefNode node\n"],["UnlessNode","YARP::DSL","YARP/DSL.html#method-i-UnlessNode","(keyword_loc, predicate, statements, consequent, end_keyword_loc, location = Location())","<p>Create a new UnlessNode node\n"],["UntilNode","YARP::DSL","YARP/DSL.html#method-i-UntilNode","(keyword_loc, closing_loc, predicate, statements, flags, location = Location())","<p>Create a new UntilNode node\n"],["WhenNode","YARP::DSL","YARP/DSL.html#method-i-WhenNode","(keyword_loc, conditions, statements, location = Location())","<p>Create a new WhenNode node\n"],["WhileNode","YARP::DSL","YARP/DSL.html#method-i-WhileNode","(keyword_loc, closing_loc, predicate, statements, flags, location = Location())","<p>Create a new WhileNode node\n"],["XStringNode","YARP::DSL","YARP/DSL.html#method-i-XStringNode","(opening_loc, content_loc, closing_loc, unescaped, location = Location())","<p>Create a new XStringNode node\n"],["YieldNode","YARP::DSL","YARP/DSL.html#method-i-YieldNode","(keyword_loc, lparen_loc, arguments, rparen_loc, location = Location())","<p>Create a new YieldNode node\n"],["_dispatch0","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch0","()",""],["_dispatch1","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch1","(_)",""],["_dispatch2","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch2","(_, _)",""],["_dispatch3","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch3","(_, _, _)",""],["_dispatch4","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch4","(_, _, _, _)",""],["_dispatch5","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch5","(_, _, _, _, _)",""],["_dispatch7","YARP::RipperCompat","YARP/RipperCompat.html#method-i-_dispatch7","(_, _, _, _, _, _, _)",""],["_dispatch_event_new","YARP::RipperCompat::SexpBuilderPP","YARP/RipperCompat/SexpBuilderPP.html#method-i-_dispatch_event_new","()",""],["_dispatch_event_push","YARP::RipperCompat::SexpBuilderPP","YARP/RipperCompat/SexpBuilderPP.html#method-i-_dispatch_event_push","(list, item)",""],["accept","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::AndNode","YARP/AndNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ArrayNode","YARP/ArrayNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::AssocNode","YARP/AssocNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BeginNode","YARP/BeginNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BlockNode","YARP/BlockNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::BreakNode","YARP/BreakNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::CallNode","YARP/CallNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::CaseNode","YARP/CaseNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassNode","YARP/ClassNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::DefNode","YARP/DefNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::DefinedNode","YARP/DefinedNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ElseNode","YARP/ElseNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::EnsureNode","YARP/EnsureNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::FalseNode","YARP/FalseNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::FloatNode","YARP/FloatNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ForNode","YARP/ForNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::HashNode","YARP/HashNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::IfNode","YARP/IfNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InNode","YARP/InNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::IntegerNode","YARP/IntegerNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LambdaNode","YARP/LambdaNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::MissingNode","YARP/MissingNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ModuleNode","YARP/ModuleNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::NextNode","YARP/NextNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::NilNode","YARP/NilNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::OrNode","YARP/OrNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ParametersNode","YARP/ParametersNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ProgramNode","YARP/ProgramNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RangeNode","YARP/RangeNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RationalNode","YARP/RationalNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RedoNode","YARP/RedoNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RescueNode","YARP/RescueNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::RetryNode","YARP/RetryNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::ReturnNode","YARP/ReturnNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SelfNode","YARP/SelfNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SplatNode","YARP/SplatNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::StatementsNode","YARP/StatementsNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::StringNode","YARP/StringNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SuperNode","YARP/SuperNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::SymbolNode","YARP/SymbolNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::TrueNode","YARP/TrueNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::UndefNode","YARP/UndefNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::UnlessNode","YARP/UnlessNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::UntilNode","YARP/UntilNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::WhenNode","YARP/WhenNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::WhileNode","YARP/WhileNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::XStringNode","YARP/XStringNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["accept","YARP::YieldNode","YARP/YieldNode.html#method-i-accept","(visitor)","<p>def accept: (visitor: Visitor) -&gt; void\n"],["ascii_8bit?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-ascii_8bit-3F","()","<p>def ascii_8bit?: () -&gt; bool\n"],["ascii_8bit?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-ascii_8bit-3F","()","<p>def ascii_8bit?: () -&gt; bool\n"],["ascii_8bit?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-ascii_8bit-3F","()","<p>def ascii_8bit?: () -&gt; bool\n"],["ascii_8bit?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-ascii_8bit-3F","()","<p>def ascii_8bit?: () -&gt; bool\n"],["attach!","YARP::ParseResult::Comments","YARP/ParseResult/Comments.html#method-i-attach-21","()",""],["attach_comments!","YARP::ParseResult","YARP/ParseResult.html#method-i-attach_comments-21","()","<p>Attach the list of comments to their respective locations in the tree.\n"],["begin_keyword","YARP::BeginNode","YARP/BeginNode.html#method-i-begin_keyword","()","<p>def begin_keyword: () -&gt; String?\n"],["begin_modifier?","YARP::UntilNode","YARP/UntilNode.html#method-i-begin_modifier-3F","()","<p>def begin_modifier?: () -&gt; bool\n"],["begin_modifier?","YARP::WhileNode","YARP/WhileNode.html#method-i-begin_modifier-3F","()","<p>def begin_modifier?: () -&gt; bool\n"],["binary?","YARP::IntegerNode","YARP/IntegerNode.html#method-i-binary-3F","()","<p>def binary?: () -&gt; bool\n"],["bounds","YARP::RipperCompat","YARP/RipperCompat.html#method-i-bounds","(location)","<p>This method is responsible for updating lineno and column information to reflect the current node.\n<p>This …\n"],["build","YARP::LexCompat::Heredoc","YARP/LexCompat/Heredoc.html#method-c-build","(opening)","<p>Here we will split between the two types of heredocs and return the object that will store their tokens. …\n"],["call_operator","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-call_operator","()","<p>def call_operator: () -&gt; String?\n"],["call_operator","YARP::CallNode","YARP/CallNode.html#method-i-call_operator","()","<p>def call_operator: () -&gt; String?\n"],["call_operator","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-call_operator","()","<p>def call_operator: () -&gt; String?\n"],["call_operator","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-call_operator","()","<p>def call_operator: () -&gt; String?\n"],["capabilities","YARP::LanguageServer","YARP/LanguageServer.html#method-i-capabilities","()","<p>rubocop:enable Layout/LineLength\n"],["case_keyword","YARP::CaseNode","YARP/CaseNode.html#method-i-case_keyword","()","<p>def case_keyword: () -&gt; String\n"],["child_inspector","YARP::NodeInspector","YARP/NodeInspector.html#method-i-child_inspector","(append)","<p>Returns a new inspector that can be used to inspect a child node.\n"],["child_node","YARP::NodeInspector","YARP/NodeInspector.html#method-i-child_node","(node, append)","<p>Generates a string that represents a child node.\n"],["child_nodes","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::AndNode","YARP/AndNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ArrayNode","YARP/ArrayNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::AssocNode","YARP/AssocNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BeginNode","YARP/BeginNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BlockNode","YARP/BlockNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::BreakNode","YARP/BreakNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::CallNode","YARP/CallNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::CaseNode","YARP/CaseNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassNode","YARP/ClassNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::DefNode","YARP/DefNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::DefinedNode","YARP/DefinedNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ElseNode","YARP/ElseNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::EnsureNode","YARP/EnsureNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::FalseNode","YARP/FalseNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::FloatNode","YARP/FloatNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ForNode","YARP/ForNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::HashNode","YARP/HashNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::IfNode","YARP/IfNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InNode","YARP/InNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::IntegerNode","YARP/IntegerNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LambdaNode","YARP/LambdaNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::MissingNode","YARP/MissingNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ModuleNode","YARP/ModuleNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::NextNode","YARP/NextNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::NilNode","YARP/NilNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::OrNode","YARP/OrNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ParametersNode","YARP/ParametersNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ProgramNode","YARP/ProgramNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RangeNode","YARP/RangeNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RationalNode","YARP/RationalNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RedoNode","YARP/RedoNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RescueNode","YARP/RescueNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::RetryNode","YARP/RetryNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::ReturnNode","YARP/ReturnNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SelfNode","YARP/SelfNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SplatNode","YARP/SplatNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::StatementsNode","YARP/StatementsNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::StringNode","YARP/StringNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SuperNode","YARP/SuperNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::SymbolNode","YARP/SymbolNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::TrueNode","YARP/TrueNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::UndefNode","YARP/UndefNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::UnlessNode","YARP/UnlessNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::UntilNode","YARP/UntilNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::WhenNode","YARP/WhenNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::WhileNode","YARP/WhileNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::XStringNode","YARP/XStringNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["child_nodes","YARP::YieldNode","YARP/YieldNode.html#method-i-child_nodes","()","<p>def child_nodes: () -&gt; Array[nil | Node]\n"],["class_keyword","YARP::ClassNode","YARP/ClassNode.html#method-i-class_keyword","()","<p>def class_keyword: () -&gt; String\n"],["class_keyword","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-class_keyword","()","<p>def class_keyword: () -&gt; String\n"],["closing","YARP::ArrayNode","YARP/ArrayNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::BlockNode","YARP/BlockNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::CallNode","YARP/CallNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::HashNode","YARP/HashNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::LambdaNode","YARP/LambdaNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["closing","YARP::StringNode","YARP/StringNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::SymbolNode","YARP/SymbolNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::UntilNode","YARP/UntilNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::WhileNode","YARP/WhileNode.html#method-i-closing","()","<p>def closing: () -&gt; String?\n"],["closing","YARP::XStringNode","YARP/XStringNode.html#method-i-closing","()","<p>def closing: () -&gt; String\n"],["code_actions","YARP::LanguageServer","YARP/LanguageServer.html#method-i-code_actions","(source, diagnostics)",""],["column","YARP::Source","YARP/Source.html#method-i-column","(value)",""],["combine_and","YARP::Pattern","YARP/Pattern.html#method-i-combine_and","(left, right)","<p>Shortcut for combining two procs into one that returns true if both return true.\n"],["combine_or","YARP::Pattern","YARP/Pattern.html#method-i-combine_or","(left, right)","<p>Shortcut for combining two procs into one that returns true if either returns true.\n"],["comment_targets","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::AndNode","YARP/AndNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ArrayNode","YARP/ArrayNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::AssocNode","YARP/AssocNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BeginNode","YARP/BeginNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BlockNode","YARP/BlockNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::BreakNode","YARP/BreakNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::CallNode","YARP/CallNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::CaseNode","YARP/CaseNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassNode","YARP/ClassNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::DefNode","YARP/DefNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::DefinedNode","YARP/DefinedNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ElseNode","YARP/ElseNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::EnsureNode","YARP/EnsureNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::FalseNode","YARP/FalseNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::FloatNode","YARP/FloatNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ForNode","YARP/ForNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::HashNode","YARP/HashNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::IfNode","YARP/IfNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InNode","YARP/InNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::IntegerNode","YARP/IntegerNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LambdaNode","YARP/LambdaNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::MissingNode","YARP/MissingNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ModuleNode","YARP/ModuleNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::NextNode","YARP/NextNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::NilNode","YARP/NilNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::OrNode","YARP/OrNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ParametersNode","YARP/ParametersNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ProgramNode","YARP/ProgramNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RangeNode","YARP/RangeNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RationalNode","YARP/RationalNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RedoNode","YARP/RedoNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RescueNode","YARP/RescueNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::RetryNode","YARP/RetryNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::ReturnNode","YARP/ReturnNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SelfNode","YARP/SelfNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SplatNode","YARP/SplatNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::StatementsNode","YARP/StatementsNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::StringNode","YARP/StringNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SuperNode","YARP/SuperNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::SymbolNode","YARP/SymbolNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::TrueNode","YARP/TrueNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::UndefNode","YARP/UndefNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::UnlessNode","YARP/UnlessNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::UntilNode","YARP/UntilNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::WhenNode","YARP/WhenNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::WhileNode","YARP/WhileNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::XStringNode","YARP/XStringNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["comment_targets","YARP::YieldNode","YARP/YieldNode.html#method-i-comment_targets","()","<p>def comment_targets: () -&gt; Array[Node | Location]\n"],["compile","YARP::Pattern","YARP/Pattern.html#method-i-compile","()",""],["compile_alternation_pattern_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_alternation_pattern_node","(node)","<p>in foo | bar\n"],["compile_array_pattern_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_array_pattern_node","(node)","<p>in [foo, bar, baz]\n"],["compile_constant_path_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_constant_path_node","(node)","<p>in YARP::ConstantReadNode\n"],["compile_constant_read_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_constant_read_node","(node)","<p>in ConstantReadNode in String\n"],["compile_error","YARP::Pattern","YARP/Pattern.html#method-i-compile_error","(node)","<p>Raise an error because the given node is not supported.\n"],["compile_hash_pattern_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_hash_pattern_node","(node)","<p>in InstanceVariableReadNode[name: Symbol] in { name: Symbol }\n"],["compile_nil_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_nil_node","(node)","<p>in nil\n"],["compile_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_node","(node)","<p>Compile any kind of node. Dispatch out to the individual compilation methods based on the type of node. …\n"],["compile_regular_expression_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_regular_expression_node","(node)","<p>in /foo/\n"],["compile_string_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_string_node","(node)","<p>in “” in “foo”\n"],["compile_symbol_node","YARP::Pattern","YARP/Pattern.html#method-i-compile_symbol_node","(node)","<p>in :+ in :foo\n"],["compute_offsets","YARP::Source","YARP/Source.html#method-i-compute_offsets","(code)",""],["content","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-content","()","<p>def content: () -&gt; String\n"],["content","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-content","()","<p>def content: () -&gt; String\n"],["content","YARP::StringNode","YARP/StringNode.html#method-i-content","()","<p>def content: () -&gt; String\n"],["content","YARP::XStringNode","YARP/XStringNode.html#method-i-content","()","<p>def content: () -&gt; String\n"],["copy","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; AliasGlobalVariableNode\n"],["copy","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; AliasMethodNode\n"],["copy","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; AlternationPatternNode\n"],["copy","YARP::AndNode","YARP/AndNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; AndNode\n"],["copy","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ArgumentsNode\n"],["copy","YARP::ArrayNode","YARP/ArrayNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ArrayNode\n"],["copy","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ArrayPatternNode\n"],["copy","YARP::AssocNode","YARP/AssocNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; AssocNode\n"],["copy","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; AssocSplatNode\n"],["copy","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BackReferenceReadNode\n"],["copy","YARP::BeginNode","YARP/BeginNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BeginNode\n"],["copy","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BlockArgumentNode\n"],["copy","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BlockLocalVariableNode\n"],["copy","YARP::BlockNode","YARP/BlockNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BlockNode\n"],["copy","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BlockParameterNode\n"],["copy","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BlockParametersNode\n"],["copy","YARP::BreakNode","YARP/BreakNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; BreakNode\n"],["copy","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; CallAndWriteNode\n"],["copy","YARP::CallNode","YARP/CallNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; CallNode\n"],["copy","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; CallOperatorWriteNode\n"],["copy","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; CallOrWriteNode\n"],["copy","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; CapturePatternNode\n"],["copy","YARP::CaseNode","YARP/CaseNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; CaseNode\n"],["copy","YARP::ClassNode","YARP/ClassNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassNode\n"],["copy","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassVariableAndWriteNode\n"],["copy","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassVariableOperatorWriteNode\n"],["copy","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassVariableOrWriteNode\n"],["copy","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassVariableReadNode\n"],["copy","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassVariableTargetNode\n"],["copy","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ClassVariableWriteNode\n"],["copy","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantAndWriteNode\n"],["copy","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantOperatorWriteNode\n"],["copy","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantOrWriteNode\n"],["copy","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantPathAndWriteNode\n"],["copy","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantPathNode\n"],["copy","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantPathOperatorWriteNode\n"],["copy","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantPathOrWriteNode\n"],["copy","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantPathTargetNode\n"],["copy","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantPathWriteNode\n"],["copy","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantReadNode\n"],["copy","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantTargetNode\n"],["copy","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ConstantWriteNode\n"],["copy","YARP::DefNode","YARP/DefNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; DefNode\n"],["copy","YARP::DefinedNode","YARP/DefinedNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; DefinedNode\n"],["copy","YARP::ElseNode","YARP/ElseNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ElseNode\n"],["copy","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; EmbeddedStatementsNode\n"],["copy","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; EmbeddedVariableNode\n"],["copy","YARP::EnsureNode","YARP/EnsureNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; EnsureNode\n"],["copy","YARP::FalseNode","YARP/FalseNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; FalseNode\n"],["copy","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; FindPatternNode\n"],["copy","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; FlipFlopNode\n"],["copy","YARP::FloatNode","YARP/FloatNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; FloatNode\n"],["copy","YARP::ForNode","YARP/ForNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ForNode\n"],["copy","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ForwardingArgumentsNode\n"],["copy","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ForwardingParameterNode\n"],["copy","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ForwardingSuperNode\n"],["copy","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; GlobalVariableAndWriteNode\n"],["copy","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; GlobalVariableOperatorWriteNode\n"],["copy","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; GlobalVariableOrWriteNode\n"],["copy","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; GlobalVariableReadNode\n"],["copy","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; GlobalVariableTargetNode\n"],["copy","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; GlobalVariableWriteNode\n"],["copy","YARP::HashNode","YARP/HashNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; HashNode\n"],["copy","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; HashPatternNode\n"],["copy","YARP::IfNode","YARP/IfNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; IfNode\n"],["copy","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ImaginaryNode\n"],["copy","YARP::InNode","YARP/InNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InNode\n"],["copy","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InstanceVariableAndWriteNode\n"],["copy","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InstanceVariableOperatorWriteNode\n"],["copy","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InstanceVariableOrWriteNode\n"],["copy","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InstanceVariableReadNode\n"],["copy","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InstanceVariableTargetNode\n"],["copy","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InstanceVariableWriteNode\n"],["copy","YARP::IntegerNode","YARP/IntegerNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; IntegerNode\n"],["copy","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InterpolatedMatchLastLineNode\n"],["copy","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InterpolatedRegularExpressionNode\n"],["copy","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InterpolatedStringNode\n"],["copy","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InterpolatedSymbolNode\n"],["copy","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; InterpolatedXStringNode\n"],["copy","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; KeywordHashNode\n"],["copy","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; KeywordParameterNode\n"],["copy","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; KeywordRestParameterNode\n"],["copy","YARP::LambdaNode","YARP/LambdaNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LambdaNode\n"],["copy","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LocalVariableAndWriteNode\n"],["copy","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LocalVariableOperatorWriteNode\n"],["copy","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LocalVariableOrWriteNode\n"],["copy","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LocalVariableReadNode\n"],["copy","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LocalVariableTargetNode\n"],["copy","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; LocalVariableWriteNode\n"],["copy","YARP::Location","YARP/Location.html#method-i-copy","(**options)","<p>Create a new location object with the given options.\n"],["copy","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; MatchLastLineNode\n"],["copy","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; MatchPredicateNode\n"],["copy","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; MatchRequiredNode\n"],["copy","YARP::MissingNode","YARP/MissingNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; MissingNode\n"],["copy","YARP::ModuleNode","YARP/ModuleNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ModuleNode\n"],["copy","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; MultiTargetNode\n"],["copy","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; MultiWriteNode\n"],["copy","YARP::NextNode","YARP/NextNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; NextNode\n"],["copy","YARP::NilNode","YARP/NilNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; NilNode\n"],["copy","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; NoKeywordsParameterNode\n"],["copy","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; NumberedReferenceReadNode\n"],["copy","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; OptionalParameterNode\n"],["copy","YARP::OrNode","YARP/OrNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; OrNode\n"],["copy","YARP::ParametersNode","YARP/ParametersNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ParametersNode\n"],["copy","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ParenthesesNode\n"],["copy","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; PinnedExpressionNode\n"],["copy","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; PinnedVariableNode\n"],["copy","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; PostExecutionNode\n"],["copy","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; PreExecutionNode\n"],["copy","YARP::ProgramNode","YARP/ProgramNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ProgramNode\n"],["copy","YARP::RangeNode","YARP/RangeNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RangeNode\n"],["copy","YARP::RationalNode","YARP/RationalNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RationalNode\n"],["copy","YARP::RedoNode","YARP/RedoNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RedoNode\n"],["copy","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RegularExpressionNode\n"],["copy","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RequiredDestructuredParameterNode\n"],["copy","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RequiredParameterNode\n"],["copy","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RescueModifierNode\n"],["copy","YARP::RescueNode","YARP/RescueNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RescueNode\n"],["copy","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RestParameterNode\n"],["copy","YARP::RetryNode","YARP/RetryNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; RetryNode\n"],["copy","YARP::ReturnNode","YARP/ReturnNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; ReturnNode\n"],["copy","YARP::SelfNode","YARP/SelfNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SelfNode\n"],["copy","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SingletonClassNode\n"],["copy","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SourceEncodingNode\n"],["copy","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SourceFileNode\n"],["copy","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SourceLineNode\n"],["copy","YARP::SplatNode","YARP/SplatNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SplatNode\n"],["copy","YARP::StatementsNode","YARP/StatementsNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; StatementsNode\n"],["copy","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; StringConcatNode\n"],["copy","YARP::StringNode","YARP/StringNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; StringNode\n"],["copy","YARP::SuperNode","YARP/SuperNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SuperNode\n"],["copy","YARP::SymbolNode","YARP/SymbolNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; SymbolNode\n"],["copy","YARP::TrueNode","YARP/TrueNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; TrueNode\n"],["copy","YARP::UndefNode","YARP/UndefNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; UndefNode\n"],["copy","YARP::UnlessNode","YARP/UnlessNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; UnlessNode\n"],["copy","YARP::UntilNode","YARP/UntilNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; UntilNode\n"],["copy","YARP::WhenNode","YARP/WhenNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; WhenNode\n"],["copy","YARP::WhileNode","YARP/WhileNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; WhileNode\n"],["copy","YARP::XStringNode","YARP/XStringNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; XStringNode\n"],["copy","YARP::YieldNode","YARP/YieldNode.html#method-i-copy","(**params)","<p>def copy: (**params) -&gt; YieldNode\n"],["cruby_locals","YARP::Debug","YARP/Debug.html#method-c-cruby_locals","(source)","<p>For the given source, compiles with CRuby and returns a list of all of the sets of local variables that …\n"],["decimal?","YARP::IntegerNode","YARP/IntegerNode.html#method-i-decimal-3F","()","<p>def decimal?: () -&gt; bool\n"],["deconstruct","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::AndNode","YARP/AndNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ArrayNode","YARP/ArrayNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::AssocNode","YARP/AssocNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BeginNode","YARP/BeginNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BlockNode","YARP/BlockNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::BreakNode","YARP/BreakNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::CallNode","YARP/CallNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::CaseNode","YARP/CaseNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassNode","YARP/ClassNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::DefNode","YARP/DefNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::DefinedNode","YARP/DefinedNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ElseNode","YARP/ElseNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::EnsureNode","YARP/EnsureNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::FalseNode","YARP/FalseNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::FloatNode","YARP/FloatNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ForNode","YARP/ForNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::HashNode","YARP/HashNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::IfNode","YARP/IfNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InNode","YARP/InNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::IntegerNode","YARP/IntegerNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LambdaNode","YARP/LambdaNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::MissingNode","YARP/MissingNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ModuleNode","YARP/ModuleNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::NextNode","YARP/NextNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::NilNode","YARP/NilNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::OrNode","YARP/OrNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ParametersNode","YARP/ParametersNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ProgramNode","YARP/ProgramNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RangeNode","YARP/RangeNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RationalNode","YARP/RationalNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RedoNode","YARP/RedoNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RescueNode","YARP/RescueNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::RetryNode","YARP/RetryNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::ReturnNode","YARP/ReturnNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SelfNode","YARP/SelfNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SplatNode","YARP/SplatNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::StatementsNode","YARP/StatementsNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::StringNode","YARP/StringNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SuperNode","YARP/SuperNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::SymbolNode","YARP/SymbolNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::TrueNode","YARP/TrueNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::UndefNode","YARP/UndefNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::UnlessNode","YARP/UnlessNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::UntilNode","YARP/UntilNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::WhenNode","YARP/WhenNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::WhileNode","YARP/WhileNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::XStringNode","YARP/XStringNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct","YARP::YieldNode","YARP/YieldNode.html#method-i-deconstruct","()","<p>def deconstruct: () -&gt; Array[nil | Node]\n"],["deconstruct_keys","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::AndNode","YARP/AndNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ArrayNode","YARP/ArrayNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::AssocNode","YARP/AssocNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BeginNode","YARP/BeginNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BlockNode","YARP/BlockNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::BreakNode","YARP/BreakNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::CallNode","YARP/CallNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::CaseNode","YARP/CaseNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassNode","YARP/ClassNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::Comment","YARP/Comment.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::DefNode","YARP/DefNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::DefinedNode","YARP/DefinedNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ElseNode","YARP/ElseNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::EnsureNode","YARP/EnsureNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::FalseNode","YARP/FalseNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::FloatNode","YARP/FloatNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ForNode","YARP/ForNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::HashNode","YARP/HashNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::IfNode","YARP/IfNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InNode","YARP/InNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::IntegerNode","YARP/IntegerNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LambdaNode","YARP/LambdaNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::Location","YARP/Location.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::MissingNode","YARP/MissingNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ModuleNode","YARP/ModuleNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::NextNode","YARP/NextNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::NilNode","YARP/NilNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::OrNode","YARP/OrNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ParametersNode","YARP/ParametersNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ParseError","YARP/ParseError.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","YARP::ParseResult","YARP/ParseResult.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","YARP::ParseWarning","YARP/ParseWarning.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ProgramNode","YARP/ProgramNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RangeNode","YARP/RangeNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RationalNode","YARP/RationalNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RedoNode","YARP/RedoNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RescueNode","YARP/RescueNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::RetryNode","YARP/RetryNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::ReturnNode","YARP/ReturnNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SelfNode","YARP/SelfNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SplatNode","YARP/SplatNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::StatementsNode","YARP/StatementsNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::StringNode","YARP/StringNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SuperNode","YARP/SuperNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::SymbolNode","YARP/SymbolNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::Token","YARP/Token.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","YARP::TrueNode","YARP/TrueNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::UndefNode","YARP/UndefNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::UnlessNode","YARP/UnlessNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::UntilNode","YARP/UntilNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::WhenNode","YARP/WhenNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::WhileNode","YARP/WhileNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::XStringNode","YARP/XStringNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["deconstruct_keys","YARP::YieldNode","YARP/YieldNode.html#method-i-deconstruct_keys","(keys)","<p>def deconstruct_keys: (keys: Array) -&gt; Hash[Symbol, nil | Node | Array | String | Token | Array | …\n"],["def_keyword","YARP::DefNode","YARP/DefNode.html#method-i-def_keyword","()","<p>def def_keyword: () -&gt; String\n"],["delimiter","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-delimiter","()","<p>def delimiter: () -&gt; String\n"],["delimiter","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-delimiter","()","<p>def delimiter: () -&gt; String\n"],["describe","YARP::Pack::Directive","YARP/Pack/Directive.html#method-i-describe","()",""],["describe","YARP::Pack::Format","YARP/Pack/Format.html#method-i-describe","()",""],["desugar_and_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-desugar_and_write_node","(node, read_class, write_class, *arguments)","<p>Desugar ‘x &amp;&amp;= y` to `x &amp;&amp; x = y`\n"],["desugar_operator_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-desugar_operator_write_node","(node, read_class, write_class, *arguments)","<p>Desugar ‘x += y` to `x = x + y`\n"],["desugar_or_write_defined_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-desugar_or_write_defined_node","(node, read_class, write_class, *arguments)","<p>Desugar ‘x ||= y` to `defined?(x) ? x : x = y`\n"],["desugar_or_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-desugar_or_write_node","(node, read_class, write_class, *arguments)","<p>Desugar ‘x ||= y` to `x || x = y`\n"],["diagnostics","YARP::LanguageServer","YARP/LanguageServer.html#method-i-diagnostics","(source)",""],["do_keyword","YARP::ForNode","YARP/ForNode.html#method-i-do_keyword","()","<p>def do_keyword: () -&gt; String?\n"],["dump","YARP","YARP.html#method-c-dump","(code, filepath = nil)","<p>Mirror the YARP.dump API by using the serialization API.\n"],["dump_file","YARP","YARP.html#method-c-dump_file","(filepath)","<p>Mirror the YARP.dump_file API by using the serialization API.\n"],["dump_internal","YARP","YARP.html#method-c-dump_internal","(source, source_size, filepath)",""],["each_child","YARP::Debug::ISeq","YARP/Debug/ISeq.html#method-i-each_child","()",""],["else_keyword","YARP::ElseNode","YARP/ElseNode.html#method-i-else_keyword","()","<p>def else_keyword: () -&gt; String\n"],["encloses?","YARP::ParseResult::Comments::LocationTarget","YARP/ParseResult/Comments/LocationTarget.html#method-i-encloses-3F","(comment)",""],["encloses?","YARP::ParseResult::Comments::NodeTarget","YARP/ParseResult/Comments/NodeTarget.html#method-i-encloses-3F","(comment)",""],["end_column","YARP::Location","YARP/Location.html#method-i-end_column","()","<p>The column number in bytes where this location ends from the start of the line.\n"],["end_keyword","YARP::BeginNode","YARP/BeginNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String?\n"],["end_keyword","YARP::CaseNode","YARP/CaseNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String\n"],["end_keyword","YARP::ClassNode","YARP/ClassNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String\n"],["end_keyword","YARP::DefNode","YARP/DefNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String?\n"],["end_keyword","YARP::ElseNode","YARP/ElseNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String?\n"],["end_keyword","YARP::EnsureNode","YARP/EnsureNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String\n"],["end_keyword","YARP::ForNode","YARP/ForNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String\n"],["end_keyword","YARP::IfNode","YARP/IfNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String?\n"],["end_keyword","YARP::ModuleNode","YARP/ModuleNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String\n"],["end_keyword","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String\n"],["end_keyword","YARP::UnlessNode","YARP/UnlessNode.html#method-i-end_keyword","()","<p>def end_keyword: () -&gt; String?\n"],["end_line","YARP::Location","YARP/Location.html#method-i-end_line","()","<p>The line number where this location ends.\n"],["end_offset","YARP::Location","YARP/Location.html#method-i-end_offset","()","<p>The byte offset from the beginning of the source where this location ends.\n"],["end_offset","YARP::ParseResult::Comments::LocationTarget","YARP/ParseResult/Comments/LocationTarget.html#method-i-end_offset","()",""],["end_offset","YARP::ParseResult::Comments::NodeTarget","YARP/ParseResult/Comments/NodeTarget.html#method-i-end_offset","()",""],["ensure_keyword","YARP::EnsureNode","YARP/EnsureNode.html#method-i-ensure_keyword","()","<p>def ensure_keyword: () -&gt; String\n"],["equal","YARP::DefNode","YARP/DefNode.html#method-i-equal","()","<p>def equal: () -&gt; String?\n"],["error?","YARP::RipperCompat","YARP/RipperCompat.html#method-i-error-3F","()","<p>Public interface\n"],["euc_jp?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-euc_jp-3F","()","<p>def euc_jp?: () -&gt; bool\n"],["euc_jp?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-euc_jp-3F","()","<p>def euc_jp?: () -&gt; bool\n"],["euc_jp?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-euc_jp-3F","()","<p>def euc_jp?: () -&gt; bool\n"],["euc_jp?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-euc_jp-3F","()","<p>def euc_jp?: () -&gt; bool\n"],["event","YARP::LexCompat::Token","YARP/LexCompat/Token.html#method-i-event","()",""],["exclude_end?","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-exclude_end-3F","()","<p>def exclude_end?: () -&gt; bool\n"],["exclude_end?","YARP::RangeNode","YARP/RangeNode.html#method-i-exclude_end-3F","()","<p>def exclude_end?: () -&gt; bool\n"],["extended?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-extended-3F","()","<p>def extended?: () -&gt; bool\n"],["extended?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-extended-3F","()","<p>def extended?: () -&gt; bool\n"],["extended?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-extended-3F","()","<p>def extended?: () -&gt; bool\n"],["extended?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-extended-3F","()","<p>def extended?: () -&gt; bool\n"],["failure?","YARP::ParseResult","YARP/ParseResult.html#method-i-failure-3F","()",""],["for_keyword","YARP::ForNode","YARP/ForNode.html#method-i-for_keyword","()","<p>def for_keyword: () -&gt; String\n"],["header","YARP::NodeInspector","YARP/NodeInspector.html#method-i-header","(node)","<p>This generates a string that is used as the header of the inspect output for any given node.\n"],["hexadecimal?","YARP::IntegerNode","YARP/IntegerNode.html#method-i-hexadecimal-3F","()","<p>def hexadecimal?: () -&gt; bool\n"],["if_keyword","YARP::IfNode","YARP/IfNode.html#method-i-if_keyword","()","<p>def if_keyword: () -&gt; String?\n"],["ignore_case?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-ignore_case-3F","()","<p>def ignore_case?: () -&gt; bool\n"],["ignore_case?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-ignore_case-3F","()","<p>def ignore_case?: () -&gt; bool\n"],["ignore_case?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-ignore_case-3F","()","<p>def ignore_case?: () -&gt; bool\n"],["ignore_case?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-ignore_case-3F","()","<p>def ignore_case?: () -&gt; bool\n"],["in","YARP::InNode","YARP/InNode.html#method-i-in","()","<p>def in: () -&gt; String\n"],["in_keyword","YARP::ForNode","YARP/ForNode.html#method-i-in_keyword","()","<p>def in_keyword: () -&gt; String\n"],["inheritance_operator","YARP::ClassNode","YARP/ClassNode.html#method-i-inheritance_operator","()","<p>def inheritance_operator: () -&gt; String?\n"],["inspect","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::AndNode","YARP/AndNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ArrayNode","YARP/ArrayNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::AssocNode","YARP/AssocNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BeginNode","YARP/BeginNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BlockNode","YARP/BlockNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::BreakNode","YARP/BreakNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::CallNode","YARP/CallNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::CaseNode","YARP/CaseNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassNode","YARP/ClassNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::Comment","YARP/Comment.html#method-i-inspect","()",""],["inspect","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::DefNode","YARP/DefNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::DefinedNode","YARP/DefinedNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ElseNode","YARP/ElseNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::EnsureNode","YARP/EnsureNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::FalseNode","YARP/FalseNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::FloatNode","YARP/FloatNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ForNode","YARP/ForNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::HashNode","YARP/HashNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::IfNode","YARP/IfNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InNode","YARP/InNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::IntegerNode","YARP/IntegerNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LambdaNode","YARP/LambdaNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::Location","YARP/Location.html#method-i-inspect","()","<p>Returns a string representation of this location.\n"],["inspect","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::MissingNode","YARP/MissingNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ModuleNode","YARP/ModuleNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::NextNode","YARP/NextNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::NilNode","YARP/NilNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::OrNode","YARP/OrNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ParametersNode","YARP/ParametersNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ParseError","YARP/ParseError.html#method-i-inspect","()",""],["inspect","YARP::ParseWarning","YARP/ParseWarning.html#method-i-inspect","()",""],["inspect","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ProgramNode","YARP/ProgramNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RangeNode","YARP/RangeNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RationalNode","YARP/RationalNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RedoNode","YARP/RedoNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RescueNode","YARP/RescueNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::RetryNode","YARP/RetryNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::ReturnNode","YARP/ReturnNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SelfNode","YARP/SelfNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SourceFileNode","YARP/SourceFileNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SourceLineNode","YARP/SourceLineNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SplatNode","YARP/SplatNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::StatementsNode","YARP/StatementsNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::StringConcatNode","YARP/StringConcatNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::StringNode","YARP/StringNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SuperNode","YARP/SuperNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::SymbolNode","YARP/SymbolNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::TrueNode","YARP/TrueNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::UndefNode","YARP/UndefNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::UnlessNode","YARP/UnlessNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::UntilNode","YARP/UntilNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::WhenNode","YARP/WhenNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::WhileNode","YARP/WhileNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::XStringNode","YARP/XStringNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["inspect","YARP::YieldNode","YARP/YieldNode.html#method-i-inspect","(inspector = NodeInspector.new)",""],["instructions","YARP::Debug::ISeq","YARP/Debug/ISeq.html#method-i-instructions","()",""],["join","YARP::Location","YARP/Location.html#method-i-join","(other)","<p>Returns a new location that stretches from this location to the given other location. Raises an error …\n"],["keyword","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::BreakNode","YARP/BreakNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::DefinedNode","YARP/DefinedNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::NextNode","YARP/NextNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::RescueNode","YARP/RescueNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::ReturnNode","YARP/ReturnNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::SuperNode","YARP/SuperNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::UndefNode","YARP/UndefNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::UnlessNode","YARP/UnlessNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::UntilNode","YARP/UntilNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::WhenNode","YARP/WhenNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::WhileNode","YARP/WhileNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["keyword","YARP::YieldNode","YARP/YieldNode.html#method-i-keyword","()","<p>def keyword: () -&gt; String\n"],["length","YARP::LibRubyParser::YPBuffer","YARP/LibRubyParser/YPBuffer.html#method-i-length","()",""],["length","YARP::LibRubyParser::YPString","YARP/LibRubyParser/YPString.html#method-i-length","()",""],["lex","YARP","YARP.html#method-c-lex","(code, filepath = nil)","<p>Mirror the YARP.lex API by using the serialization API.\n"],["lex_compat","YARP","YARP.html#method-c-lex_compat","(source, filepath = \"\")","<p>Returns an array of tokens that closely resembles that of the Ripper lexer. The only difference is that …\n"],["lex_file","YARP","YARP.html#method-c-lex_file","(filepath)","<p>Mirror the YARP.lex_file API by using the serialization API.\n"],["lex_ripper","YARP","YARP.html#method-c-lex_ripper","(source)","<p>This lexes with the Ripper lex. It drops any space events but otherwise returns the same tokens. Raises …\n"],["line","YARP::Source","YARP/Source.html#method-i-line","(value)",""],["line_offset","YARP::Source","YARP/Source.html#method-i-line_offset","(value)",""],["list","YARP::NodeInspector","YARP/NodeInspector.html#method-i-list","(prefix, nodes)","<p>Generates a string that represents a list of nodes. It handles properly using the box drawing characters …\n"],["load","YARP","YARP.html#method-c-load","(source, serialized)","<p>Load the serialized AST using the source as a reference into a tree.\n"],["load","YARP::Serialize","YARP/Serialize.html#method-c-load","(input, serialized)",""],["load_constant","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_constant","(index)",""],["load_embedded_string","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_embedded_string","()",""],["load_encoding","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_encoding","()",""],["load_exported_functions_from","YARP::LibRubyParser","YARP/LibRubyParser.html#method-c-load_exported_functions_from","(header, *functions)","<p>Read through the given header file and find the declaration of each of the given functions. For each …\n"],["load_location","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_location","()",""],["load_metadata","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_metadata","()",""],["load_node","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_node","()",""],["load_nodes","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_nodes","()",""],["load_optional_constant","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_optional_constant","()",""],["load_optional_location","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_optional_location","()",""],["load_optional_node","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_optional_node","()",""],["load_required_constant","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_required_constant","()",""],["load_result","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_result","()",""],["load_serialized_length","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_serialized_length","()",""],["load_string","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_string","()",""],["load_tokens","YARP::Serialize","YARP/Serialize.html#method-c-load_tokens","(source, serialized)",""],["load_tokens","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_tokens","()",""],["load_tokens_result","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_tokens_result","()",""],["load_varint","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-i-load_varint","()","<p>variable-length integer using en.wikipedia.org/wiki/LEB128 This is also what protobuf uses: protobuf.dev/programming-guides/encoding/#varints …\n"],["local_table","YARP::Debug::ISeq","YARP/Debug/ISeq.html#method-i-local_table","()",""],["location","YARP::LexCompat::Token","YARP/LexCompat/Token.html#method-i-location","()",""],["location","YARP::NodeInspector","YARP/NodeInspector.html#method-i-location","(value)","<p>Generates a string that represents a location field on a node.\n"],["lparen","YARP::DefNode","YARP/DefNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String?\n"],["lparen","YARP::DefinedNode","YARP/DefinedNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String?\n"],["lparen","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String?\n"],["lparen","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String?\n"],["lparen","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String\n"],["lparen","YARP::SuperNode","YARP/SuperNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String?\n"],["lparen","YARP::YieldNode","YARP/YieldNode.html#method-i-lparen","()","<p>def lparen: () -&gt; String?\n"],["mark_newlines!","YARP::ParseResult","YARP/ParseResult.html#method-i-mark_newlines-21","()","<p>Walk the tree and mark nodes that are on a new line.\n"],["message","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-message","()","<p>def message: () -&gt; String?\n"],["message","YARP::CallNode","YARP/CallNode.html#method-i-message","()","<p>def message: () -&gt; String?\n"],["message","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-message","()","<p>def message: () -&gt; String?\n"],["message","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-message","()","<p>def message: () -&gt; String?\n"],["module_keyword","YARP::ModuleNode","YARP/ModuleNode.html#method-i-module_keyword","()","<p>def module_keyword: () -&gt; String\n"],["multi_line?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-multi_line-3F","()","<p>def multi_line?: () -&gt; bool\n"],["multi_line?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-multi_line-3F","()","<p>def multi_line?: () -&gt; bool\n"],["multi_line?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-multi_line-3F","()","<p>def multi_line?: () -&gt; bool\n"],["multi_line?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-multi_line-3F","()","<p>def multi_line?: () -&gt; bool\n"],["nearest_targets","YARP::ParseResult::Comments","YARP/ParseResult/Comments.html#method-i-nearest_targets","(node, comment)","<p>Responsible for finding the nearest targets to the given comment within the context of the given encapsulating …\n"],["new","YARP::AliasGlobalVariableNode","YARP/AliasGlobalVariableNode.html#method-c-new","(new_name, old_name, keyword_loc, location)","<p>def initialize: (new_name: Node, old_name: Node, keyword_loc: Location, location: Location) -&gt; void …\n"],["new","YARP::AliasMethodNode","YARP/AliasMethodNode.html#method-c-new","(new_name, old_name, keyword_loc, location)","<p>def initialize: (new_name: Node, old_name: Node, keyword_loc: Location, location: Location) -&gt; void …\n"],["new","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-c-new","(left, right, operator_loc, location)","<p>def initialize: (left: Node, right: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::AndNode","YARP/AndNode.html#method-c-new","(left, right, operator_loc, location)","<p>def initialize: (left: Node, right: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::ArgumentsNode","YARP/ArgumentsNode.html#method-c-new","(arguments, location)","<p>def initialize: (arguments: Array, location: Location) -&gt; void\n"],["new","YARP::ArrayNode","YARP/ArrayNode.html#method-c-new","(elements, opening_loc, closing_loc, location)","<p>def initialize: (elements: Array, opening_loc: Location?, closing_loc: Location?, location: Location …\n"],["new","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-c-new","(constant, requireds, rest, posts, opening_loc, closing_loc, location)","<p>def initialize: (constant: Node?, requireds: Array, rest: Node?, posts: Array, opening_loc: Location …\n"],["new","YARP::AssocNode","YARP/AssocNode.html#method-c-new","(key, value, operator_loc, location)","<p>def initialize: (key: Node, value: Node?, operator_loc: Location?, location: Location) -&gt; void\n"],["new","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-c-new","(value, operator_loc, location)","<p>def initialize: (value: Node?, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::BackReferenceReadNode","YARP/BackReferenceReadNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::BeginNode","YARP/BeginNode.html#method-c-new","(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location)","<p>def initialize: (begin_keyword_loc: Location?, statements: StatementsNode?, rescue_clause: RescueNode …\n"],["new","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-c-new","(expression, operator_loc, location)","<p>def initialize: (expression: Node?, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::BlockLocalVariableNode","YARP/BlockLocalVariableNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::BlockNode","YARP/BlockNode.html#method-c-new","(locals, parameters, body, opening_loc, closing_loc, location)","<p>def initialize: (locals: Array, parameters: BlockParametersNode?, body: Node?, opening_loc: Location …\n"],["new","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-c-new","(name, name_loc, operator_loc, location)","<p>def initialize: (name: Symbol?, name_loc: Location?, operator_loc: Location, location: Location) -&gt; …\n"],["new","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-c-new","(parameters, locals, opening_loc, closing_loc, location)","<p>def initialize: (parameters: ParametersNode?, locals: Array, opening_loc: Location?, closing_loc: Location …\n"],["new","YARP::BreakNode","YARP/BreakNode.html#method-c-new","(arguments, keyword_loc, location)","<p>def initialize: (arguments: ArgumentsNode?, keyword_loc: Location, location: Location) -&gt; void\n"],["new","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-c-new","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location)","<p>def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: …\n"],["new","YARP::CallNode","YARP/CallNode.html#method-c-new","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, block, flags, name, location)","<p>def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: …\n"],["new","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-c-new","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator, operator_loc, value, location)","<p>def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: …\n"],["new","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-c-new","(receiver, call_operator_loc, message_loc, opening_loc, arguments, closing_loc, flags, read_name, write_name, operator_loc, value, location)","<p>def initialize: (receiver: Node?, call_operator_loc: Location?, message_loc: Location?, opening_loc: …\n"],["new","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-c-new","(value, target, operator_loc, location)","<p>def initialize: (value: Node, target: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::CaseNode","YARP/CaseNode.html#method-c-new","(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location)","<p>def initialize: (predicate: Node?, conditions: Array, consequent: ElseNode?, case_keyword_loc: Location …\n"],["new","YARP::ClassNode","YARP/ClassNode.html#method-c-new","(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location)","<p>def initialize: (locals: Array, class_keyword_loc: Location, constant_path: Node, inheritance_operator_loc …\n"],["new","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::ClassVariableOperatorWriteNode","YARP/ClassVariableOperatorWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, operator, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol …\n"],["new","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::ClassVariableReadNode","YARP/ClassVariableReadNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::ClassVariableTargetNode","YARP/ClassVariableTargetNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-c-new","(name, name_loc, value, operator_loc, location)","<p>def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location?, location: Location …\n"],["new","YARP::Comment","YARP/Comment.html#method-c-new","(type, location)",""],["new","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::ConstantOperatorWriteNode","YARP/ConstantOperatorWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, operator, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol …\n"],["new","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-c-new","(target, operator_loc, value, location)","<p>def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, location: Location) -&gt; …\n"],["new","YARP::ConstantPathNode","YARP/ConstantPathNode.html#method-c-new","(parent, child, delimiter_loc, location)","<p>def initialize: (parent: Node?, child: Node, delimiter_loc: Location, location: Location) -&gt; void …\n"],["new","YARP::ConstantPathOperatorWriteNode","YARP/ConstantPathOperatorWriteNode.html#method-c-new","(target, operator_loc, value, operator, location)","<p>def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, operator: Symbol, location: …\n"],["new","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-c-new","(target, operator_loc, value, location)","<p>def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, location: Location) -&gt; …\n"],["new","YARP::ConstantPathTargetNode","YARP/ConstantPathTargetNode.html#method-c-new","(parent, child, delimiter_loc, location)","<p>def initialize: (parent: Node?, child: Node, delimiter_loc: Location, location: Location) -&gt; void …\n"],["new","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-c-new","(target, operator_loc, value, location)","<p>def initialize: (target: ConstantPathNode, operator_loc: Location, value: Node, location: Location) -&gt; …\n"],["new","YARP::ConstantReadNode","YARP/ConstantReadNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::ConstantTargetNode","YARP/ConstantTargetNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-c-new","(name, name_loc, value, operator_loc, location)","<p>def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location, location: Location …\n"],["new","YARP::Debug::ISeq","YARP/Debug/ISeq.html#method-c-new","(parts)",""],["new","YARP::DefNode","YARP/DefNode.html#method-c-new","(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location)","<p>def initialize: (name: Symbol, name_loc: Location, receiver: Node?, parameters: ParametersNode?, body: …\n"],["new","YARP::DefinedNode","YARP/DefinedNode.html#method-c-new","(lparen_loc, value, rparen_loc, keyword_loc, location)","<p>def initialize: (lparen_loc: Location?, value: Node, rparen_loc: Location?, keyword_loc: Location, location: …\n"],["new","YARP::ElseNode","YARP/ElseNode.html#method-c-new","(else_keyword_loc, statements, end_keyword_loc, location)","<p>def initialize: (else_keyword_loc: Location, statements: StatementsNode?, end_keyword_loc: Location?, …\n"],["new","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-c-new","(opening_loc, statements, closing_loc, location)","<p>def initialize: (opening_loc: Location, statements: StatementsNode?, closing_loc: Location, location: …\n"],["new","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-c-new","(operator_loc, variable, location)","<p>def initialize: (operator_loc: Location, variable: Node, location: Location) -&gt; void\n"],["new","YARP::EnsureNode","YARP/EnsureNode.html#method-c-new","(ensure_keyword_loc, statements, end_keyword_loc, location)","<p>def initialize: (ensure_keyword_loc: Location, statements: StatementsNode?, end_keyword_loc: Location …\n"],["new","YARP::FalseNode","YARP/FalseNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::FindPatternNode","YARP/FindPatternNode.html#method-c-new","(constant, left, requireds, right, opening_loc, closing_loc, location)","<p>def initialize: (constant: Node?, left: Node, requireds: Array, right: Node, opening_loc: Location?, …\n"],["new","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-c-new","(left, right, operator_loc, flags, location)","<p>def initialize: (left: Node?, right: Node?, operator_loc: Location, flags: Integer, location: Location …\n"],["new","YARP::FloatNode","YARP/FloatNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::ForNode","YARP/ForNode.html#method-c-new","(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location)","<p>def initialize: (index: Node, collection: Node, statements: StatementsNode?, for_keyword_loc: Location …\n"],["new","YARP::ForwardingArgumentsNode","YARP/ForwardingArgumentsNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::ForwardingParameterNode","YARP/ForwardingParameterNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::ForwardingSuperNode","YARP/ForwardingSuperNode.html#method-c-new","(block, location)","<p>def initialize: (block: BlockNode?, location: Location) -&gt; void\n"],["new","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::GlobalVariableOperatorWriteNode","YARP/GlobalVariableOperatorWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, operator, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol …\n"],["new","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::GlobalVariableReadNode","YARP/GlobalVariableReadNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::GlobalVariableTargetNode","YARP/GlobalVariableTargetNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-c-new","(name, name_loc, value, operator_loc, location)","<p>def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location, location: Location …\n"],["new","YARP::HashNode","YARP/HashNode.html#method-c-new","(opening_loc, elements, closing_loc, location)","<p>def initialize: (opening_loc: Location, elements: Array, closing_loc: Location, location: Location) -&gt; …\n"],["new","YARP::HashPatternNode","YARP/HashPatternNode.html#method-c-new","(constant, assocs, kwrest, opening_loc, closing_loc, location)","<p>def initialize: (constant: Node?, assocs: Array, kwrest: Node?, opening_loc: Location?, closing_loc: …\n"],["new","YARP::IfNode","YARP/IfNode.html#method-c-new","(if_keyword_loc, predicate, statements, consequent, end_keyword_loc, location)","<p>def initialize: (if_keyword_loc: Location?, predicate: Node, statements: StatementsNode?, consequent: …\n"],["new","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-c-new","(numeric, location)","<p>def initialize: (numeric: Node, location: Location) -&gt; void\n"],["new","YARP::InNode","YARP/InNode.html#method-c-new","(pattern, statements, in_loc, then_loc, location)","<p>def initialize: (pattern: Node, statements: StatementsNode?, in_loc: Location, then_loc: Location?, location: …\n"],["new","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::InstanceVariableOperatorWriteNode","YARP/InstanceVariableOperatorWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, operator, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, operator: Symbol …\n"],["new","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::InstanceVariableReadNode","YARP/InstanceVariableReadNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::InstanceVariableTargetNode","YARP/InstanceVariableTargetNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-c-new","(name, name_loc, value, operator_loc, location)","<p>def initialize: (name: Symbol, name_loc: Location, value: Node, operator_loc: Location, location: Location …\n"],["new","YARP::IntegerNode","YARP/IntegerNode.html#method-c-new","(flags, location)","<p>def initialize: (flags: Integer, location: Location) -&gt; void\n"],["new","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-c-new","(opening_loc, parts, closing_loc, flags, location)","<p>def initialize: (opening_loc: Location, parts: Array, closing_loc: Location, flags: Integer, location: …\n"],["new","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-c-new","(opening_loc, parts, closing_loc, flags, location)","<p>def initialize: (opening_loc: Location, parts: Array, closing_loc: Location, flags: Integer, location: …\n"],["new","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-c-new","(opening_loc, parts, closing_loc, location)","<p>def initialize: (opening_loc: Location?, parts: Array, closing_loc: Location?, location: Location) -&gt; …\n"],["new","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-c-new","(opening_loc, parts, closing_loc, location)","<p>def initialize: (opening_loc: Location?, parts: Array, closing_loc: Location?, location: Location) -&gt; …\n"],["new","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-c-new","(opening_loc, parts, closing_loc, location)","<p>def initialize: (opening_loc: Location, parts: Array, closing_loc: Location, location: Location) -&gt; …\n"],["new","YARP::KeywordHashNode","YARP/KeywordHashNode.html#method-c-new","(elements, location)","<p>def initialize: (elements: Array, location: Location) -&gt; void\n"],["new","YARP::KeywordParameterNode","YARP/KeywordParameterNode.html#method-c-new","(name, name_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, value: Node?, location: Location) -&gt; void\n"],["new","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-c-new","(name, name_loc, operator_loc, location)","<p>def initialize: (name: Symbol?, name_loc: Location?, operator_loc: Location, location: Location) -&gt; …\n"],["new","YARP::LambdaNode","YARP/LambdaNode.html#method-c-new","(locals, operator_loc, opening_loc, closing_loc, parameters, body, location)","<p>def initialize: (locals: Array, operator_loc: Location, opening_loc: Location, closing_loc: Location …\n"],["new","YARP::LanguageServer","YARP/LanguageServer.html#method-c-new","( input: $stdin, output: $stdout )",""],["new","YARP::LexCompat","YARP/LexCompat.html#method-c-new","(source, filepath = \"\")",""],["new","YARP::LexCompat::Heredoc::DashHeredoc","YARP/LexCompat/Heredoc/DashHeredoc.html#method-c-new","(split)",""],["new","YARP::LexCompat::Heredoc::DedentingHeredoc","YARP/LexCompat/Heredoc/DedentingHeredoc.html#method-c-new","()",""],["new","YARP::LexCompat::Heredoc::PlainHeredoc","YARP/LexCompat/Heredoc/PlainHeredoc.html#method-c-new","()",""],["new","YARP::LibRubyParser::YPBuffer","YARP/LibRubyParser/YPBuffer.html#method-c-new","(pointer)",""],["new","YARP::LibRubyParser::YPString","YARP/LibRubyParser/YPString.html#method-c-new","(pointer)",""],["new","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-c-new","(name_loc, operator_loc, value, name, depth, location)","<p>def initialize: (name_loc: Location, operator_loc: Location, value: Node, name: Symbol, depth: Integer …\n"],["new","YARP::LocalVariableOperatorWriteNode","YARP/LocalVariableOperatorWriteNode.html#method-c-new","(name_loc, operator_loc, value, name, operator, depth, location)","<p>def initialize: (name_loc: Location, operator_loc: Location, value: Node, name: Symbol, operator: Symbol …\n"],["new","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-c-new","(name_loc, operator_loc, value, name, depth, location)","<p>def initialize: (name_loc: Location, operator_loc: Location, value: Node, name: Symbol, depth: Integer …\n"],["new","YARP::LocalVariableReadNode","YARP/LocalVariableReadNode.html#method-c-new","(name, depth, location)","<p>def initialize: (name: Symbol, depth: Integer, location: Location) -&gt; void\n"],["new","YARP::LocalVariableTargetNode","YARP/LocalVariableTargetNode.html#method-c-new","(name, depth, location)","<p>def initialize: (name: Symbol, depth: Integer, location: Location) -&gt; void\n"],["new","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-c-new","(name, depth, name_loc, value, operator_loc, location)","<p>def initialize: (name: Symbol, depth: Integer, name_loc: Location, value: Node, operator_loc: Location …\n"],["new","YARP::Location","YARP/Location.html#method-c-new","(source, start_offset, length)",""],["new","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-c-new","(opening_loc, content_loc, closing_loc, unescaped, flags, location)","<p>def initialize: (opening_loc: Location, content_loc: Location, closing_loc: Location, unescaped: String …\n"],["new","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-c-new","(value, pattern, operator_loc, location)","<p>def initialize: (value: Node, pattern: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-c-new","(value, pattern, operator_loc, location)","<p>def initialize: (value: Node, pattern: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::MissingNode","YARP/MissingNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::ModuleNode","YARP/ModuleNode.html#method-c-new","(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location)","<p>def initialize: (locals: Array, module_keyword_loc: Location, constant_path: Node, body: Node?, end_keyword_loc …\n"],["new","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-c-new","(targets, lparen_loc, rparen_loc, location)","<p>def initialize: (targets: Array, lparen_loc: Location?, rparen_loc: Location?, location: Location) -&gt; …\n"],["new","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-c-new","(targets, lparen_loc, rparen_loc, operator_loc, value, location)","<p>def initialize: (targets: Array, lparen_loc: Location?, rparen_loc: Location?, operator_loc: Location …\n"],["new","YARP::NextNode","YARP/NextNode.html#method-c-new","(arguments, keyword_loc, location)","<p>def initialize: (arguments: ArgumentsNode?, keyword_loc: Location, location: Location) -&gt; void\n"],["new","YARP::NilNode","YARP/NilNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-c-new","(operator_loc, keyword_loc, location)","<p>def initialize: (operator_loc: Location, keyword_loc: Location, location: Location) -&gt; void\n"],["new","YARP::NodeInspector","YARP/NodeInspector.html#method-c-new","(prefix = \"\")",""],["new","YARP::NumberedReferenceReadNode","YARP/NumberedReferenceReadNode.html#method-c-new","(number, location)","<p>def initialize: (number: Integer, location: Location) -&gt; void\n"],["new","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-c-new","(name, name_loc, operator_loc, value, location)","<p>def initialize: (name: Symbol, name_loc: Location, operator_loc: Location, value: Node, location: Location …\n"],["new","YARP::OrNode","YARP/OrNode.html#method-c-new","(left, right, operator_loc, location)","<p>def initialize: (left: Node, right: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::Pack::Directive","YARP/Pack/Directive.html#method-c-new","(version, variant, source, type, signed, endian, size, length_type, length)",""],["new","YARP::Pack::Format","YARP/Pack/Format.html#method-c-new","(directives, encoding)",""],["new","YARP::ParametersNode","YARP/ParametersNode.html#method-c-new","(requireds, optionals, rest, posts, keywords, keyword_rest, block, location)","<p>def initialize: (requireds: Array, optionals: Array, rest: RestParameterNode?, posts: Array, keywords: …\n"],["new","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-c-new","(body, opening_loc, closing_loc, location)","<p>def initialize: (body: Node?, opening_loc: Location, closing_loc: Location, location: Location) -&gt; …\n"],["new","YARP::ParseError","YARP/ParseError.html#method-c-new","(message, location)",""],["new","YARP::ParseResult","YARP/ParseResult.html#method-c-new","(value, comments, errors, warnings, source)",""],["new","YARP::ParseResult::Comments","YARP/ParseResult/Comments.html#method-c-new","(parse_result)",""],["new","YARP::ParseResult::Comments::LocationTarget","YARP/ParseResult/Comments/LocationTarget.html#method-c-new","(location)",""],["new","YARP::ParseResult::Comments::NodeTarget","YARP/ParseResult/Comments/NodeTarget.html#method-c-new","(node)",""],["new","YARP::ParseResult::Newlines","YARP/ParseResult/Newlines.html#method-c-new","(newline_marked)",""],["new","YARP::ParseWarning","YARP/ParseWarning.html#method-c-new","(message, location)",""],["new","YARP::Pattern","YARP/Pattern.html#method-c-new","(query)",""],["new","YARP::Pattern::CompilationError","YARP/Pattern/CompilationError.html#method-c-new","(repr)",""],["new","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-c-new","(expression, operator_loc, lparen_loc, rparen_loc, location)","<p>def initialize: (expression: Node, operator_loc: Location, lparen_loc: Location, rparen_loc: Location …\n"],["new","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-c-new","(variable, operator_loc, location)","<p>def initialize: (variable: Node, operator_loc: Location, location: Location) -&gt; void\n"],["new","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-c-new","(statements, keyword_loc, opening_loc, closing_loc, location)","<p>def initialize: (statements: StatementsNode?, keyword_loc: Location, opening_loc: Location, closing_loc …\n"],["new","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-c-new","(statements, keyword_loc, opening_loc, closing_loc, location)","<p>def initialize: (statements: StatementsNode?, keyword_loc: Location, opening_loc: Location, closing_loc …\n"],["new","YARP::ProgramNode","YARP/ProgramNode.html#method-c-new","(locals, statements, location)","<p>def initialize: (locals: Array, statements: StatementsNode, location: Location) -&gt; void\n"],["new","YARP::RangeNode","YARP/RangeNode.html#method-c-new","(left, right, operator_loc, flags, location)","<p>def initialize: (left: Node?, right: Node?, operator_loc: Location, flags: Integer, location: Location …\n"],["new","YARP::RationalNode","YARP/RationalNode.html#method-c-new","(numeric, location)","<p>def initialize: (numeric: Node, location: Location) -&gt; void\n"],["new","YARP::RedoNode","YARP/RedoNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-c-new","(opening_loc, content_loc, closing_loc, unescaped, flags, location)","<p>def initialize: (opening_loc: Location, content_loc: Location, closing_loc: Location, unescaped: String …\n"],["new","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-c-new","(parameters, opening_loc, closing_loc, location)","<p>def initialize: (parameters: Array, opening_loc: Location, closing_loc: Location, location: Location …\n"],["new","YARP::RequiredParameterNode","YARP/RequiredParameterNode.html#method-c-new","(name, location)","<p>def initialize: (name: Symbol, location: Location) -&gt; void\n"],["new","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-c-new","(expression, keyword_loc, rescue_expression, location)","<p>def initialize: (expression: Node, keyword_loc: Location, rescue_expression: Node, location: Location …\n"],["new","YARP::RescueNode","YARP/RescueNode.html#method-c-new","(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location)","<p>def initialize: (keyword_loc: Location, exceptions: Array, operator_loc: Location?, reference: Node?, …\n"],["new","YARP::RestParameterNode","YARP/RestParameterNode.html#method-c-new","(name, name_loc, operator_loc, location)","<p>def initialize: (name: Symbol?, name_loc: Location?, operator_loc: Location, location: Location) -&gt; …\n"],["new","YARP::RetryNode","YARP/RetryNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::ReturnNode","YARP/ReturnNode.html#method-c-new","(keyword_loc, arguments, location)","<p>def initialize: (keyword_loc: Location, arguments: ArgumentsNode?, location: Location) -&gt; void\n"],["new","YARP::RipperCompat","YARP/RipperCompat.html#method-c-new","(source)",""],["new","YARP::SelfNode","YARP/SelfNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::Serialize::Loader","YARP/Serialize/Loader.html#method-c-new","(source, serialized)",""],["new","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-c-new","(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location)","<p>def initialize: (locals: Array, class_keyword_loc: Location, operator_loc: Location, expression: Node …\n"],["new","YARP::Source","YARP/Source.html#method-c-new","(source, offsets = compute_offsets(source))",""],["new","YARP::SourceEncodingNode","YARP/SourceEncodingNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::SourceFileNode","YARP/SourceFileNode.html#method-c-new","(filepath, location)","<p>def initialize: (filepath: String, location: Location) -&gt; void\n"],["new","YARP::SourceLineNode","YARP/SourceLineNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::SplatNode","YARP/SplatNode.html#method-c-new","(operator_loc, expression, location)","<p>def initialize: (operator_loc: Location, expression: Node?, location: Location) -&gt; void\n"],["new","YARP::StatementsNode","YARP/StatementsNode.html#method-c-new","(body, location)","<p>def initialize: (body: Array, location: Location) -&gt; void\n"],["new","YARP::StringConcatNode","YARP/StringConcatNode.html#method-c-new","(left, right, location)","<p>def initialize: (left: Node, right: Node, location: Location) -&gt; void\n"],["new","YARP::StringNode","YARP/StringNode.html#method-c-new","(opening_loc, content_loc, closing_loc, unescaped, location)","<p>def initialize: (opening_loc: Location?, content_loc: Location, closing_loc: Location?, unescaped: String …\n"],["new","YARP::SuperNode","YARP/SuperNode.html#method-c-new","(keyword_loc, lparen_loc, arguments, rparen_loc, block, location)","<p>def initialize: (keyword_loc: Location, lparen_loc: Location?, arguments: ArgumentsNode?, rparen_loc …\n"],["new","YARP::SymbolNode","YARP/SymbolNode.html#method-c-new","(opening_loc, value_loc, closing_loc, unescaped, location)","<p>def initialize: (opening_loc: Location?, value_loc: Location?, closing_loc: Location?, unescaped: String …\n"],["new","YARP::Token","YARP/Token.html#method-c-new","(type, value, location)",""],["new","YARP::TrueNode","YARP/TrueNode.html#method-c-new","(location)","<p>def initialize: (location: Location) -&gt; void\n"],["new","YARP::UndefNode","YARP/UndefNode.html#method-c-new","(names, keyword_loc, location)","<p>def initialize: (names: Array, keyword_loc: Location, location: Location) -&gt; void\n"],["new","YARP::UnlessNode","YARP/UnlessNode.html#method-c-new","(keyword_loc, predicate, statements, consequent, end_keyword_loc, location)","<p>def initialize: (keyword_loc: Location, predicate: Node, statements: StatementsNode?, consequent: ElseNode …\n"],["new","YARP::UntilNode","YARP/UntilNode.html#method-c-new","(keyword_loc, closing_loc, predicate, statements, flags, location)","<p>def initialize: (keyword_loc: Location, closing_loc: Location?, predicate: Node, statements: StatementsNode …\n"],["new","YARP::WhenNode","YARP/WhenNode.html#method-c-new","(keyword_loc, conditions, statements, location)","<p>def initialize: (keyword_loc: Location, conditions: Array, statements: StatementsNode?, location: Location …\n"],["new","YARP::WhileNode","YARP/WhileNode.html#method-c-new","(keyword_loc, closing_loc, predicate, statements, flags, location)","<p>def initialize: (keyword_loc: Location, closing_loc: Location?, predicate: Node, statements: StatementsNode …\n"],["new","YARP::XStringNode","YARP/XStringNode.html#method-c-new","(opening_loc, content_loc, closing_loc, unescaped, location)","<p>def initialize: (opening_loc: Location, content_loc: Location, closing_loc: Location, unescaped: String …\n"],["new","YARP::YieldNode","YARP/YieldNode.html#method-c-new","(keyword_loc, lparen_loc, arguments, rparen_loc, location)","<p>def initialize: (keyword_loc: Location, lparen_loc: Location?, arguments: ArgumentsNode?, rparen_loc …\n"],["newline?","YARP::Node","YARP/Node.html#method-i-newline-3F","()",""],["newlines","YARP::Debug","YARP/Debug.html#method-c-newlines","(source)",""],["null","YARP::Location","YARP/Location.html#method-c-null","()",""],["octal?","YARP::IntegerNode","YARP/IntegerNode.html#method-i-octal-3F","()","<p>def octal?: () -&gt; bool\n"],["once?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-once-3F","()","<p>def once?: () -&gt; bool\n"],["once?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-once-3F","()","<p>def once?: () -&gt; bool\n"],["once?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-once-3F","()","<p>def once?: () -&gt; bool\n"],["once?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-once-3F","()","<p>def once?: () -&gt; bool\n"],["opening","YARP::ArrayNode","YARP/ArrayNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::ArrayPatternNode","YARP/ArrayPatternNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::BlockNode","YARP/BlockNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::BlockParametersNode","YARP/BlockParametersNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::CallNode","YARP/CallNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::EmbeddedStatementsNode","YARP/EmbeddedStatementsNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::FindPatternNode","YARP/FindPatternNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::HashNode","YARP/HashNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::HashPatternNode","YARP/HashPatternNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::LambdaNode","YARP/LambdaNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::PostExecutionNode","YARP/PostExecutionNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::PreExecutionNode","YARP/PreExecutionNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::RequiredDestructuredParameterNode","YARP/RequiredDestructuredParameterNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["opening","YARP::StringNode","YARP/StringNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::SymbolNode","YARP/SymbolNode.html#method-i-opening","()","<p>def opening: () -&gt; String?\n"],["opening","YARP::XStringNode","YARP/XStringNode.html#method-i-opening","()","<p>def opening: () -&gt; String\n"],["operator","YARP::AlternationPatternNode","YARP/AlternationPatternNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::AndNode","YARP/AndNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::AssocNode","YARP/AssocNode.html#method-i-operator","()","<p>def operator: () -&gt; String?\n"],["operator","YARP::AssocSplatNode","YARP/AssocSplatNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::BlockArgumentNode","YARP/BlockArgumentNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::BlockParameterNode","YARP/BlockParameterNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::CapturePatternNode","YARP/CapturePatternNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ClassVariableAndWriteNode","YARP/ClassVariableAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ClassVariableOrWriteNode","YARP/ClassVariableOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ClassVariableWriteNode","YARP/ClassVariableWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String?\n"],["operator","YARP::ConstantAndWriteNode","YARP/ConstantAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ConstantOrWriteNode","YARP/ConstantOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ConstantPathAndWriteNode","YARP/ConstantPathAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ConstantPathOrWriteNode","YARP/ConstantPathOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ConstantPathWriteNode","YARP/ConstantPathWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::ConstantWriteNode","YARP/ConstantWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::DefNode","YARP/DefNode.html#method-i-operator","()","<p>def operator: () -&gt; String?\n"],["operator","YARP::EmbeddedVariableNode","YARP/EmbeddedVariableNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::FlipFlopNode","YARP/FlipFlopNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::GlobalVariableAndWriteNode","YARP/GlobalVariableAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::GlobalVariableOrWriteNode","YARP/GlobalVariableOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::GlobalVariableWriteNode","YARP/GlobalVariableWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::InstanceVariableAndWriteNode","YARP/InstanceVariableAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::InstanceVariableOrWriteNode","YARP/InstanceVariableOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::InstanceVariableWriteNode","YARP/InstanceVariableWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::KeywordRestParameterNode","YARP/KeywordRestParameterNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::LambdaNode","YARP/LambdaNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::LocalVariableAndWriteNode","YARP/LocalVariableAndWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::LocalVariableOrWriteNode","YARP/LocalVariableOrWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::LocalVariableWriteNode","YARP/LocalVariableWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::MatchPredicateNode","YARP/MatchPredicateNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::MatchRequiredNode","YARP/MatchRequiredNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::NoKeywordsParameterNode","YARP/NoKeywordsParameterNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::OptionalParameterNode","YARP/OptionalParameterNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::OrNode","YARP/OrNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::PinnedVariableNode","YARP/PinnedVariableNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::RangeNode","YARP/RangeNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::RescueNode","YARP/RescueNode.html#method-i-operator","()","<p>def operator: () -&gt; String?\n"],["operator","YARP::RestParameterNode","YARP/RestParameterNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::SingletonClassNode","YARP/SingletonClassNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["operator","YARP::SplatNode","YARP/SplatNode.html#method-i-operator","()","<p>def operator: () -&gt; String\n"],["options","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-options","()","<p>Returns a numeric value that represents the flags that were used to create the regular expression. This …\n"],["options","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-options","()","<p>Returns a numeric value that represents the flags that were used to create the regular expression. This …\n"],["parse","YARP","YARP.html#method-c-parse","(code, filepath = nil)","<p>Mirror the YARP.parse API by using the serialization API.\n"],["parse","YARP::RipperCompat","YARP/RipperCompat.html#method-i-parse","()",""],["parse_file","YARP","YARP.html#method-c-parse_file","(filepath)","<p>Mirror the YARP.parse_file API by using the serialization API. This uses native strings instead of Ruby …\n"],["parse_lex","YARP","YARP.html#method-c-parse_lex","(code, filepath = nil)","<p>Mirror the YARP.parse_lex API by using the serialization API.\n"],["parse_lex_file","YARP","YARP.html#method-c-parse_lex_file","(filepath)","<p>Mirror the YARP.parse_lex_file API by using the serialization API.\n"],["parse_serialize_file","YARP::Debug","YARP/Debug.html#method-c-parse_serialize_file","(filepath)",""],["pretty_print","YARP::Location","YARP/Location.html#method-i-pretty_print","(q)",""],["pretty_print","YARP::Node","YARP/Node.html#method-i-pretty_print","(q)",""],["pretty_print","YARP::Token","YARP/Token.html#method-i-pretty_print","(q)",""],["read","YARP::LibRubyParser::YPBuffer","YARP/LibRubyParser/YPBuffer.html#method-i-read","()",""],["read","YARP::LibRubyParser::YPString","YARP/LibRubyParser/YPString.html#method-i-read","()",""],["resolve_type","YARP::LibRubyParser","YARP/LibRubyParser.html#method-c-resolve_type","(type)","<p>Convert a native C type declaration into a symbol that FFI understands. For example:\n\n<pre>const char * -&gt; :pointer ...</pre>\n"],["result","YARP::LexCompat","YARP/LexCompat.html#method-i-result","()",""],["result","YARP::RipperCompat","YARP/RipperCompat.html#method-i-result","()",""],["rparen","YARP::DefNode","YARP/DefNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String?\n"],["rparen","YARP::DefinedNode","YARP/DefinedNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String?\n"],["rparen","YARP::MultiTargetNode","YARP/MultiTargetNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String?\n"],["rparen","YARP::MultiWriteNode","YARP/MultiWriteNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String?\n"],["rparen","YARP::PinnedExpressionNode","YARP/PinnedExpressionNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String\n"],["rparen","YARP::SuperNode","YARP/SuperNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String?\n"],["rparen","YARP::YieldNode","YARP/YieldNode.html#method-i-rparen","()","<p>def rparen: () -&gt; String?\n"],["run","YARP::LanguageServer","YARP/LanguageServer.html#method-i-run","()","<p>rubocop:disable Layout/LineLength\n"],["safe_navigation?","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-safe_navigation-3F","()","<p>def safe_navigation?: () -&gt; bool\n"],["safe_navigation?","YARP::CallNode","YARP/CallNode.html#method-i-safe_navigation-3F","()","<p>def safe_navigation?: () -&gt; bool\n"],["safe_navigation?","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-safe_navigation-3F","()","<p>def safe_navigation?: () -&gt; bool\n"],["safe_navigation?","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-safe_navigation-3F","()","<p>def safe_navigation?: () -&gt; bool\n"],["scan","YARP::Pattern","YARP/Pattern.html#method-i-scan","(root)",""],["set_newline_flag","YARP::BeginNode","YARP/BeginNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::IfNode","YARP/IfNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::InterpolatedStringNode","YARP/InterpolatedStringNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::InterpolatedSymbolNode","YARP/InterpolatedSymbolNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::InterpolatedXStringNode","YARP/InterpolatedXStringNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::Node","YARP/Node.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::ParenthesesNode","YARP/ParenthesesNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::RescueModifierNode","YARP/RescueModifierNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::UnlessNode","YARP/UnlessNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::UntilNode","YARP/UntilNode.html#method-i-set_newline_flag","(newline_marked)",""],["set_newline_flag","YARP::WhileNode","YARP/WhileNode.html#method-i-set_newline_flag","(newline_marked)",""],["sexp","YARP::RipperCompat","YARP/RipperCompat.html#method-c-sexp","(source)","<p>This is a convenience method that runs the SexpBuilderPP subclass parser.\n"],["sexp_raw","YARP::RipperCompat","YARP/RipperCompat.html#method-c-sexp_raw","(source)","<p>This is a convenience method that runs the SexpBuilder subclass parser.\n"],["slice","YARP::Location","YARP/Location.html#method-i-slice","()","<p>The source code that this location represents.\n"],["slice","YARP::Node","YARP/Node.html#method-i-slice","()","<p>Slice the location of the node from the source.\n"],["slice","YARP::Source","YARP/Source.html#method-i-slice","(offset, length)",""],["source","YARP::LibRubyParser::YPString","YARP/LibRubyParser/YPString.html#method-i-source","()",""],["start_column","YARP::Location","YARP/Location.html#method-i-start_column","()","<p>The column number in bytes where this location starts from the start of the line.\n"],["start_line","YARP::Location","YARP/Location.html#method-i-start_line","()","<p>The line number where this location starts.\n"],["start_line_slice","YARP::Location","YARP/Location.html#method-i-start_line_slice","()","<p>The content of the line where this location starts before this location.\n"],["start_offset","YARP::ParseResult::Comments::LocationTarget","YARP/ParseResult/Comments/LocationTarget.html#method-i-start_offset","()",""],["start_offset","YARP::ParseResult::Comments::NodeTarget","YARP/ParseResult/Comments/NodeTarget.html#method-i-start_offset","()",""],["state","YARP::LexCompat::Token","YARP/LexCompat/Token.html#method-i-state","()",""],["success?","YARP::ParseResult","YARP/ParseResult.html#method-i-success-3F","()",""],["then","YARP::InNode","YARP/InNode.html#method-i-then","()","<p>def then: () -&gt; String?\n"],["to_a","YARP::LexCompat::Heredoc::DashHeredoc","YARP/LexCompat/Heredoc/DashHeredoc.html#method-i-to_a","()",""],["to_a","YARP::LexCompat::Heredoc::DedentingHeredoc","YARP/LexCompat/Heredoc/DedentingHeredoc.html#method-i-to_a","()",""],["to_a","YARP::LexCompat::Heredoc::PlainHeredoc","YARP/LexCompat/Heredoc/PlainHeredoc.html#method-i-to_a","()",""],["to_str","YARP::NodeInspector","YARP/NodeInspector.html#method-i-to_str","()","<p>Returns the output as a string.\n"],["trailing?","YARP::Comment","YARP/Comment.html#method-i-trailing-3F","()","<p>Returns true if the comment happens on the same line as other code and false if the comment is by itself …\n"],["type","YARP::Debug::ISeq","YARP/Debug/ISeq.html#method-i-type","()",""],["unpack1","Object","Object.html#method-i-unpack1","(format, offset: 0)",""],["utf_8?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-utf_8-3F","()","<p>def utf_8?: () -&gt; bool\n"],["utf_8?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-utf_8-3F","()","<p>def utf_8?: () -&gt; bool\n"],["utf_8?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-utf_8-3F","()","<p>def utf_8?: () -&gt; bool\n"],["utf_8?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-utf_8-3F","()","<p>def utf_8?: () -&gt; bool\n"],["value","YARP::FloatNode","YARP/FloatNode.html#method-i-value","()","<p>Returns the value of the node as a Ruby Float.\n"],["value","YARP::ImaginaryNode","YARP/ImaginaryNode.html#method-i-value","()","<p>Returns the value of the node as a Ruby Complex.\n"],["value","YARP::IntegerNode","YARP/IntegerNode.html#method-i-value","()","<p>Returns the value of the node as a Ruby Integer.\n"],["value","YARP::LexCompat::Token","YARP/LexCompat/Token.html#method-i-value","()",""],["value","YARP::LibRubyParser::YPBuffer","YARP/LibRubyParser/YPBuffer.html#method-i-value","()",""],["value","YARP::RationalNode","YARP/RationalNode.html#method-i-value","()","<p>Returns the value of the node as a Ruby Rational.\n"],["value","YARP::SymbolNode","YARP/SymbolNode.html#method-i-value","()","<p>def value: () -&gt; String?\n"],["variable_call?","YARP::CallAndWriteNode","YARP/CallAndWriteNode.html#method-i-variable_call-3F","()","<p>def variable_call?: () -&gt; bool\n"],["variable_call?","YARP::CallNode","YARP/CallNode.html#method-i-variable_call-3F","()","<p>def variable_call?: () -&gt; bool\n"],["variable_call?","YARP::CallOperatorWriteNode","YARP/CallOperatorWriteNode.html#method-i-variable_call-3F","()","<p>def variable_call?: () -&gt; bool\n"],["variable_call?","YARP::CallOrWriteNode","YARP/CallOrWriteNode.html#method-i-variable_call-3F","()","<p>def variable_call?: () -&gt; bool\n"],["visit","YARP::BasicVisitor","YARP/BasicVisitor.html#method-i-visit","(node)",""],["visit","YARP::RipperCompat","YARP/RipperCompat.html#method-i-visit","(node)","<p>Visitor methods\n"],["visit_alias_global_variable_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_alias_global_variable_node","(node)","<p>Copy a AliasGlobalVariableNode node\n"],["visit_alias_method_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_alias_method_node","(node)","<p>Copy a AliasMethodNode node\n"],["visit_all","YARP::BasicVisitor","YARP/BasicVisitor.html#method-i-visit_all","(nodes)",""],["visit_alternation_pattern_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_alternation_pattern_node","(node)","<p>Copy a AlternationPatternNode node\n"],["visit_and_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_and_node","(node)","<p>Copy a AndNode node\n"],["visit_arguments_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_arguments_node","(node)","<p>Copy a ArgumentsNode node\n"],["visit_array_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_array_node","(node)","<p>Copy a ArrayNode node\n"],["visit_array_pattern_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_array_pattern_node","(node)","<p>Copy a ArrayPatternNode node\n"],["visit_assoc_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_assoc_node","(node)","<p>Copy a AssocNode node\n"],["visit_assoc_splat_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_assoc_splat_node","(node)","<p>Copy a AssocSplatNode node\n"],["visit_back_reference_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_back_reference_read_node","(node)","<p>Copy a BackReferenceReadNode node\n"],["visit_begin_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_begin_node","(node)","<p>Copy a BeginNode node\n"],["visit_block_argument_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_block_argument_node","(node)","<p>Copy a BlockArgumentNode node\n"],["visit_block_local_variable_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_block_local_variable_node","(node)","<p>Copy a BlockLocalVariableNode node\n"],["visit_block_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_block_node","(node)","<p>Copy a BlockNode node\n"],["visit_block_node","YARP::ParseResult::Newlines","YARP/ParseResult/Newlines.html#method-i-visit_block_node","(node)",""],["visit_block_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_block_parameter_node","(node)","<p>Copy a BlockParameterNode node\n"],["visit_block_parameters_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_block_parameters_node","(node)","<p>Copy a BlockParametersNode node\n"],["visit_break_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_break_node","(node)","<p>Copy a BreakNode node\n"],["visit_call_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_call_and_write_node","(node)","<p>Copy a CallAndWriteNode node\n"],["visit_call_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_call_node","(node)","<p>Copy a CallNode node\n"],["visit_call_node","YARP::RipperCompat","YARP/RipperCompat.html#method-i-visit_call_node","(node)",""],["visit_call_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_call_operator_write_node","(node)","<p>Copy a CallOperatorWriteNode node\n"],["visit_call_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_call_or_write_node","(node)","<p>Copy a CallOrWriteNode node\n"],["visit_capture_pattern_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_capture_pattern_node","(node)","<p>Copy a CapturePatternNode node\n"],["visit_case_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_case_node","(node)","<p>Copy a CaseNode node\n"],["visit_child_nodes","YARP::BasicVisitor","YARP/BasicVisitor.html#method-i-visit_child_nodes","(node)",""],["visit_class_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_node","(node)","<p>Copy a ClassNode node\n"],["visit_class_variable_and_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_class_variable_and_write_node","(node)","<p>@@foo &amp;&amp;= bar\n<p>becomes\n<p>@@foo &amp;&amp; @@foo = bar\n"],["visit_class_variable_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_variable_and_write_node","(node)","<p>Copy a ClassVariableAndWriteNode node\n"],["visit_class_variable_operator_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_class_variable_operator_write_node","(node)","<p>@@foo += bar\n<p>becomes\n<p>@@foo = @@foo + bar\n"],["visit_class_variable_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_variable_operator_write_node","(node)","<p>Copy a ClassVariableOperatorWriteNode node\n"],["visit_class_variable_or_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_class_variable_or_write_node","(node)","<p>@@foo ||= bar\n<p>becomes\n<p>defined?(@@foo) ? @@foo : @@foo = bar\n"],["visit_class_variable_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_variable_or_write_node","(node)","<p>Copy a ClassVariableOrWriteNode node\n"],["visit_class_variable_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_variable_read_node","(node)","<p>Copy a ClassVariableReadNode node\n"],["visit_class_variable_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_variable_target_node","(node)","<p>Copy a ClassVariableTargetNode node\n"],["visit_class_variable_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_class_variable_write_node","(node)","<p>Copy a ClassVariableWriteNode node\n"],["visit_constant_and_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_constant_and_write_node","(node)","<p>Foo &amp;&amp;= bar\n<p>becomes\n<p>Foo &amp;&amp; Foo = bar\n"],["visit_constant_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_and_write_node","(node)","<p>Copy a ConstantAndWriteNode node\n"],["visit_constant_operator_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_constant_operator_write_node","(node)","<p>Foo += bar\n<p>becomes\n<p>Foo = Foo + bar\n"],["visit_constant_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_operator_write_node","(node)","<p>Copy a ConstantOperatorWriteNode node\n"],["visit_constant_or_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_constant_or_write_node","(node)","<p>Foo ||= bar\n<p>becomes\n<p>defined?(Foo) ? Foo : Foo = bar\n"],["visit_constant_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_or_write_node","(node)","<p>Copy a ConstantOrWriteNode node\n"],["visit_constant_path_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_path_and_write_node","(node)","<p>Copy a ConstantPathAndWriteNode node\n"],["visit_constant_path_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_path_node","(node)","<p>Copy a ConstantPathNode node\n"],["visit_constant_path_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_path_operator_write_node","(node)","<p>Copy a ConstantPathOperatorWriteNode node\n"],["visit_constant_path_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_path_or_write_node","(node)","<p>Copy a ConstantPathOrWriteNode node\n"],["visit_constant_path_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_path_target_node","(node)","<p>Copy a ConstantPathTargetNode node\n"],["visit_constant_path_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_path_write_node","(node)","<p>Copy a ConstantPathWriteNode node\n"],["visit_constant_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_read_node","(node)","<p>Copy a ConstantReadNode node\n"],["visit_constant_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_target_node","(node)","<p>Copy a ConstantTargetNode node\n"],["visit_constant_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_constant_write_node","(node)","<p>Copy a ConstantWriteNode node\n"],["visit_def_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_def_node","(node)","<p>Copy a DefNode node\n"],["visit_defined_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_defined_node","(node)","<p>Copy a DefinedNode node\n"],["visit_else_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_else_node","(node)","<p>Copy a ElseNode node\n"],["visit_embedded_statements_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_embedded_statements_node","(node)","<p>Copy a EmbeddedStatementsNode node\n"],["visit_embedded_variable_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_embedded_variable_node","(node)","<p>Copy a EmbeddedVariableNode node\n"],["visit_ensure_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_ensure_node","(node)","<p>Copy a EnsureNode node\n"],["visit_false_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_false_node","(node)","<p>Copy a FalseNode node\n"],["visit_find_pattern_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_find_pattern_node","(node)","<p>Copy a FindPatternNode node\n"],["visit_flip_flop_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_flip_flop_node","(node)","<p>Copy a FlipFlopNode node\n"],["visit_float_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_float_node","(node)","<p>Copy a FloatNode node\n"],["visit_for_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_for_node","(node)","<p>Copy a ForNode node\n"],["visit_forwarding_arguments_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_forwarding_arguments_node","(node)","<p>Copy a ForwardingArgumentsNode node\n"],["visit_forwarding_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_forwarding_parameter_node","(node)","<p>Copy a ForwardingParameterNode node\n"],["visit_forwarding_super_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_forwarding_super_node","(node)","<p>Copy a ForwardingSuperNode node\n"],["visit_global_variable_and_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_global_variable_and_write_node","(node)","<p>$foo &amp;&amp;= bar\n<p>becomes\n<p>$foo &amp;&amp; $foo = bar\n"],["visit_global_variable_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_global_variable_and_write_node","(node)","<p>Copy a GlobalVariableAndWriteNode node\n"],["visit_global_variable_operator_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_global_variable_operator_write_node","(node)","<p>$foo += bar\n<p>becomes\n<p>$foo = $foo + bar\n"],["visit_global_variable_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_global_variable_operator_write_node","(node)","<p>Copy a GlobalVariableOperatorWriteNode node\n"],["visit_global_variable_or_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_global_variable_or_write_node","(node)","<p>$foo ||= bar\n<p>becomes\n<p>defined?($foo) ? $foo : $foo = bar\n"],["visit_global_variable_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_global_variable_or_write_node","(node)","<p>Copy a GlobalVariableOrWriteNode node\n"],["visit_global_variable_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_global_variable_read_node","(node)","<p>Copy a GlobalVariableReadNode node\n"],["visit_global_variable_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_global_variable_target_node","(node)","<p>Copy a GlobalVariableTargetNode node\n"],["visit_global_variable_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_global_variable_write_node","(node)","<p>Copy a GlobalVariableWriteNode node\n"],["visit_hash_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_hash_node","(node)","<p>Copy a HashNode node\n"],["visit_hash_pattern_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_hash_pattern_node","(node)","<p>Copy a HashPatternNode node\n"],["visit_if_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_if_node","(node)","<p>Copy a IfNode node\n"],["visit_if_node","YARP::ParseResult::Newlines","YARP/ParseResult/Newlines.html#method-i-visit_if_node","(node)",""],["visit_imaginary_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_imaginary_node","(node)","<p>Copy a ImaginaryNode node\n"],["visit_in_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_in_node","(node)","<p>Copy a InNode node\n"],["visit_instance_variable_and_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_instance_variable_and_write_node","(node)","<p>@foo &amp;&amp;= bar\n<p>becomes\n<p>@foo &amp;&amp; @foo = bar\n"],["visit_instance_variable_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_instance_variable_and_write_node","(node)","<p>Copy a InstanceVariableAndWriteNode node\n"],["visit_instance_variable_operator_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_instance_variable_operator_write_node","(node)","<p>@foo += bar\n<p>becomes\n<p>@foo = @foo + bar\n"],["visit_instance_variable_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_instance_variable_operator_write_node","(node)","<p>Copy a InstanceVariableOperatorWriteNode node\n"],["visit_instance_variable_or_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_instance_variable_or_write_node","(node)","<p>@foo ||= bar\n<p>becomes\n<p>@foo || @foo = bar\n"],["visit_instance_variable_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_instance_variable_or_write_node","(node)","<p>Copy a InstanceVariableOrWriteNode node\n"],["visit_instance_variable_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_instance_variable_read_node","(node)","<p>Copy a InstanceVariableReadNode node\n"],["visit_instance_variable_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_instance_variable_target_node","(node)","<p>Copy a InstanceVariableTargetNode node\n"],["visit_instance_variable_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_instance_variable_write_node","(node)","<p>Copy a InstanceVariableWriteNode node\n"],["visit_integer_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_integer_node","(node)","<p>Copy a IntegerNode node\n"],["visit_integer_node","YARP::RipperCompat","YARP/RipperCompat.html#method-i-visit_integer_node","(node)",""],["visit_interpolated_match_last_line_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_interpolated_match_last_line_node","(node)","<p>Copy a InterpolatedMatchLastLineNode node\n"],["visit_interpolated_regular_expression_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_interpolated_regular_expression_node","(node)","<p>Copy a InterpolatedRegularExpressionNode node\n"],["visit_interpolated_string_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_interpolated_string_node","(node)","<p>Copy a InterpolatedStringNode node\n"],["visit_interpolated_symbol_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_interpolated_symbol_node","(node)","<p>Copy a InterpolatedSymbolNode node\n"],["visit_interpolated_x_string_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_interpolated_x_string_node","(node)","<p>Copy a InterpolatedXStringNode node\n"],["visit_keyword_hash_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_keyword_hash_node","(node)","<p>Copy a KeywordHashNode node\n"],["visit_keyword_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_keyword_parameter_node","(node)","<p>Copy a KeywordParameterNode node\n"],["visit_keyword_rest_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_keyword_rest_parameter_node","(node)","<p>Copy a KeywordRestParameterNode node\n"],["visit_lambda_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_lambda_node","(node)","<p>Copy a LambdaNode node\n"],["visit_lambda_node","YARP::ParseResult::Newlines","YARP/ParseResult/Newlines.html#method-i-visit_lambda_node","(node)",""],["visit_local_variable_and_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_local_variable_and_write_node","(node)","<p>foo &amp;&amp;= bar\n<p>becomes\n<p>foo &amp;&amp; foo = bar\n"],["visit_local_variable_and_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_local_variable_and_write_node","(node)","<p>Copy a LocalVariableAndWriteNode node\n"],["visit_local_variable_operator_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_local_variable_operator_write_node","(node)","<p>foo += bar\n<p>becomes\n<p>foo = foo + bar\n"],["visit_local_variable_operator_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_local_variable_operator_write_node","(node)","<p>Copy a LocalVariableOperatorWriteNode node\n"],["visit_local_variable_or_write_node","YARP::DesugarVisitor","YARP/DesugarVisitor.html#method-i-visit_local_variable_or_write_node","(node)","<p>foo ||= bar\n<p>becomes\n<p>foo || foo = bar\n"],["visit_local_variable_or_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_local_variable_or_write_node","(node)","<p>Copy a LocalVariableOrWriteNode node\n"],["visit_local_variable_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_local_variable_read_node","(node)","<p>Copy a LocalVariableReadNode node\n"],["visit_local_variable_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_local_variable_target_node","(node)","<p>Copy a LocalVariableTargetNode node\n"],["visit_local_variable_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_local_variable_write_node","(node)","<p>Copy a LocalVariableWriteNode node\n"],["visit_match_last_line_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_match_last_line_node","(node)","<p>Copy a MatchLastLineNode node\n"],["visit_match_predicate_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_match_predicate_node","(node)","<p>Copy a MatchPredicateNode node\n"],["visit_match_required_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_match_required_node","(node)","<p>Copy a MatchRequiredNode node\n"],["visit_missing_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_missing_node","(node)","<p>Copy a MissingNode node\n"],["visit_module_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_module_node","(node)","<p>Copy a ModuleNode node\n"],["visit_multi_target_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_multi_target_node","(node)","<p>Copy a MultiTargetNode node\n"],["visit_multi_write_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_multi_write_node","(node)","<p>Copy a MultiWriteNode node\n"],["visit_next_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_next_node","(node)","<p>Copy a NextNode node\n"],["visit_nil_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_nil_node","(node)","<p>Copy a NilNode node\n"],["visit_no_keywords_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_no_keywords_parameter_node","(node)","<p>Copy a NoKeywordsParameterNode node\n"],["visit_numbered_reference_read_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_numbered_reference_read_node","(node)","<p>Copy a NumberedReferenceReadNode node\n"],["visit_optional_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_optional_parameter_node","(node)","<p>Copy a OptionalParameterNode node\n"],["visit_or_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_or_node","(node)","<p>Copy a OrNode node\n"],["visit_parameters_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_parameters_node","(node)","<p>Copy a ParametersNode node\n"],["visit_parentheses_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_parentheses_node","(node)","<p>Copy a ParenthesesNode node\n"],["visit_pinned_expression_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_pinned_expression_node","(node)","<p>Copy a PinnedExpressionNode node\n"],["visit_pinned_variable_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_pinned_variable_node","(node)","<p>Copy a PinnedVariableNode node\n"],["visit_post_execution_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_post_execution_node","(node)","<p>Copy a PostExecutionNode node\n"],["visit_pre_execution_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_pre_execution_node","(node)","<p>Copy a PreExecutionNode node\n"],["visit_program_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_program_node","(node)","<p>Copy a ProgramNode node\n"],["visit_program_node","YARP::RipperCompat","YARP/RipperCompat.html#method-i-visit_program_node","(node)",""],["visit_range_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_range_node","(node)","<p>Copy a RangeNode node\n"],["visit_rational_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_rational_node","(node)","<p>Copy a RationalNode node\n"],["visit_redo_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_redo_node","(node)","<p>Copy a RedoNode node\n"],["visit_regular_expression_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_regular_expression_node","(node)","<p>Copy a RegularExpressionNode node\n"],["visit_required_destructured_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_required_destructured_parameter_node","(node)","<p>Copy a RequiredDestructuredParameterNode node\n"],["visit_required_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_required_parameter_node","(node)","<p>Copy a RequiredParameterNode node\n"],["visit_rescue_modifier_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_rescue_modifier_node","(node)","<p>Copy a RescueModifierNode node\n"],["visit_rescue_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_rescue_node","(node)","<p>Copy a RescueNode node\n"],["visit_rest_parameter_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_rest_parameter_node","(node)","<p>Copy a RestParameterNode node\n"],["visit_retry_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_retry_node","(node)","<p>Copy a RetryNode node\n"],["visit_return_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_return_node","(node)","<p>Copy a ReturnNode node\n"],["visit_self_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_self_node","(node)","<p>Copy a SelfNode node\n"],["visit_singleton_class_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_singleton_class_node","(node)","<p>Copy a SingletonClassNode node\n"],["visit_source_encoding_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_source_encoding_node","(node)","<p>Copy a SourceEncodingNode node\n"],["visit_source_file_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_source_file_node","(node)","<p>Copy a SourceFileNode node\n"],["visit_source_line_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_source_line_node","(node)","<p>Copy a SourceLineNode node\n"],["visit_splat_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_splat_node","(node)","<p>Copy a SplatNode node\n"],["visit_statements_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_statements_node","(node)","<p>Copy a StatementsNode node\n"],["visit_statements_node","YARP::ParseResult::Newlines","YARP/ParseResult/Newlines.html#method-i-visit_statements_node","(node)",""],["visit_statements_node","YARP::RipperCompat","YARP/RipperCompat.html#method-i-visit_statements_node","(node)",""],["visit_string_concat_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_string_concat_node","(node)","<p>Copy a StringConcatNode node\n"],["visit_string_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_string_node","(node)","<p>Copy a StringNode node\n"],["visit_super_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_super_node","(node)","<p>Copy a SuperNode node\n"],["visit_symbol_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_symbol_node","(node)","<p>Copy a SymbolNode node\n"],["visit_token","YARP::RipperCompat","YARP/RipperCompat.html#method-i-visit_token","(node)",""],["visit_true_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_true_node","(node)","<p>Copy a TrueNode node\n"],["visit_undef_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_undef_node","(node)","<p>Copy a UndefNode node\n"],["visit_unless_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_unless_node","(node)","<p>Copy a UnlessNode node\n"],["visit_unless_node","YARP::ParseResult::Newlines","YARP/ParseResult/Newlines.html#method-i-visit_unless_node","(node)",""],["visit_until_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_until_node","(node)","<p>Copy a UntilNode node\n"],["visit_when_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_when_node","(node)","<p>Copy a WhenNode node\n"],["visit_while_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_while_node","(node)","<p>Copy a WhileNode node\n"],["visit_x_string_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_x_string_node","(node)","<p>Copy a XStringNode node\n"],["visit_yield_node","YARP::MutationVisitor","YARP/MutationVisitor.html#method-i-visit_yield_node","(node)","<p>Copy a YieldNode node\n"],["windows_31j?","YARP::InterpolatedMatchLastLineNode","YARP/InterpolatedMatchLastLineNode.html#method-i-windows_31j-3F","()","<p>def windows_31j?: () -&gt; bool\n"],["windows_31j?","YARP::InterpolatedRegularExpressionNode","YARP/InterpolatedRegularExpressionNode.html#method-i-windows_31j-3F","()","<p>def windows_31j?: () -&gt; bool\n"],["windows_31j?","YARP::MatchLastLineNode","YARP/MatchLastLineNode.html#method-i-windows_31j-3F","()","<p>def windows_31j?: () -&gt; bool\n"],["windows_31j?","YARP::RegularExpressionNode","YARP/RegularExpressionNode.html#method-i-windows_31j-3F","()","<p>def windows_31j?: () -&gt; bool\n"],["with","YARP::LibRubyParser::YPBuffer","YARP/LibRubyParser/YPBuffer.html#method-c-with","(&block)","<p>Initialize a new buffer and yield it to the block. The buffer will be automatically freed when the block …\n"],["with","YARP::LibRubyParser::YPString","YARP/LibRubyParser/YPString.html#method-c-with","(filepath, &block)","<p>Yields a yp_string_t pointer to the given block.\n"],["write","YARP::LanguageServer","YARP/LanguageServer.html#method-i-write","(value)",""],["yarp_locals","YARP::Debug","YARP/Debug.html#method-c-yarp_locals","(source)","<p>For the given source, parses with YARP and returns a list of all of the sets of local variables that …\n"]]}}